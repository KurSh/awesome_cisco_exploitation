# $Id: Buffer_Pool_Primer,v 3.1 1995/11/09 10:48:45 shaker Exp $

          Title: Buffer Pool Primer
           Date: 28-July-93
        Version: 1.0

Copyright (c) 1993-1995 by cisco Systems, Inc.

The document describes the programming interface and developer hooks
available into the buffer pool system.

Buffer Pools
============

Buffer pools define a block of buffers with the same characteristics, usually
the same size and memory area (i.e. processor, shared or multibus memory).
In addition, buffer pools themselves can have various characteristics.

The primary characteristics are

 o Public/Private

   The majority of the buffer pools most programmers are familiar with are
   public pools (i.e. they show up in "show buffers"). Public pools are
   scanned when someone executes getbuffer(), looking for a pool to service
   the request. 

   However, some interfaces require specialist buffers in order to operate.
   The BSI FDDI driver, for example, requires that it's receive buffers be
   allocated on 8K page boundaries and have a specialist alignment. Therefore
   the driver allocates a private buffer pool for itself. The pool needs to
   be private so less fussy getbuffer() requests don't eat away at the more
   esoteric stock.

 o Dynamic/Static

   Most buffer pools in a router can be considered as consisting of two
   flavors of buffer - permanent and temporary. Permanent buffers are allocated
   at power-up and form the bulk of the buffers available. However, if a
   getbuffer() request fails, a temporary buffer will be created for the pool
   (if the request is at interrupt level, the creation will take place from
   process level at a later point in time). The temporary buffers will be
   trimmed away later, depending on the maxima and minima for free list size
   on the buffer pool.

   Dynamic pools allow temporary buffers to be created (all the system defined
   public pools are dynamic). However, not every pool needs or wants this
   facility. In fact, for some drivers with exceptionally large MTUs, it can
   cause the buffer memory to be depleted much faster. Pools that don't need
   to have temporary buffers allocated can be declared static, and they 
   won't be considered by the background processes for adjustment.

Pool Creation
=============

Pools can be created and filled by using the following functions

	pooltype *pool_init(char *name, int size, uint flags, mempool *iopool)
	void pool_adjust(pooltype *pool, int min, int max, int perm)

For example

	pooltype *pool;    

        pool = pool_init("foo", 1000, POOL_DEFAULT_FLAGS, &IO_BUFFER_POOL);
        pool_adjust(pool, 5, 40, 30);

The pool_init() call creates a new buffer pool called "foo" with a buffer size
of 1000 bytes. POOL_DEFAULT_FLAGS are, rather obviously, the default pool flags
for the system. The defaults are to create a dynamic, public pool with extra
sanity checking. The final parameter is a memory pool to allocate buffers
from - IO_BUFFER_POOL is a #define on all systems to the main buffer memory.

The pool_adjust() call specifies the maxima and minima for a pool and also
the initial permanent buffer allocation. The call will attempt to create
the number of permanent buffers specified by the initial value. The pool
in the example above has a minimum free size of 5, a maximum of 40 and an
initial allocation of 30.

Acquiring Buffers
=================

Buffers can be allocated using the following old favorites 

	paktype *getbuffer(int size)
	paktype *input_getbuffer(int size, hwidbtype *idb)

They can also be allocated by calling

        paktype *pool_getbuffer(pooltype *pool, int size)

The generic execution of this function will start with the pool passed in
and step down the pool list from this point until it finds a pool that is
the right size. However, this function is extremely useful as a quick way
to grab a buffer from a pool descriptor that you know, as in

        pak = pool_getbuffer(pool, pool->size)

This is guaranteed to return a buffer from the pool specified in the call
(as long as there are buffers in the pool, obviously). Private pool buffers
can be acquired using this method.

Returning Buffers
=================

Buffers should be returned to a pool with one of the following functions

	void retbuffer(paktype *pak)
	void datagram_done(paktype *pak)

The datagram_done() call should be used if there's any chance at all that
the refcount field in the packet header might have incremented from 1.

Custom Buffer Pools
===================

Most programmers who have to come into close contact with the buffer pool
code will do so because they have buffer requirements that the default
pools cannot handle.

A couple of hooks currently exist to allow pool customisation

 o Vectors

   Currently, two vectors exist for a pool

	paktype * (*pool->buffer_create)(pooltype *pool, int size);
	void      (*pool->buffer_destroy)(pooltype *pool, paktype * pak);

   The buffer_create vector is called when the code wants to malloc a
   new buffer for a pool. The buffer_destroy vector is called when the
   code wants to destroy a buffer (due to a trim, for example).

   As an example, the BSI FDDI driver redirects both vectors. The
   buffer_create vector is subclassed to a function that allocates buffers
   that meet the alignment requirements for the driver. The buffer_destroy
   vector is subclassed to a function that will force a software crash
   as this is an illegal action for the pool (as it's static). 

   These functions must *not* be set to NULL. The pool is initialized
   with the correct defaults. If you have to replace the functions for
   a temporary period, save the old function pointer for restoration.

 o User Context pointer

   	mempointer pool->user_context

   This is a rather grandiose name for a spare pointer in the pooltype
   structure for general use. It is guaranteed not to be used by the system
   code. This can be used for passing context through to the vectors above,
   who only receive a pointer to a pool. For example, if a pool is tied to an
   idb, the idb pointer can be held here.

 o Flags

   Most custom pools will be defined as being private and static for the most
   part. In addition, extra sanity checking can be turned on for the really
   paranoid. However, the sanity checking relies on the fact that every
   buffer in the pool has been allocated discretely by malloc(). If this
   isn't true (i.e. the buffers are cookie cut from one large malloc) then
   this flag should be turned off.

Buffer Caches
=============

Each pool can have a buffer cache associated with it. The buffer cache code
was written originally by Chris Shaker for the low-end platforms. The code
attempts to increase the performance of the system by reducing the time it
takes to allocate a buffer and return it back into the pool.

This is very important for the low-end systems which have their buffer pools
in shared memory. Accesses into the packet header are very slow and the
cache code attempts to minimize accesses for this reason. In addition, the
cache code attempts to reduce the function call overhead associated with
buffer manipulation.

The buffer cache functions are

	boolean pool_add_buffer_cache(pooltype *pool, int size, int maxsize)
	void    pool_fill_buffer_cache(pooltype *pool, boolean add_new_buffers)
	void    pool_destroy_buffer_cache(pooltype *pool)

For example, to create and fill a buffer cache for a pool -

	if (!pool_add_buffer_cache(pool, 32, 64)) {
	   /*
            * We failed to create the cache
            */
           buginf("\ntest(): Cache creation failed for %s pool", pool->name);
        } else {
	   /*
            * Fill newly created cache
	    */
            pool_fill_buffer_cache(pool, TRUE);
        }

This will create a buffer pool cache with a maximum of 64 entries and an
initial size of 32. Currently, the code will make no attempt to increase
the number of cached buffers past the initial size.

The pool is then filled with the pool_fill_buffer_cache() call which will
create the 32 new buffers rather than deplete the buffers already in the
pool. Specifying FALSE for the 2nd argument to this function will cause the
cache to be filled with the buffers that are already present.

To destroy a cache, the function pool_destroy_buffer_cache() should be used.

Cache buffers are not associated with the pool for getbuffer() operations.
Specialist code must be written to remove buffers from the cache although
either a retbuffer() or datagram_done() will return buffers.

For example, the Lance Ethernet driver uses the following code section to
acquire a buffer.

    if (idb->pool->cache_end) {

        /*
         * Check for input congestion:
         */
        if (idb->input_qcount <= idb->input_defqcount) {

            /*
             * Get a cached buffer and charge the buffer to the input
             * interface, or note that we don't have one to give:
             */
            p = idb->pool->buffer_cache[--idb->pool->cache_end];
        }
    }
    if (!p)
        p = (paktype *)getbuffer(idb->maxdgram);

Note that the code falls back to a getbuffer() if the cache is empty.

Currently, buffer caches are used solely by the low-end platforms to increase
the speed of packet switching. The usefulness of buffer caches will need
to be re-evaluated when the packet header is split from the data area
and accesses into the packet header become less of a liability.

Down In The Guts
================

This brief section is for those folk who want a little more detail on the
hows and the whys of the current buffer pool code.

There's a basic hierarchy here -

                                    +-- Buffer
                                    +-- Buffer
      Memory Pool -+-- Buffer Pool -+-- Buffer
                   |                +-- Buffer
                   |                .
                   |                .
                   |
                   |
                   +-- Buffer Pool -+-- Buffer
                   |                +-- Buffer
                   |                .
                   .                .

The packet header for a buffer contains a backpointer to the buffer pool that
it belongs to. This is how the buffer management code knows which pool the
buffer was allocated from. In turn, the buffer pool header contains a pointer
to the memory pool (free list memory manager) that it belongs to. So, it's
possible to traverse back up the tree from a buffer without too much
difficulty.

The advantage to having a backpointer in the buffer packet header is that
the system scales for buffer returns - there's no traversal of a linked
list to return the buffer. In addition, it allows the buffer code to run
without knowledge of the buffer pools that are defined in the system.
This means that new pools can be added at will without the need for
any code changes.

The backpointer in the pool descriptor to the memory pool allows for a
buffer system that has buffers spread across multiple areas of memory
without the buffer code being aware of it. By abstracting the memory
pool, pools can be made dynamic without any extra code.

All pool descriptors contain a magic number so that bogus pointers from corrupt
buffer packet headers can be caught. This is important as the buffer header
is traditionally an area that's open to all sorts of corruption.

Pool descriptors are queued in one of two queues. The most heavily used queue
is the publicpoolQ. This is the list that's scanned for all of the system
buffer requests (such as getbuffer()). All pools that are declared public end
up in this queue and are considered fair game for system buffer requests.

The privatepoolQ is only used for tracking purposes so that all pool
descriptors in the system are recorded. The privatepoolQ will probably only
be traversed for informational or debugging purposes.

Both pool queues are sorted in ascending order so that buffer requests can be
serviced by skipping down the queue until one that is big enough for the
requested size can be found. New pools can be added at any time and linked in.
Pool destruction is not yet implemented but could be without too much added
complexity.

This system allows a fairly complicated arrangement of pools to be created,
spread across a number of different memory pool systems and with different
characteristics without changing any core system code.

