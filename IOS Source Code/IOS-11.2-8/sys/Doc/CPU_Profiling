# $Id: CPU_Profiling,v 3.2 1995/11/17 08:33:02 hampton Exp $
# $Source: /swtal/cherf.111/ios/sys/Doc/CPU_Profiling,v $
#------------------------------------------------------------------
# CPU Profiling Documentation
#
# May 1995, Dave Katz
#
# Copyright (c) 1995 by cisco Systems, Inc.
# All rights reserved.
#
#------------------------------------------------------------------
# $Log: CPU_Profiling,v $
# Revision 3.2  1995/11/17  08:33:02  hampton
# Remove old entries from the RCS header logs.
#
# Revision 3.1  1995/11/09  10:48:46  shaker
# Bump version numbers from 2.x to 3.x.
#
# Revision 2.1  1995/06/07  19:59:17  hampton
# Bump version numbers from 1.x to 2.x.
#
# ------------------------------------------------------------------
# $Endlog$

	Title: CPU Profiling
	Date: 5-May-1995


1.  Introduction

A low-overhead way of determining where the CPU spends its time is
available as an integral part of all releases.  This function is
quite useful during development (to help focus attention on the
areas that require optimization) as well as in the field and the
lab, to help track down performance problems.

The system works by sampling the processor location every four
milliseconds (250 times per second).  The count for that location in
memory is incremented.  The result is a histogram of code coverage.
Since the sampling is done from the Non-Maskable Interrupt (NMI),
the profiler will track execution of interrupt routines, and within
sections of code where interrupts have been excluded.

A postprocessing program takes the profile data and a symbol table
as input, and produces a graph of CPU usage, as well as a ranking
of the most intensive modules and procedures.


2.  Technical Overview

By default, the profiler is turned off.  To profile a section of code,
one or more "profile blocks" must be defined.  A profile block is an
address range and a granularity.  The address range must be manually
determined (usually by looking at the symbol table ahead of time).  Only
the code within the address range will be profiled.  The granularity
specifies how fine or coarse the profile will be (down to single
instructions).  Of course, the finer the granularity, the more memory
the profiler requires.

Each profile block is represented by a set of bins.  The number of
bins depends on the size of the block and its granularity.  When the
CPU location is sampled, if it lies within a profile block, the
corresponding bin is incremented.

Profile blocks may overlap;  if the CPU is caught in a location that
lies within multiple profile blocks, the appropriate bin in each block
will be incremented.

The profiler keeps track of the total number of "ticks", whether or not
the CPU is caught in a profile block or not.  This provides for absolute
CPU percentages to be calculated, regardless of how much of the code
is being profiled (see below for postprocessor details).

Overhead is minimal, for the most part.  If profiling is disabled, the
profiling system incurs a cost of a single compare instruction in the
NMI thread.  If enabled, it requires a single procedure call and
roughly 20 m68k instructions in the NMI thread per profile block.
CPUHOG mode can be expensive (see below) though not in the NMI thread.

Memory utilization is four bytes per profile bin;  the number of bins
to support a profile block is equal to the block size (end - start)
divided by the granularity.


Normally, the profiler runs continuously.  However, there are a few
special modes:

  Task mode

    The profiler will only count a CPU tick if one of a particular set of
    processes is running.  This allows one to determine, for instance,
    which process is spending excessive time in a particular piece
    of common code (the profiler will otherwise tell you that a
    procedure is called a lot, but won't tell you who is calling it).

  Interrupt mode

    Like task mode, but counts ticks only if interrupts are being
    excluded to some degree (either due to an interrupt routine running,
    or because interrupts are being temporarily excluded by a process).
    Task and interrupt mode can be run simultaneously, if desired.

  CPUHOG mode

    CPUHOG mode is useful for tracking down processes that use excessive
    amounts of CPU.  This mode works by zeroing out all bins every time
    a process is given control;  if a CPUHOG condition is detected, then
    profiling is stopped.  This gives a snapshot of where the CPU spent
    its time during the hogging process run.  WARNING:  THIS MODE INCURS
    LOTS OF OVERHEAD.  The blocks have to be zeroed prior to *every*
    process invocation.  Keep the number and size of your profile blocks
    to a minimum or you will bring the box to its knees.

    CPUHOG mode can be used in conjunction with task mode, if desired.


3.  Caveats

Nothing is perfect in this universe, and the profiler is definitely less
than perfect.  Don't blindly accept what it tells you;  you need to
understand how it determines what it tells you.

The first thing to remember is that the profiler is stochastic in nature.
It works by sampling;  250 samples per second seems like a lot, but the
box can do a lot of stuff in 4 milliseconds.  In general, the longer you
let it collect data, the more accurate it will be.

Worse yet, this is a *biased* sample.  In particular, the profiler is
synchronized with the timer system, so this may cause problems.  For
instance, if a process is waiting on a sleeping timer, the profiler
is *guaranteed* to never catch the CPU in that process unless the box
is loaded enough so that the process latency is at least 4 msec.  On
the other hand, if you're running the profiler because the box is extremely
loaded and you're trying to figure out why, the perpetrator will tend
to get caught.

Remember also that if you use a granularity larger than one instruction,
the postprocessor will not be able to accurately resolve module and
procedure boundaries, since a single bin may span a boundary.  This
can be avoided by sampling at a fine granularity over a small range;
it may take several profiling runs to do this (first profile at coarse
granularity over a wide range, then "zoom in").
  

4.  Command Reference

Most commands are EXEC commands only.  However, the command that defines
profile blocks can be done by EXEC or by configuration (the latter is handy
for tracking hard-to-reproduce problems).

All commands are hidden.


Configuration Commands:

  [no] profile <start> <end> <increment>

  Create or delete a profile block.  All three parameters are hexadecimal
  numbers (without the leading "0x").  An increment of 2 on a 68K machine
  or 4 on an R4K machine will provide per-instruction granularity.
  Creating a profile block also enables profiling (the bins will start
  to increment immediately).


EXEC Commands:

  profile <start> <end> <increment>

  Create a profile block.  All three parameters are hexadecimal
  numbers (without the leading "0x").  An increment of 2 on a 68K machine
  or 4 on an R4K machine will provide per-instruction granularity.
  Creating a profile block also enables profiling (the bins will start
  to increment immediately).


  unprofile { <start> <end> <increment> | all }

  Delete a profile block (or all of them).


  profile stop

  Halts the profiler.  All data in profile bins is preserved.


  profile start

  Restarts the profiler after having stopped it.  Data in profile bins
  is preserved (well, added to).


  clear profile

  Zero all profile blocks.


  profile task [interrupt] [PID1] [PID2] ... [PID10]

  Enable task/interrupt modes.  The PIDn parameters are the process IDs
  shown in the "show process" command.  Does not change the running/stopped
  status of the profiler.


  unprofile task

  Disables task/interrupt modes.  Does not change the running/stopped
  status of the profiler.


  profile hogs

  Enables CPUHOG profiling.  Profiling will run, with all bins cleared
  prior to each process execution, until the first CPUHOG event, at which
  time profiling will be halted (effectively doing a "profile stop"
  immediately after the CPUHOG is detected).  Issuing another "profile hogs"
  will restart the profiler in this mode.  Starts the profiler if it
  was previously stopped.


  show profile [detail | terse]

  Displays profiling information.  The unadorned command will display
  basic statistics.  The "detail" version will pretty-print the contents
  of the profile bins (of dubious usefulness).  The "terse" version
  dumps the bins in a terse format suitable for postprocessing.  Note
  that "show profile terse" does *not* obey automore processing, so
  only use this when you really mean it (see below).


5.  Usage Guidelines

The actual usage of the profiler is pretty straightforward.  First,
configure the profiler to capture the data that you want, in the
mode appropriate to the problem you are trying to solve.  Once you've
captured the data, *telnet* to the box and capture the output of
"show profile terse" to a file on a unix machine.  Do *NOT* attempt
to do this via the console port, since the console port is (a) slow, and
(b) does not obey flow control, so data will be lost.

Then feed the captured file, along with a symbol table matching the
image running in the box, to the postprocessing program.  Scratch your
head and mutter.  Repeat.


6.  Postprocessing

The postprocessing program is currently found in /csc/tools/profile.  This
will change when we find it a good home.

This program reads CPU profiling statistics and formats them in a
reasonably useful, albeit crude, fashion.

The program is invoked as follows:

    profile <symbol-file> <data-file> [<magnification> [<width>]]

  <symbol-file> is the symbol table file that corresponds to the image
  running in the box

  <data-file> contains the captured output of the "show profile terse"
  command (the file doesn't have to be clean)

  <magnification> is the optional magnification factor for the histogram--
  it defaults to 1, such that the screen width equals 100%

  <width> is the screen width (default is 80)

The program first produces an annotated histogram of CPU utilization,
scaled according to the selected magnification and screen width.  Long
lines are truncated (with "-->" added to indicate this.  Lines that
result in a zero length line are dropped.  This means that as you turn
up the magnification, more and more lines will appear in the histogram.

The histogram is annotated with module and procedure names.  If the
granularity is coarse enough so that a statistics block crosses procedure
boundaries, the first procedure will be displayed before the histogram line,
and each of the others will follow the histogram line.  If the block crosses
module boundaries, the same effect occurs;  however, if a block completely
subsumes a module, none of the component procedures will be listed.
Procedure names include their offset into their parent module, making it
easy to correlate the histogram with an object listing.

After the histogram, the top 25 modules and 100 procedures, in terms of
CPU utilization, are listed, along with their utilization percentage.
If a block crosses procedure or module boundaries, all CPU use in the
block will be charged to the first procedure/module (beware!).

The profiling support allows multiple blocks (even overlapping blocks)
to be profiled simultaneously.  The above output is produced for each
block separately.  CPU percentages are absolute;  even if only a small
section of the system is profiled, the percentages reflect total CPU
utilization.

This program is most useful when analyzing a narrow range of code at
very fine granularity.  A block resolution of 2 bytes will allow you
to have instruction-by-instruction analysis capabilities, but this obviously
takes lots of memory on the router to accomplish.

A reasonable alternative is to run one block at fairly coarse granularity
(say, 256 bytes) covering the whole system, then focus in on the trouble
spots.
