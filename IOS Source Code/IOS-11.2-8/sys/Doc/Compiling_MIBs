# $Id: Compiling_MIBs,v 3.2.60.2 1996/04/09 15:08:04 bstewart Exp $
#
# Compiling_MIBs
# August 1994, Jeffrey T. Johnson
#
# Copyright (c) 1994-1996 by cisco Systems, Inc.
# All rights reserved.
#------------------------------------------------------------------
# $Log: Compiling_MIBs,v $
# Revision 3.2.60.2  1996/04/09  15:08:04  bstewart
# CSCdi53981:  MIB compilation needs ugrade for modularized translation
# tables
# Branch: California_branch
#
# Revision 3.2.60.1  1996/04/08  20:29:02  bstewart
# CSCdi53981:  MIB compilation needs ugrade for modularized translation
# tables
# Branch: California_branch
#
# Revision 3.2  1995/11/17  08:33:03  hampton
# Remove old entries from the RCS header logs.
#
# Revision 3.1  1995/11/09  10:48:48  shaker
# Bump version numbers from 2.x to 3.x.
#
# Revision 2.1  1995/06/07  19:59:18  hampton
# Bump version numbers from 1.x to 2.x.
#
#------------------------------------------------------------------
# $Endlog$
#

This doucment is now obsolete.  Please refer to

    http://wwwin-eng.cisco.com/Eng/IOS/IOS_Internals/ios_pg/umib.fm.html

for MIB development, implementation, and testing notes, and

    http://wwwin-eng.cisco.com/Eng/Ed/Docs/IOS_TechNotes/mibnote.fm.html

for extensive MIB syntax correctness testing notes

The following information provides edits to the document referenced by
the first URL above.  This information is new for 11.2 and has not
been incorporated into the above reference documents.  When this
information is incorporated, this text will be removed.

There are several changes to the way mibs are compiled
1) sys/makemibs can now consist entirely of implicit rules.
2) mibcomp switches can now be specified in a separate config file.  this
   reduces the complexity of sys/makemibs, and ensures that changes to a
   mib's mibcomp options will result in the regeneration of that mib's files.
3) mibcomp.csh replace with mibcomp.perl.  runs *much* faster, and is much
   easier to update when a new SNMP Research release is deployed.
4) and additional perl script, mibdep.perl, for computing mib makefile
   dependancies
5) the new scripts eliminate the need for miblib.lex, another slow,
   error-prone utility currently in use.
6) new sys/makefile rule to cause user-modifiable code to be generated
   (no longer generated by default).


The following text completely replaces the sections entitled
"Establish a New MIB" and "Compile a MIB"


Establish a New MIB

To establish a new MIB, follow these steps. These steps use the sample
MIB BOOJUM-MIB.my.

Step 1 Create a development tree. 

Step 2 Do a make depend[encies] from the sys directory. This generates
code for all previously defined MIBs.

Step 3 Determine your parameters. 

As an example of a typical case, assume you are implementing all the
objects contained in BOOJUM-MIB.my . This MIB has a top-level
identifier of boojumObjects . Place its generated code in the
directory sys/boojum in the files sr_boojummib*.c and
sr_boojummib*.h. In this case, you need to checkout the sys/MIBS
directory from clearcase, place the file BOOJUM-MIB.my into the
sys/MIBS directory and then do a cleartool mkelem to tell clearcase
about it.  Note that throughout this example, before you do a
cleartool mkelem you must have the parent directory checked out in
your clearcase view.

Step 4 Create a MIB compiler configuration file

Each invocation of the MIB compiler should be controlled via a
configuration file.  Continuing the example, you would create the file
sys/boojum/sr_boojummib.cfg which contains the following:
	-group boojumObjects

In addition, you should add any other options that you want to be passed
to mibcomp.perl when the MIB is compiled.

After creating the file, make sure to do a cleartool mkelem to tell
clearcase about it.

Step 5 Update the sys/makemibs file to add the dependency for the new MIB. 

Invocation of the MIB compiler is specified in the file sys/makemibs
using an implicit makefile rule.  Continuing the example, you would
add the following line to sys/makemibs:

     ../boojum/sr_boojummib.stamp: ../BOOJUM-MIB.def 


Step 6 Generate user-modifiable source files

Files produced by the MIB Compiler fall into two categories,
non-modifiable and user-modifiable.  Most engineers are only concerned
with the former, which are generated during the make depend process.
When implementing a MIB for the first time, however, it is necessary
to produce the user-modifiable files.  This is done explicitly through
the "%.code" makefile rule.  Continuing the example, you would issue
the following command from the sys directory:
	make boojum/sr_boojummib.code

This will cause the mib compiler to generate both non-modifiable and
user-modifiable files.  The following non-modifiable files are
generated:
	sys/boojum/sr_boojummibdefs.h
	sys/boojum/sr_boojummibpart.h
	sys/boojum/sr_boojummibsupp.h
	sys/boojum/sr_boojummibtype.h
	sys/boojum/sr_boojummiboid.c
	sys/boojum/sr_boojummib.stamp

The following user-modifiable files are generated if they do not
already exist:
	sys/boojum/sr_boojummib.c
	sys/boojum/sr_boojummib.h

The following user-modifiable file is generate if the -userpart switch
was specified and the file does not already exist:
	sys/boojum/sr_boojummibuser.h

The following user-modifiable file is generate if the -snmpmibh switch
was specified and the file does not already exist:
	sys/boojum/sr_boojummib-mib.h

Step 7 Add your user-modifiable files to the clearcase repository. 

The previous step generates two to four user-modifiable files,
provided that they do not already exist.  The MIB compiler does not
overwrite these files if they exist because they are modified as a
result of implementing the MIB. Because they are "living" source
files, you should make them elements in the clearcase repository.

The other six files should never be modified and therefore should not
be placed under clearcase control.

Step 8 Implement the MIB by adding code to your parameter files. 

In the sample MIB, these are the sys/boojum/sr_boojummib.c and
sys/boojum/sr_boojummib.h files. You must add code to
sys/boojum/sr_boojummib.c, specificially to the system-dependent
method routines. You do not have to add code to
sys/boojum/sr_boojummib.h.

If a sys/boojum/sr_boojummibuser.h file was generated, then the
appropriate macros should be defined in that file to cause the
user-supplied fields to appear in the various structures.

If a sys/boojum/sr_boojummib-mib.h file was generated, then it should
be modified to remove all but the most essential OID to identifier
translation entries, especially since these entries consume valuable
code space with very little benefit.  At a minimum, the following
entries should be removed:
	Leaf object entries
	Table entries
	Notification entries unless explicitly referenced by the code
	Compliance and Conformance entries

As a result, typicially only the following entries remain:
	Top-level group entries
	Entry entries

Step 9 Add .o file rules to the appropriate makefile so that the
sr_boojummib.o and sr_boojummiboid.o files are placed in the proper
subsystems.

Step 10 Build the system and test the code. 

Step 11 Commit the code. 

Make sure you commit the MIB file in sys/MIBS , the makemibs file, the
boojum/sr_boojummib.cfg configuration file, the boojum/sr_boojummib.c
and boojum/sr_boojummib.h files, and if applicable, the
boojum/sr_boojummibuser.h and sr_boojummib-mib.h files.


Compile a MIB

To compile a MIB, use the sys/scripts/mibcomp.perl script, also
referred to as mibcomp or the MIB compiler.

Before you compile a MIB, you must determine the following: 

     Which MIB or MIBs to Compile 

     Which Groups to Compile 

     Where to Place Files Generated by the MIB Compiler 


Which MIB or MIBs to Compile

Generally, you compile only one MIB, the MIB you have implemented. The
MIB filename must consist of the ASN.1 module name of the MIB followed
by a .my extension. The MIB file must be in the sys/MIBS directory of
your development tree.

If you have two closely related MIBs, you can compile them together,
producing code that implements both MIBs. In particular, if you are
implementing a MIB that contains a table that uses the SNMPv2 AUGMENTS
keyword, you must compile your MIB together with the MIB that contains
the table being augmented.


Which Groups to Compile

MIBs generally contain a top-level ASN.1 identifier, followed by one
or more group identifiers, with individual objects being defined on a
per-group basis. In some MIBs, individual objects are defined directly
beneath the top-level identifier. In most cases, you want to implement
every object specified in the MIB. You indicate this by passing the
top-level identifier to the MIB compiler.

There are two exceptions. The first is that if you cannot implement
any of the objects in a group, you can specify only those groups with
objects you can implement. The second exception is that if the MIB
contains groups that must be implemented in separate subsystems in the
Cisco code base, you should invoke the MIB compiler separately for
each subsystem.


Where to Place Files Generated by the MIB Compiler

The MIB compiler generates up to nine C source files. You must choose
a directory into which the MIB compiler should place them. Whenever
possible, especially for straightforward MIBs, such as protocol MIBs,
place the files in the subsystem that corresponds to the protocol. For
less straightforward cases, such as media-specific MIBs where an
associated media-specific directory does not exist, you might need to
place the generated files into the sys/snmp directory.  It is also
acceptable to create a new directory to hold a MIB implementation.

All the files generated by the MIB compiler have a generic form of
sr_{id}*.c and sr_{id}*.h , where you specify a string for id . Choose a
string that is descriptive, but yet as few characters as possible in
order to keep the filenames as short as possible. The id is used in
the code as part of some function names, so it must consist entirely
of legal C identifier characters, preferably only letters. It is
helpful to include the string "mib" at the end of the id.


Makefile Rules for Compiling MIBs

All invocations of the MIB compiler are controlled by makefile
rules. All the rules that are specific to the MIB compiler are in
sys/makemibs, which is a makefile that contains three externally
available target rules and other internal rules. Although sys/makemibs
is a makefile, you should never explicitly execute the make
command. Instead, invoke it from sys/makefile when you perform a
make dependancies or a make *.code. You do this because the files that
sys/makemibs generates must be present when the dependencies rule
attempts to create the .D.* files that it uses to build the file
sys/dependancies. If the files have not been generated, erroneous
dependencies are calculated for any existing files that reference the
files to be created.

The following are the MIB dependencies rules in sys/makefile : 

@$(MAKE) $(MAKEFLAG-J) -C obj-68-c7000 -f ../makemibs \
	--no-print-directory depend
@$(MAKE) $(MAKEFLAG-J) -C obj-68-c7000 -f ../makemibs \
	--no-print-directory mibfiles

The depend rule in sys/makemibs generates a .D.* file for each *.my
file in the sys/MIBS directory. These files contain the dependencies
for creating a .def file from the associated .my file. When all the
.D.* files have been created, they are combined into a single
sys/mibdependencies file.

The mibfiles rule in sys/makemibs generates all the MIB source files. 

In addition to the above two rules, there is a third rule in
sys/makefile that causes an associated rule in sys/makemibs to be
processed:

%.code:
        @$(MAKE) $(MAKEFLAG-J) -C obj-68-c7000 -f ../makemibs \
                                                --no-print-directory $@

This causes the MIB compiler to generate user-modifiable source code.
This is typicially only done when a new MIB is being implemented.

Invoke the MIB Compiler 

To invoke the MIB compiler, use the sys/scripts/mibcomp.perl script,
also referred to as mibcomp or the MIB compiler.  This script has the
following syntax. Table B-1 explains the options. All builds are
performed in the various sys/obj* directories. Therefore, any path
names that appear in makefiles must take this into consideration.

	mibcomp.perl {options} {mibs}

Table B-1 : MIB Compiler Script Options 

Option		Description
-f name		Specifies the name of a mibcomp configuration file.

-codegen	Indicates that in addition to the non-modifiable source files
		usually generate by mibcomp, that user-modifiable files should
		also be generated.

-postmosy name	Specifies the name of the postmosy program

-group name	Specifies the group in the MIB to compile. You can specify
		multiple -group options. Each option can list only one
		group. 

-debug		Enables trivial debugging output

-cache		Enables the -cache switch in postmosy.  This causes trivial
		caching to be generated in the system independent method
		routines.

-row_status	Enables the -row_status switch in postmosy.  This causes
		code to be generated which implements the RowStatus
		TEXTUAL-CONVENTION

-userpart	Enables the -userpart switch in postmosy.  This causes a macro
		invocation to be placed in each structure in the sr_{id}type.h
		file.  Used in conjunction with -codegen, this causes a
		sr_{id}user.h file to be generated.  By defining macros in
		this file, a user can cause additional fields to be placed
		in the structures automaticially generated by postmosy.

-snmpmibh	Enables the -snmpmibh switch in postmosy.  Used in conjuction
		with -codegen, this causes a sr_{id}-mib.h file to be generated
		which contains OID to textual identifier mappings.

mibs		MIB definitions to be compiled.

The following switches are currently provided for backwards compatability
with the previous mibcomp scripts.  They will eventually be phased out:

-g group	Deprecated version of -group

-s stampfile	Specifies the name of the stamp output file. This file defines
		the path to the directory where the MIB compile will place its
		output. It also defines the actual naming convention for the
		output files.  Use of this switch is deprecated in favor of
		the -f switch

What the MIB Compiler Does

The mibcomp.perl MIB compiler script generates C source code files and
header files for the MIB. The script is simply a wrapper around the
postmosy program, which is provided by SNMP Research.

Input to mibcomp.perl is MIB definition files with names in the format
*.def.  These files are produced from the initial *.my MIB files by
the mosy program, also supplied by SNMP Research.

mibcomp.perl then passes its input to postmosy, which processes the
*.def files and produces C code suitable for building the agent code
required to instrument the MIB. For more information about the mosy and
postmosy programs, see the documentation available from SNMP Research.


Output from the MIB Compiler

The MIB compiler generates up to ten files. The files are named
according to the definition in the -f file option you provided to
the mibcomp.perl MIB compiler script (or the obsolete -s stampfile
option).

The MIB compiler always generates the following files. These filenames
assume that you specified a -f option in the format
../my_directory/sr_idmib.cfg when you invoke the mibcomp.perl script.

	../my_directory/sr_{id}miboid.c 

	../my_directory/sr_{id}mibdefs.h 

	../my_directory/sr_{id}mibpart.h 

	../my_directory/sr_{id}mibsupp.h 

	../my_directory/sr_{id}mibtype.h 

	../my_directory/sr_{id}.stamp

If invoked with the -codegen switch, the MIB compiler generates the
following two files if they do not already exist:

	../my_directory/sr_{id}mib.c 

	../my_directory/sr_{id}mib.h 

If invoked with the -codegen and -userpart switchs, the MIB compiler
generates the following file if it does not already exist:

	../my_directory/sr_{id}user.h

If invoked with the -codegen and -snmpmibh switchs, the MIB compiler
generates the following file if it does not already exist:

	../my_directory/sr_{id}-mib.h


Compile a MIB: Examples

This section provides some examples of compiling a MIB.  Note that
while these examples show the mibcomp.perl script being invoked
directly, typicially this is done via a makefile.

DS1 MIB

The DS1 MIB illustrates a case of compiling a simple MIB. This MIB is
specified in RFC 1406. Its ASN.1 module name is RFC1406-MIB. Hence,
when you extract the contents of the MIB from the RFC, you place them
in the file sys/MIBS/RFC1406-MIB.my . You then run this file through
mosy to produce sys/MIBS/RFC1406-MIB.def . This MIB contains the
following top-level identifier:

ds1 OBJECT IDENTIFIER ::= { transmission 18 }


Cisco implements objects from every group. Therefore, you can specify
ds1 as the only group for which code is to be generated. All the Cisco
DS1 code is in the sys/hes subsystem, and ds1mib is a reasonable
identifier to assign the generated code.  Hence, to compile the DS1
MIB, you would create a configuration file sys/hes/sr_ds1mib.cfg
containing the following:

-group ds1

You would then invoke mibcomp.perl as follows:

mibcomp.perl -f ../hes/sr_ds1mib.cfg `mibreq.perl ../MIBS/RFC1406-MIB.def`


MIB-II

MIB-II, defined in RFC 1213, illustrates a special case. The ASN.1
module name of the MIB is RFC1213-MIB. Hence, when you extract the
contents of the MIB from the RFC, you place them in the file
sys/MIBS/RFC1213-MIB.my . You then run this file through mosy to
produce sys/MIBS/RFC1213-MIB.def . MIB-II is a special case because,
although it contains the top-level identifier mib-2 , it also contains
the following groups: system , interfaces , at , ip , icmp , tcp , udp
, egp , and snmp . Because the Cisco IP code is not in the same
directory as the Cisco TCP or Cisco SNMP code, you cannot compile all
the groups at once.

We have decided to invoke the MIB compiler individually for each
group. To do this, we create three distinct configuration files:

sys/ip/sr_ipmib2.cfg contains "-group ip"
sys/ip/sr_icmpmib2.cfg contains "-group icmp"
sys/snmp/sr_snmpmib2.cfg contains "-group snmp"

We then invoke mibcomp.perl three times with the following commands,
once for the IP portion, once for the ICMP portion, and a third time
for the SNMP portion:

mibcomp.perl -f ../ip/sr_ipmib2.cfg `mibreq.perl ../MIBS/RFC1213-MIB.def`
mibcomp.perl -f ../ip/sr_icmpmib2.cfg `mibreq.perl ../MIBS/RFC1213-MIB.def`
mibcomp.perl -f ../snmp/sr_snmpmib2.cfg `mibreq.perl ../MIBS/RFC1213-MIB.def`


Because the IP and ICMP code is in the same directory--- sys/ip ---you
could compile these two groups together with a configuration file and command similar to the
following. However, if you are going to compile some groups
separately, it is cleaner to compile all the groups separately.

sys/ip/sr_ipicmpmib.cfg contains "-group ip -group icmp"
mibcomp.perl -f ../ip/sr_ipicmpmib2.cfg `mibreq.perl ../MIBS/RFC1213-MIB.def`


SNMPv2 MIB and SNMPv2 Party MIB

RFC 1445 defines the SNMPv2 Party MIB, and RFC 1450 defines the SNMPv2
MIB. Based on their ASN.1 module names, these MIBs have been extracted
into the files sys/MIBS/SNMPv2-PARTY-MIB.my and
sys/MIBS/SNMPv2-MIB.my.  The SNMPv2-MIB.my file contains the following
definition:

snmpTrapEntry OBJECT-TYPE
SYNTAX     SnmpTrapEntry
MAX-ACCESS not-accessible
STATUS     current
DESCRIPTION
    "An entry which keeps track of how many traps have
    been sent to a particular SNMPv2 entity."
AUGMENTS   { partyEntry }
::= { snmpTrapTable 1 }


Since the SNMPv2-MIB has a table that AUGMENTS a table in the
SNMPv2-PARTY-MIB, these two MIBs must be compiled together. SNMPv2-MIB
has a top-level identifier of snmpMIB and SNMPv2-PARTY-MIB has a
top-level identifier of partyMIB, so you would create the following configuration file:

sys/snmp/sr_snmpv2mib.cfg contains "-group snmpMIB -group partyMIB"

You would then invoke mibcomp.perl as follows:

mibcomp.perl -f ../snmp/sr_snmpv2mib.cfg \
`mibreq.perl ../MIBS/SNMPv2-MIB.def ../MIBS/SNMPv2-PARTY-MIB.def`

Note that since SNMPv2-MIB imports the SNMPv2-PARTY-MIB, it really is
not necessary to specify SNMPv2-PARTY-MIB on the mibreq.perl command
line since mibreq.perl will determine that it is required.  However
explicitly specifying both MIBs makes it clear that you are generating
code for definitions in both MIBs.
