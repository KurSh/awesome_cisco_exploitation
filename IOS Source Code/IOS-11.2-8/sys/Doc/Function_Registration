# $Id: Function_Registration,v 3.2.20.1 1996/03/26 18:29:03 gglick Exp $


	  Title: Function Registration
	   Date: 1-July-93
	Version: 2.1

Copyright (c) 1993-1996 by cisco Systems, Inc.

This document describes the function registration mechanism.

Function registration is a generic mechanism to permit subsystems to install
or register callback functions with the kernel or with other subsystems
providing a particular service.

Registries and Services
=======================

A registry is a collection of related services.  We currently have the
following well known registries:

	     Registry Name	Nature of services
	     =====================================
		REG_SYS  	Operating System
		REG_IP		IP services
		REG_MEDIA       Encapsulation functions	
		REG_FAST        Fast Switching

The well known registries are created in registry.c during system
initialization.  There is support for creating private registries for use
within closely related software subsystems.

A service is a collection of one or more C functions registered by various
subsystems.  Functions for a specific service will have the same calling and
return conventions.  The actual invocation of a service is referred to as a
service point.

For example, the REG_SYS registry supports a service (SERVICE_RAW_ENQUEUE)
that allows a driver subsystem to enqueue a datagram destined for the router
onto a particular protocol input queue.  When a protocol subsystem
initializes itself, one of the functions it registers is the protocol
specific enqueueing function.  If that protocol is not present in the
system, nothing is registered, and a default action occurs when the service
is invoked with a datagram belonging to that protocol (in this case the
datagram is quietly discarded).


Types of Services
=================

There are four types of services: case, value, list, and stub services.  The
names refer to the way in which the registered functions are invoked.

Creating a Service
-------------------

The function service_create() creates a service data structure of the
specified type.  It must be called before any functions can be registered
with that service.

The registry code must be specified. These are currently defined in
h/registry.h

The service code must be specified, as well as the type of service (case,
value, list, or stub).

A maximum index number may be specified.  For list and stub services, this
parameter is ignored.  For case and value services, a more efficient jump
table structure is created of the specified size.  If a zero argument is
specified, items in the case registry are put into a linked list.  Overflow
items (those items whose index exceeds the maximum index number) are not
lost; they are instead put into a linked list.

You must specified the number of arguments required by a registered
function.  Every function in a service must have the same number, type, and
order of arguments.  This argument is required because the functions that
invoke a particular service (e.g. service_case() or registry_list()) take a
variable number of arguments and typically typecheck only the first one or
two of their arguments.

You must also specify a name string describing the service.  This string is
used in the EXEC "show registry" output.

Case Service
-------------

A case service is a runtime replacement for a C switch statement.

A function is added with registry_add_case().  Arguments are the registry
code, the service code, an index value, a pointer to the function, and a
pointer to a descriptive string, usually the function name.  A default
function is added with registry_add_default(). The index value is omitted in
this case.  For example,

	registry_add_case(REG_SYS, SERVICE_RAW_ENQUEUE, LINK_DECNET,
			  decnet_enqueue, "decnet_enqueue");

	registry_add_default(REG_SYS, SERVICE_RAW_ENQUEUE,
			  netinput_enqueue, "netinput_enqueue");

The index is used by the caller of the service point to select the desired
function.  Typically an index value is a small number such as a protocol
linktype (e.g.  LINK_IP) or a protocol indentifier (e.g. TYPE_IP), although
any 32 bit quantity may be used as an index.

It is an error for an unknown index to be used if a default case has
not been added via registry_add_default().  It is therefore recommended
that all case services have an explicit default.

A case service is invoked by registry_case() if no return value is desired.
Otherwise registry_retval() may be used with the appropriate type casting of
the return value. If the index does not match any of the registered
functions, the default function, if any, is executed.  For example:

      registry_case(REG_SYS, SERVICE_RAW_ENQUEUE, pak->linktype);

      pak = (paktype *) registry_retval(REG_SYS, SERVICE_OUTPUT_COMPRESS, pak);


Value Service
-------------

A value service is a lookup table of 32-bit values.  It is used for
applications such as converting a protocol type code into a LINK_xxx code
and vice-versa.

A function is added with registry_add_value().  Arguments are the registry
code, the service code, an index, the value, and a pointer to a descriptive
string.  A default value is added with registry_add_value_default(). The
index is omitted in this case.  For example,

	registry_add_value(REG_MEDIA, MEDIA_LINK_TO_TYPE, LINK_IP,
	 		   0x800, "ip");

	registry_add_default_value(REG_MEDIA, MEDIA_LINK_TO_TYPE,
	 		   0L, "default");

List Service
------------

A list service is the runtime replacement for a list of C functions executed
sequentially.

A function is added with registry_add_list().  Arguments are the registry
code, the service code, a pointer to the function, and a pointer to a
descriptive string, usually the function name.

	registry_add_list(REG_SYS, SERVICE_ROUTE_ADJUST,
			  ip_route_adjust, "ip_route_adjust");

A list service point is normally invoked with registry_list() as in the
following example.

	registry_list(REG_SYS, SERVICE_ROUTE_ADJUST, idb);

For more complex actions, such as executing only part of a list, the
registry_loop() function may be used.  In this instance the registered
functions return TRUE or FALSE depending if a "match" of some sort occurs.
When a registered function returns TRUE, processing of the list terminates
and registry_loop() returns TRUE.  If the entire list was executed without a
match, then registry_loop() would return FALSE.

	if (registry_loop(REG_SYS, SERVICE_IS_IT_YOURS, arg1, &value)) {
	    .....do something....
	} else ....do something else...


Stub Service
------------
A stub service takes zero or one functions (like a list service)
and may return a value (like a case service).

My feeling is that in most circumstances registry_stub() is the wrong
construct to use.  By reworking the software, the more general
registry_case() mechanism could be used instead.  Towards the end of the
modularization project we may want to figure out how to eliminate
registry_stub() if that is possible or desirable.

A function is added with registry_add_stub() like so:

	registry_add_stub(REG_SYS, SERVICE_BRIDGE_ENQUEUE,
			  bridge_enqueue, "bridge_enqueue");

A stub registry is invoked with the registry_stub() function like so.

	value = registry_stub(REG_SYS, SERVICE_BRIDGE_ENQUEUE, pak);

Service Interfaces
------------------
The above functions for adding functions to services are not type checked.
This creates a serious hazard for robust programming.  To prevent the
accidental abuse of the typing system at this point, a strongly typed
interface should be created where each service is defined.  

This is done by creating two or more static inline functions which invoke
the appropriate registry functions:

typedef void (*service_ip_enqueue_type) (iptype *ip);

static inline void reg_add_ip_enqueue (int protocol, service_ip_enqueue_type
				   callback, char *name)
{
    registry_add_case(REG_IP, SERVICE_IP_ENQUEUE, protocol, callback,
		      name); 
}

static inline void reg_add_default_ip_enqueue (service_ip_enqueue_type callback,
					   char *name)
{
    registry_add_default(REG_IP, SERVICE_IP_ENQUEUE, callback, name); 
}

static inline void reg_invoke_ip_enqueue (int protocol, iptype *ip)
{
    registry_case(REG_IP, SERVICE_IP_ENQUEUE, protocol, ip);
}

This limits the exposure of the type checking system to these inlines.
Normal process level code should ALWAYS use these interfaces and NEVER
invoke the registry functions directly.

Automatic Registry Creation
---------------------------
Three new types of files have been created: .reg, .regh, .regc.
The .regh and .regc files are automatically created from the .reg
file of the same name.
.regh files contain the definition of the service points and the
service interface functions.
.regc files contain a single function to create all of the services
in the registry.

The .regh is included in the .h file of the same name.
The .regc is included in the .c file that creates the registry.

Note:
  When including a registry file, the file names must use the following
  syntax:

#include "../<dir>/<function>_registry.reg{c|h}"

  The makefile rules generated will not be able to create the .regc
  and .regh files if the relative path "../<dir>/" is omitted.

The .reg file is formatted using the following rules:
Each item must begin a line of its own.
Lines may be continued by ending with a \
Comment lines begin with #

The registry to be created is named on the BEGIN REGISTRY statement.
 
 BEGIN REGISTRY <name of registry> [<registry symbol>]

 <name of registry> is expected to be upper case.

 <registry symbol> is an optional ulong variable that can be used to
create fully private registries.  The variable is expected to be set
via a call to registry_create().

The definition is terminated by an END REGISTRY statement.

Each service point is defined with its attributes between a
DEFINE and an END statement.
 
 DEFINE <name of service point>

 <name of service point> is expected to be lower case.

Within the DEFINE statement, items are positional.
The first item is a comment. It is required. It is specified
in standard C format: /* <comment> */. It will be reformatted
to fit the output lines unless it is written in comment bar format:
/*
 * comment
 */
Comment bars will be copied as is.

The next item is optional. It is a DATA block. All text between
DATA and END DATA will be copied and placed between the comment
bar and the function declaration. This is used to include 
additional types that are required by the function definition.

The next item is the type of service.
It must be LIST, LOOP, STUB, CASE, RETVAL, or VALUE.

Next the type declaration of the value returned by the called
function is specified.
It must be void for LIST, and CASE services.
It must be boolean for a LOOP service.
It must be ulong for a VALUE service.

For a VALUE service, no additional parameters may be specified.
All other services specify the prototype list for the called
function. If the service requires no parameters, a - is used.

The additional two parameters are only for CASE and RETVAL services.
The first is the number of cases for the case registry.
The second is the type for the variable specifying the case--the type
cannot be an enumeration specification ("enum <type> <variable>"), as
the preprocessor only expects two tokens; instead use a typedef
for the enumeration or an integer declaration.

A sample input file would look like:

BEGIN REGISTRY SAMPLE

DEFINE sample_service1
/* A list service */
       LIST
       void
       -
END

DEFINE sample_service2
/*
 * A LOOP service that requires a paktype definition
 */
DATA
 typedef struct paktypx_ {
   int a;
   int b;
   } paktypx;
END DATA
       LOOP
       boolean
       paktype *pak, int delta
END

DEFINE sample_service3
/* A stub service */
       STUB
       void
       int count, char *name
END

DEFINE sample_service4
/* A case service */
       CASE
       void
       boolean onoff, int no_packets
       MAX_CASES
       ushort protocol
END

DEFINE sample_service5
/* A retval service */
       RETVAL
       char *
       int errors, int drops, int collisions, int transmits
       MAX_CASES
       ulong media
END

DEFINE sample_service6
/* A value service */
       VALUE
       ulong
END

END REGISTRY
