# $Id: InterProcess_Communication,v 3.1 1996/03/19 09:56:37 tli Exp $

	  Title: Interprocess Communication
	   Date: 18-March-1996
	Version: 1.0
	 Author: Jim Hayes

Copyright (c) 1996 by cisco Systems, Inc.

1.0 Introduction

This document discusses the application programming interface for an
interprocessor communication system initially planned for VIP/Viper and
used in other products as well. The IPC system supports reliable message
passing and a remote procedure call interface with well defined blocking
and non-blocking behaviour. In addition, a simple resource location system
will provide a "rendezvous" mechanism (using named ports) allowing
processes easy access to resources without complex addressing.

1.1	Feature Summary

o	Runs over multiple transports (CX/CYBus, TCP/IP, ATM, etc.)

o	Provides a reliable and sequenced message stream.

o	Supports fragmentation of large messages, up to 18,000 bytes.
	(currently defined by the largest packet the router can transmit.)

o	Supports two way "remote procedure call" messages, as well as
	one-way message delivery. 

o	Supports reliable and sequenced multicasting.

o	Has limited support for handling messages at high priority
	interrupt level, for tightly coupled systems  
	(currently only CX and CYBus systems.)

1.2	The Basics

1.2.1	Communication Endpoints

Before a task may send or receive messages, it must create and locate
endpoints for the communi- cation. These endpoints are called ports.

A port is registered using a descriptive English name. Once registered, the
port name becomes visible to potential senders.

Before a task may send messages to a port, it must locate the destination
port using the port's name.

In order to simplify the API (and the processing demands of using ASCII
strings as names) the IPC system maps ports into 32-bit identifiers, so
it's easy for tasks to keep track of their own ports and the ports they're
sending to. These 32-bit port identifiers are requested from the IPC system
by name. There are no "well known ports" available to users, so the
resource location system must always be used to create ports and allow
tasks to rendezvous.

Some port identifiers may also map to more than one destination port. These
so called "multicast ports" allow multiple tasks to subscribe to messages
sent to a single port.

1.2.2	Sending Messages

As described above, tasks communicate with one another by sending messages
to "ports."

Message buffers are obtained from the IPC system, or may be provided by the
user. In addition, packets may be handed to the IPC system for forwarding
to other tasks.

The sending process may specify a blocking strategy for the IPC to use on a
message-by-message basis. For datagram style messages, the IPC call will
block until the message is queued at the des- tination port, or may return
immediately and communicate success or failure with an asynchro- nous
notification. For RPC style messages, the call will block until a reply is
received or times out.

In addition, IPC messages carry a "type" field that may be used by tasks to
further classify mes- sages sent to a port. The receiver may use this field
to quickly demultiplex incoming messages.

1.2.3	Receiving Messages

Processes may receive unsolicited IPC messages in a couple ways:

o	by blocking on a receive queue using the standard IOS queue
	blocking convention. 

o	by registering a routine to be called at process level when a
	message arrives. (via a "callback" routine.)

NOTE: In a tightly coupled system (such as the CX/CYbus case with VIP)
where routing and forwarding cache performance is critical, the IPC may
handle simple mes- sages at interrupt level, using a call-back mechanism on
received packets.

RPC style messages always block the sender until a reply is received or
times out.

To receive any IPC data, a task must first name and register a port. Any
receive characteristics such as async callback routines or options may be
set during this time.

1.3	API

1.3.1	Types and definitions

1.3.1.1		Basic Types

typedef unsigned int ipc_port_id;

typedef unsigned short ipc_sequence;

typedef unsigned short ipc_message_type;

typedef unsigned short ipc_size;

typedef unsigned short ipc_flags;

1.3.1.2		Message data structure used by API

To access the header fields of an IPC message (defined in 1.3.1.3) use the
header pointer.

To access the data portion of a message, use the data pointer.

typedef struct ipc_message {
	{...housekeeping fields used by server...};
	ipc_message_header *header;
	void *data;
} ipc_message;



1.3.1.3		Message header "Wire Format"

Users should never need to manipulate this directly.

typedef struct ipc_message_header {
	ipc_port_id dest_port;
	ipc_port_id source_port;
	ipc_sequence sequence;
	ipc_message_type type;
	ipc_size size;
	ipc_flags flags;
} ipc_message_header;





1.3.2	Message Utilities

ipc_message *ipc_get_message(ipc_size size,
			     ipc_port_id dest_port,
			     ipc_message_type type);

Create a message buffer of the appropriate size and return a pointer to the
message struc- ture, or NULL if a message could not be created. If you
don't know the destination port yet, use 0. Call ipc_set_destination() to
set the destination port when you know what it is going to be.

This call can be used from interrupt service routines.  This call does not
block.

----------------------------------------------------------------------
void ipc_return_message(ipc_message *);

Return the message buffer to the IPC message pool.

This call can be used from interrupt service routines.
This call does not block.

1.3.3	Finding and Registering Endpoints

ipc_error_code ipc_locate_port(ipc_name *name, ipc_port_id *port);

Convert an English name into a port number so processes may send data to
it. The returned port may or may not be on the local system.

Returns:

	IPC_OK			Success!
	IPC_NO_MEMORY		Could not get needed resources.
	IPC_NO_SUCH_PORT	The specified port name does not exist.

This call blocks until the name lookup completes.
This call cannot be used from interrupt service routines.

----------------------------------------------------------------------

ipc_error_code ipc_create_named_port(ipc_name *name, ipc_port_id *port);

Create a local endpoint to receive traffic, assign an English name to it and return the 32-bit 
port identifier for use in future IPC calls. The name is copied, so there's no need to perma-
nently allocate it.

The naming convention is simple. If you intend on registering this port
globally, prefix the name with "hostname:". For a local name, use whatever
you want, as long as it is uniqe to all local users of the IPC. Names may
not be larger than IPC_PORT_NAME_MAX (cur- rently set to 64.) Sample port
names might look like this:

	VIP Slot 1:Logger

	VIP Slot 1:Config

	Echo Port

	TomServo:Logger

	b-lab-gw.cisco.com:Logger



NOTE: After this call, the new port is only visible to tasks running on the
local processor.  To make this port visible to all other entities in an IPC
cloud, use ipc_register_port() defined below.



Returns:

	IPC_OK			Success!
	IPC_NO_MEMORY		Could not get needed resources.
	IPC_PORT_IN_USE		The specified port name is already in use.


This call returns immediately and does not block.
This call cannot be used from interrupt service routines.

----------------------------------------------------------------------

ipc_error_code ipc_register_port(ipc_port_id port);

Register this port in the global IPC namespace making it visible to other
processors. Ports are only visible to local tasks until this call is
executed.



Returns:
	IPC_OK		Success!
	IPC_NO_MEMORY		Could not get needed resources.
	IPC_PORT_IN_USE		The specified port name is already in use.


This call blocks until the name is registered with the master IPC server.
This call cannot be used from interrupt service routines.

----------------------------------------------------------------------

ipc_error_code ipc_create_multicast_port(char *name, ipc_port_id *port);

Create a "multicast" port shared among all members registered in the IPC
cloud. This rou- tine returns the port number assigned to the new name. Use
this port to send a message to all processes subscribing to this port. (See
ipc_subscribe_multicast_port() below.)  This port is no different than any
other port, except that it cannot receive data. Any data sent to it is
automatically "exploded" out to the subscribers.

Returns:

	IPC_OK			Success!
	IPC_PORT_IN_USE		The specified port name is already in use.

This call blocks until the name is registered with the master IPC server.
This call cannot be used from interrupt service routines.

----------------------------------------------------------------------

ipc_error_code ipc_subscribe_multicast_port(ipc_port_id multicast_port, 
					    ipc_port_id new_subscriber_port);

Add a new "subscriber" to a multicast group. Multicasted messages will now
arrive on the new_subscriber_port.

Returns:

	IPC_OK			Success!
	IPC_NO_SUCH_PORT	The specified port does not exist.


This call blocks until the new port is registered with the master IPC server.
This call cannot be used from interrupt service routines.

----------------------------------------------------------------------

ipc_error_code ipc_unsubscribe_multicast_port(ipc_port_id multicast_port, 
					      ipc_port_id old_subscriber_port);

Unsubscribe a port from a multicast group.



Returns:

	IPC_OK			Success!
	IPC_NO_SUCH_PORT	The specified port does not exist in the group.



This call blocks until the new port is registered with the master IPC server.
This call cannot be used from interrupt service routines.

----------------------------------------------------------------------

ipc_error_code ipc_close_port(ipc_port_id port);

Stop receiving messages on this port, and unregister the name associated
with this port, locally and globally.



Returns:

	IPC_OK		Success!
	IPC_NO_SUCH_PORT		The specified port does not exist.



This call blocks until the new port is registered with the master IPC server.
This call cannot be used from interrupt service routines.

----------------------------------------------------------------------

ipc_error_code ipc_set_receive_callback(ipc_port_id port,
void *callback_context,
ipc_callback callback_routine);

Tell the IPC mechanism to send messages for the specified port to a
callback routine. This call back occurs at process level, from the IPC
Server process. The callback routine must have the following function
prototype:

calback_handler(ipc_message *message,
		void *context,
		ipc_error_code error_code);



When a new message arrives for the specified port, the callback routine is
called with the message, the context variable supplied by you above (can be
anything you want, like a pointer to your data structures, etc.) and the
IPC error code (if any) that the message may carry with it. The only error
code returned so far is IPC_OK. Your code is now responsi- ble for the
message. When you are finished with it, you must call ipc_return_message().



Returns:

	IPC_OK		Success!
	IPC_NO_SUCH_PORT		The specified port does not exist.



This call can be used from an interrupt service routine.
This call does not block.

----------------------------------------------------------------------

ipc_error_code ipc_set_receive_fast_callback(ipc_port_id port,
void *callback_context,
ipc_callback callback_routine);

CBUS only: Tell the IPC mechanism to send messages for the specified port
to a callback routine. This callback occurs AT INTERRUPT LEVEL from the
receive handler for CBus based IPC messages. Use with extreme caution. You
cannot call malloc() or free() use printf() or other such unsafe no-no's in
the IOS. Your code is now responsible for the message. When you are
finished with it, you must call ipc_return_message(). The callback routine
must have the following function prototype:

calback_handler(ipc_message *message,
		void *context,
		ipc_error_code error_code);



When a new message arrives for the specified port, the callback routine is
called with the message, the context variable supplied by you above (can be
anything you want, like a pointer to your data structures, etc.) and the
IPC error code (if any) that the message may carry with it. The only error
code returned so far is IPC_OK.

Returns:

	IPC_OK			Success!
	IPC_NO_SUCH_PORT	The specified port does not exist.

This call can be used from an interrupt service routine.
This call does not block.

----------------------------------------------------------------------

ipc_error_code ipc_set_receive_queue(ipc_port_id port,
queuetype *receive_queue);

Tell the IPC mechanism to put messages for this port on the supplied queue.

Returns:

	IPC_OK			Success!
	IPC_NO_SUCH_PORT	The specified port does not exist.





1.3.4	Sending IPC Messages

ipc_error_code ipc_send_message(ipc_message *message);

Send an IPC message to the destination port specified in the message
block. This assumes all delivery fields in the message block are filled in,
which is done for you in ipc_get_message()). You can "hand construct"
messages, but you better know what you're doing when you do.

Returns:

	IPC_OK		Success!
	IPC_TIMEOUT	After repeated attempts, message delivery failed.
	IPC_NO_MEMORY	The IPC couldn't fetch needed resources for this call.


This call cannot be used from interrupt level.  This call blocks until the
message successfully arrives at the far end, or times out.  This call
disposes of the original message upon completion.

----------------------------------------------------------------------

void ipc_send_message_async(ipc_message *message);
void *callback_context,
ipc_callback *routine);

Send an IPC message to the destination port specified in the message block,
and do not block. Instead call the provided "callback" routine to notify
the caller of delivery or non- delivery.

The callback routine must have the following function prototype:

calback_handler(ipc_message *message,
		void *context,
		ipc_error_code error_code);

When the message arrives at the destination port, the callback routine is
called with the original message you sent, the context variable supplied by
you above (can be anything you want, like a pointer to your data
structures, etc.) and the IPC error code explaining what happened. IPC_OK
means that the packet arrived safely. Any other code implies failure.  Your
code is now responsible for the original message. When you are finished
with it, you must call ipc_return_message().

Returns:

	Nothing

This call can be used from interrupt level.
This call does not block.
This call does not automatically dispose of the transmitted message.

----------------------------------------------------------------------

ipc_error_code ipc_send_opaque(void *message_data,
ipc_size message_size,
ipc_port_id dest_port,
ipc_message_type type);

Send an IPC message to the destination port, taking the message data from
the block of memory specified by the message_data pointer.

Returns:

	IPC_OK		Success!
	IPC_TIMEOUT	After repeated attempts, message delivery failed.
	IPC_NO_MEMORY	The IPC couldn't fetch needed resources for this call.

This call cannot be used from interrupt level.  This call blocks until the
message successfully arrives at the far end, or times out.

----------------------------------------------------------------------

ipc_error_code ipc_send_opaque_async(void *message_data,
ipc_size message_size,
ipc_port_id dest_port,
ipc_message_type type,
void *callback_context,
ipc_callback *routine);

Send an IPC message to the destination port, taking the message data from
the block of memory specified by the message_data pointer, and do not
block. Instead call the pro- vided "callback" routine to notify the caller
of delivery or non-delivery.

The callback routine must have the following function prototype:

calback_handler(ipc_message *message,
		void *context,
		ipc_error_code error_code);

When the message arrives at the destination port, the callback routine is
called with the message that was originally sent, the context variable
supplied by you above (can be any- thing you want, like a pointer to your
data structures, etc.) and the IPC error code explaining what
happened. IPC_OK means that the packet arrived safely. Any other code
implies failure. Your code is now responsible for the original
message. When you are finished with it, you must call ipc_return_message().

Returns:

	IPC_OK		Success!
	IPC_NO_MEMORY	The IPC couldn't fetch needed resources for this call.

This call can be used from interrupt level.
This call does not block.
This call does not automatically dispose of the transmitted message.

----------------------------------------------------------------------

ipc_error_code ipc_send_pak_async(paktype *pak, 
ipc_port_id dest_port,
ipc_type type,
void *callback_context,
ipc_callback *routine);

Send a system packet to the specified destination port and do not
block. Instead call the provided "callback" routine to notify the caller of
delivery or non-delivery. The IPC system attempts to send the packet
directly to the destination host, by slapping on an IPC message header and
transmitting.

The callback routine must have the following function prototype:

calback_handler(ipc_message *message,
		void *context,
		ipc_error_code error_code);

When the message arrives at the destination port, the callback routine is
called with the message that was originally sent, the context variable
supplied by you above (can be anything you want, like a pointer to your
data structures, etc.) and the IPC error code explaining what
happened. IPC_OK means that the packet arrived safely. Any other code
implies failure. Your code is now responsible for the original
message. When you are finished with it, you must call ipc_return_message().

Returns:

	IPC_OK		Success!
	IPC_NO_MEMORY	The IPC couldn't fetch needed resources for this call.

This call can be used from interrupt level.
This call does not block.
This call does not automatically dispose of the transmitted message.

----------------------------------------------------------------------

ipc_error_code ipc_send_segpak_async(segpaktype *segpak,
ipc_port_id dest_port,
ipc_type type,
void *callback_context,
ipc_callback *routine);

Send a segmented packet type to the specified destination port and do not
block. Instead call the provided "callback" routine to notify the caller of
delivery or non-delivery. The IPC system attempts to send the segmented
packet directly to the destination host, by slapping on an IPC message
header and starting DMA.

The callback routine must have the following function prototype:

calback_handler(ipc_message *message,
		void *context,
		ipc_error_code error_code);

When the message arrives at the destination port, the callback routine is
called with the message that was originally sent, the context variable
supplied by you above (can be anything you want, like a pointer to your
data structures, etc.) and the IPC error code explaining what
happened. IPC_OK means that the packet arrived safely. Any other code
implies failure. Your code is now responsible for the original
message. When you are finished with it, you must call ipc_return_message().

Returns:

	IPC_OK		Success!
	IPC_NO_MEMORY	The IPC couldn't fetch needed resources for this call.

This call can be used from interrupt level.
This call does not block.
This call does not automatically dispose of the transmitted message.

----------------------------------------------------------------------

ipc_message *ipc_send_rpc(ipc_message *message, ipc_flags flags, 
ipc_error_code &error);

Similar in nature to ipc_send_message. Send an RPC style message to the
destination port and block waiting for a reply. The reply will arrive as a
message buffer the return value of this call. The IPC_BLOCK flag is assumed
for this call. Upon success, the original mes- sage will be returned to the
IPC message pool. The reply message must be released manu- ally using
ipc_return_message().

Returns:

	IPC_OK		Success!
	IPC_TIMEOUT	After repeated attempts, message delivery failed.
	IPC_NO_MEMORY	The IPC couldn't fetch needed resources for this call.



This call cannot be used from interrupt level.  This call blocks until the
message successfully arrives at the far end, or times out.  This call
disposes of the original message upon completion.

----------------------------------------------------------------------

ipc_error_code ipc_send_rpc_reply(ipc_message *original_message,
ipc_message *reply_message);

Similar in nature to ipc_send_message. Send an RPC reply message to the
source of the original RPC query message. No need to fill in the
destination fields of the reply_message they will be copied from the
original RPC request message.



Returns:

	IPC_OK		Success!
	IPC_TIMEOUT	After repeated attempts, message delivery failed.
	IPC_NO_MEMORY	Couldn't get needed resources for this command.



This call cannot be used from interrupt level.  This call blocks until the
message successfully arrives at the far end, or times out.  This call
disposes of the original message and reply message upon completion.
