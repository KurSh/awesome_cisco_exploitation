# $Id: Introduction,v 3.1 1995/11/09 10:48:54 shaker Exp $

	  Title: Introduction to the Modular System
	   Date: 27-July-93
	Version: 1.0

Copyright (c) 1993-1995 by cisco Systems, Inc.


This file contains a high level explanation of the modulariy project's goals
and tactics.

Sections:
 - Philosophy: what we're trying to accomplish and why
 - Subsystems: the modular glops of software
 - Stub Files Considered Harmful: and you thought gotos were a no-no
 - Where Are We Today: there's a *lot* of software here...
 - Things We Haven't Done:  ...and we're still not done.
 - Interfaces: how to practice safe software

==========
Philosophy
==========

The cisco software development has historically used the "embedded system"
approach.  The software is typically monolithic, requiring that all
functions must be tested together before anything can be delivered to the
customer. This approach works well only for small amounts of software.

We no longer have a small system.  People can recite a long list of problems
that we are currently having with the embedded approach. This document
discusses a new approach, called the modular system.

The basic premise of the modular system approach is that we should be using
the classic technique of creating an operating system with application
programs.  This is the technique used by, for example, Microsoft (or Apple,
or IBM or DEC or...).  They build an operating system (DOS, Windows, NT,
etc.) that is shipped independent of the various word processing,
spreadsheet, or database applications which in turn are tested and shipped
independently.  The only requirement is that the applications play by the
same rules, i.e., use the operating system interfaces.

The tactics used in converting the system to a modular form were choosen to
get us to a workable system in a short amount of time.  The flow of control
through the system thus remains as before with only the interfaces between
portions of the system changing.

For our purposes we will define the "operating system" as the device and
protocol independent software that is common to all platforms.  Examples of
an "application" include protocols such as IP, DECnet, or AppleTalk as well
as platform specific device drivers.

==========
Subsystems
==========

The first order of business in converting to the modular approach is to
rearrange the software into sources specific to the operating system and
sources specific to particular applications.

At the gross level, this means reworking the existing directory structure.
The changes in this area have been relatively modest and straightforward.

At a finer level, this means moving code that is in the "wrong" source files
into the "right" source files, then setting up the necessary interfaces to
invoke that code in a running system.

A subsystem is defined as a "glop" of code that shares a common
initialization routine.  Subsystems are the applications we mentioned above.
The following are the names of various subsystems that currently exist in
the modular system.

        kernel apollo atalk bridge_t bridge_sr clns comm decnet frame
        ibm isdn iphost iprouting ipservices kernel lat llc2 mop
        novell ntp pad pakgen ppp snmp tn3270 vines wan x25 xns xremote
 
A subsystem binary file is an aggregation of the component .o files.  We
have abandoned the old library file approach.  As an example, for the apollo
subsystem the binary would be the file sub_apollo.o.  The various subsystems
that comprise a working router are then linked together to form one
executable image.

That image is then burned into flash, or ROM, or netbooted just as before.
When the image starts up, however, the initialization sequence is different.

Each subsystem includes a data structure called a subsystem header.  The
header contains a 64-bit "magic number" that allows the initializing system
to find the header data structures sitting in its data segment.  The header
also contains the name string of the subsystem, a pointer to the subsystem's
initialization routine, some version information, and a list of other
subsystems that must be initialized prior to the current subsystem.

The first thing the initialization code does is to scan the data segment for
all subsystem headers.  A list of subsystems is constructed, sorted by
dependency information.  An example of a dependency would be the xremote
subsystem's requirement that the iphost subsystem be initialized first.
After the sorted list is constructed, the initialization code then steps
through the list calling each subsystem's initialization routine.
The system then finishes coming up as before.

=============================
Stub Files Considered Harmful
=============================

Stub files are the old technique for simulating modularity.  The first use
of stub files was when the cisco software was first split into separate
router and communications server images in order to save on EPROM space.

If on a router image, the operating system called a function that was
specific to the communications server, that function would be replaced with
a "stub", a dummy version of that function.  These various dummy functions
or "stubs" where collected into files called stub files.  The number of stub
files grew as the amount of software and number of platforms increased.  As
of the Aries project there were 150 stub files and over 2000 stub functions.

Stub files permit all sorts of sloppy, non-modular programming.
It allows engineers to insert new functions anywhere in the system without
regard to the proper way the code should be structured.  If the new functions
are not appropriate to a particular platform, a stub file is created or
added to, instead of thought being given on how to do the job correctly.

For example, the generic buffer handling code in the operating system should
not need to know about a particular platform or protocol.  If new
functionality is required of that code, the proper thing is to alter the
generic code in a generic fashion to meet the new requirement.  The stub
file approach is to slap in a new function call and add a stub file entry.
This looks harmless enough for a small system and a few programmers.  After
many programmers and 2000 functions, the result is called spaghetti.

Subsystems eliminate the need for stub files.  In their place are a set of
formal interface techniques that handle the issue of what do when a function
is not required on a particular platform or configuration.  These interface
techniques, including function registration, are discussed below.

Subsystems allow us to enforce modular design practices.  When stub files
are eliminated we will be able to build a large number of images that are
subsets of our total software.  For example, we will be able to link an
operating system or kernel without any protocols or drivers.  It will do
little more than give you an EXEC prompt, let you configure the hostname, or
type a few show commands.  The win is when a misguided engineer attempts to,
say, call a PUP specific function from within the free memory manager.  The
next time a kernel-only image is built, it will refuse to link without the
PUP support.  There is no stub file to hide in, so the lazy way out just
won't work.  Instead the engineer will have to think carefully about how to
implement that new function in a way that obeys the new rules.

We currently ensure that at least the code compiles in a repository by
running a nightly task called trunkd that builds various images.
In the modular work, we will be checking that images such as the following
compile and link correctly:

		kernel
		kernel + iphost
		kernel + decnet
		kernel + clns
		kernel + c7000-drivers
		kernel + iphost+ibm

In other words we are automatically checking that engineers are honoring
modularity rules.  The danger of public humiliation goes a long way to
keeping us honest.

Of course, this is not a panacea.  Like using function prototypes, using
subsystems catches only a certain class of stupid mistakes. We still need
good design reviews followed by code reviews followed by automated
regression tests followed by field trials and so on.

==================
Where Are We Today
==================

This project started in the middle of March.  The completion of the first
phase will be marked by the elimination of all stub files.

As of July 21, 1993 we have eliminated 100 of original 150 stub files.
We've touched nearly every file in the system, but the same can be said
of Aries during the same period.

Some obsolete device drivers and protocol software was removed after
checking with various knowledgable people in marketing and engineering.
Certain customers were also consulted.

	Device Drivers
	 - Type 1 (3Com) and Type 2 (Interlan) Ethernet cards.
	 - SBE serial cards (CSC-T and CSC-S)
	 - 3MB Ethernet
	 - 1822 card from ACC
	 - Parallel Printer support
	 - Netronix Token Ring
	 - Ultranet

	Protocols
	 - HDH		  - GDP
	 - Chaosnet	  - IEN116 name service
	 - PUP		  - HELLO

The monolithic parser has been shattered into a zillion different files
that reside with their appropriate subsystem support.

SNMP is almost ready to suffer the same fate as the parser.  The SNMP group
is cleverly giving the various subsystem owners responsibility and tools for
maintaining their own MIBs.  Once the SNMP changes are in, a lot of the
remaining 50 files will go away.

The "encapsulation layer" in the system has been extensively reworked.
It is now almost easy to mate network protocols with new device drivers.

Some hard slogging remains in IP, CLNS, X.25, and bridging.  These older
parts of the system took a number of liberties with function calls.

The kernel image (compiled on the SPARC) is within its last 20 or so
stub functions.

We're in the process of prototyping various service points (see below for
definition of the term).  The first time through it wasn't clear how to do
this since the function registry code uses functions with a variable number
of arguments.

The -k router images for all platforms are working.  The comm server code
has linking problems due to stub file foulups (sound familiar?).  I hope to
fix that problem by eliminating the last stub files.  The rxboot image for
the low end doesn't link yet, but when it does it will be smaller than the
Aries rxboot.

Now that Aries is running the autons tests cleanly, we are starting to run
the modular system against those tests.  The preliminary results are
encouraging.

The repository is /trunk/cvs and commits are by invitation only for the time
being.  A checked out copy of the respository may be found in /trunk/nightly. 

=======================
Things We Haven't Done
=======================

We haven't properly defined or scoped the subsequent phases of this work.

At some point we're going to have to go back over the various service points
that have been defined and see how happy we are with them.  We've been
discovering interfaces in this phase of the project and they're not
necessarily the way we really want things in the medium to long term.  Many
will get to play this game.

The subsystems are *not* dynamically loadable.  You have to link whatever you
want into an image using the same old UNIX loader.  We haven't had the time,
plus there is an even more important issue.

We've done nothing about shared data structures.  As long as all subsystems
have the same version of, say, the interface (idb) data structures, they
will work together just fine.  This is plainly inconvenient if you wish to
do something fancy like using dynamic loading to upgrade your DECnet
subsystem to the lastest and greatest without changing your IP router
support.  If there is an inconsistency in a shared structure, you can't do it.
It will take a lot of work to fix this problem.

We haven't changed the "debugging toolkit".  Since the image is still a
single linked image, symbol table maps work as before, as do core dumps
and related low level techniques.

==========
Interfaces
==========

We're getting very techie from here to the end of this file.  All the
manager stuff has been dealt with earlier.

The existing Aries project software has a number of  ways of formally
interfacing different sections of code.  These methods include:

	1.  the interface (idb) vectors
	2.  the new command parser
	3.  the comm servers's transport/connection vectors

as well as a number of more minor techniques.  The modular project has
introduced function registration which is described in detail in
another document, Doc/Function_Registration

