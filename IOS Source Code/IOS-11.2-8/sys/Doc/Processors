/* $Id: Processors,v 3.1 1996/09/20 17:57:32 mbeesley Exp $
 * $Source: /trunk/arkansas/cvs/Xsys/Doc/Processors,v $
 *------------------------------------------------------------------
 * Processors : Documentation on the various processors supporting IOS
 *
 * Sept 1996, Michael Beesley
 *
 * Copyright (c) 1995 by cisco Systems, Inc.
 * All rights reserved.
 *------------------------------------------------------------------
 * $Log: Processors,v $
 * Revision 3.1  1996/09/20  17:57:32  mbeesley
 * CSCdi69925:  Add some info about the CPUs on which IOS runs
 *
 *------------------------------------------------------------------
 * $Endlog$
 */

[1] Introduction
================

	This document gives an overview of the different processors IOS runs 
	on in the release of software in this repository. It will list the 
	processors and the production platforms in which they are used. It 
	also tries to describe some of the major differences between the 
	processors with regard to the majority of the code base which is 
	insensitive to the particular platform details (Note: When I first 
	wrote the above sentence I used the phrase "platform independent". 
	However, after writing the rest of the document, it became quite 
	obvious that there simply is no such thing in our system. The best 
	we get is platform insensitive, but never independent -;).

	I have also put in a blurb about a processor known as the 
	"CBus Controller". This is a Cisco custom-designed discrete CPU which
	does not actually run IOS but interacts with IOS in a very tightly
	coupled manner on the ags and c7000 platforms.

	You are encouraged to read the accompanying Platforms doc.

[2] Processor/Platform Summary
==============================

	CPU		Platforms
	=================================================================

M68K	68360		c1000, c1600
====	
	68020		ags csc/2

	68030		c2500, c4000, AS5200, ags csc/3

	68040		ags csc/4, c7000

MIPS	r4600/r4700/	c3600, c4500, c4700, c7200, c7500, VIP1/2, AS5300
====	r5000 (aka P4)

	Sparc		UNIX Solaris/SunOs Images (test mages only)

	PowerPC		No production platforms in this release

	Intel x86	No production platforms in this release

	=================================================================

	Note: AGS is not supported after Cisco IOS Release 11.0.

*******************************************************************************

[3] Processor Family Details - M68k CPU32 Family
================================================

    o CPU Details
	
	Pipe Speed  - Between 20MHz and 40MHz
	ICache      - Between 0K and 4K bytes
	DCache	    - Between 0K and 4K bytes
	L2 Cache    - None on any platform

    o Alignment :

	In general, the CPU32 CPU core is alignment senesitive. However, most
	of the actual processors we use are insensitive to alignment due to 
	the variable bus sizing in the bus unit of the CPU. On CPUs that do 
	not have this feature in the bus unit (68EC040), there is external 
	hardware to handle it. So this means that the CPU can access a 4-byte 
	quantity on a boundary that is not 4 bytes. However, when this happens
	two bus cycles are issued to get the data. So it is worth trying to 
	access things on correct boundaries wherever possible from a 
	performance perspective.

    o Atomic instructions :

	The M68k CPU family does have some atomic instructions, that is,
	noninterruptable read/modify/write instructions. So far all the 
	compilers we use have always (as far as I can tell) used these 
	atomic instructions for code such as :

		idb->input_qcount++;

	However, the compiler vendor does not guarantee this. So, when 
	manipulating variables that are changed at both interrupt level and
	process level, the code must either be a critical section IE the
	process level code has raised the interrupt level to at least the
	interrupt level of the ISR that will also change the variable, or
	the process level code must use one of the atomic static inlines
	(atomic_increment/decrement). These inlines explicitly use the
	built-in atomic instructions of the machine.

    o Code protection :

	No IOS platform built on the M68k family uses versions of the CPU that
	have full MMU support. Hence there is no hardware support for write
	protecting the text segment of the IOS image. The system does checksum
	the text segment (every 30 seconds) and will crash if the checksum is
	incorrect. However, finding the offending code is hard.

    o Null pointers :

	Most of the IOS platforms built on the M68k family have low addresses
	mapped into the address space with no hardware protection. Hence
	a read from a Null pointer goes undetected and the data returned is
	undefined. A write will also succeed, resulting in low core memory
	corruption which can crash the system in very strange ways. In an
	effort to catch write cycles, the first piece of low core DRAM
	is checksummed, and changes are caught and flagged.

    o Miscellaneous :

	- int, uint, long, ulong : 32 bits
	- short, ushort		 : 16 bits
	- uchar, char		 :  8 bits
	- Big endian data format

*******************************************************************************
	
[4] Processor Family Details - MIPS R4K/R5K Family
==================================================

    o CPU Details
	
	Pipe Speed  - Between 80MHz and 200MHz
	ICache      - Between 16K and 32K bytes
	DCache	    - Between 16K and 32K bytes
	L2 Cache    - Up to 2 Mbytes on some platforms

    o Alignment :

	These CPUs are sensitive to alignment. If software tries to access
	a piece of memory with incorrect alignment with regard to the size
	of the access, the CPU will take an exception. The exception handler
	on these platforms will complete the access and restart the executing
	thread with the correct data. It will also record the access and
	the PC of the code executing and will display this info. This info
	is also under the "show align" command.

	Code that cannot guarantee the alignment of variables must use
	the alignment insensitive access macros, GET/PUTSHORT and GET/PUTLONG.

    o Atomic instructions :

	These CPUs do not have any atomic read/modify/write instructions.
	So, when manipulating variables that are changed at both interrupt 
	level and process level, the code must either be a critical section 
	IE the process level code has raised the interrupt level to at least 
	the interrupt level of the ISR that will also change the variable, or
	the process level code must use one of the atomic static inlines
	(atomic_increment/decrement). These inlines explicitly use some 
	instructions built into the machine to restart an interrupted increment
	or decrement correctly. Note, these primitives only work on cached 
	variables IE they do not work on data sitting in uncached shared
	memory.

    o Code protection :

	At init time, the IOS programs the MMU of these processors to provide
	write protection of the text segment. If any code tries to write
	into the code space, the system will crash with a segmentation
	violation.

	However the protection is not completely foolproof, although very
	good. The physical memory in which the code sits is mapped into other
	segments of the address space and is writable through those segments.

    o Null pointers :

	Non of the IOS platforms using these processors have low addresses
	mapped into the processors address space. Hence an access to a low
	address (below 16k) causes an exception. The exception handler will
	log the event, program counter, and so on and continues the executing
	thread with data of 0 if the cycle was a read. The logged data
	will be displayed in the background and is also available under the
	"show align" command. The exception handler will crash the box
	if the cycle is a write.

    o Miscellaneous :

	- int, uint, long, ulong : 32 bits
	- short, ushort		 : 16 bits
	- uchar, char		 :  8 bits
	- Big endian data format

*******************************************************************************

[5] Processor Family Details - Sparc Family
===========================================

    o CPU Details
	
	Pipe Speed  -
	ICache      -
	DCache	    -
	L2 Cache    -

    o Alignment :

    o Atomic instructions :

    o Code protection :

    o Null pointers :

    o Miscellaneous :

*******************************************************************************

[6] Processor Family Details - PowerPc Family
=============================================

    o CPU Details
	
	Pipe Speed  -
	ICache      -
	DCache	    -
	L2 Cache    -

    o Alignment :

    o Atomic instructions :

    o Code protection :

    o Null pointers :

    o Miscellaneous :

*******************************************************************************

[7] Processor Family Details - Intel x86 Family
===============================================

    o CPU Details
	
	Pipe Speed  -
	ICache      -
	DCache	    -
	L2 Cache    -

    o Alignment :

    o Atomic instructions :

    o Code protection :

    o Null pointers :

    o Miscellaneous :

*******************************************************************************

[8] CBus Controller
===================

	The CBus controller is a very, very special CPU. It does not actually
	run IOS. It is a long-instruction-word, superscalar custom CPU, 
	designed at Cisco many years ago. It si based on bit-slice processors.
	It was the key piece of hardware in early Cisco routers and is at the 
	heart of the ags and c7000 systems.

	There is a block of fast SRAM-based packet memory on the CBus 
	controller into which interface processors receive and transmit 
	datagrams. The processor can classify and switch these frames	
	(autonomous switching). A later version of the card, known as the 
	SSP, can also process access lists (sse switching).

	When the CBus controller is cannot handle a datagram, it interrupts
	the main CPU running IOS. Through a registered interface, the main CPU
	can access parts of the packet and fastswitch it. If it is unable
	to fastswitch it, the packet is copied from the CBus controller memory
	into packet memory (DRAM) on the IOS CPU (csc/4 or RP).

	IOS developers need to know the full details of the CBus controller
	when dealing with the IOS fastswitching and/or device driver code
	running on the ags or c7000.

*******************************************************************************

[A] Appendix A : Alignment
==========================

	Processors, specifically RISC processors, have a problem accessing
	pieces of memory whose addresses are not a perfect multiple of the
	size of a piece of memory. As an example :

	A 4-byte quantity (int or long) must be at an address that is a 
	multiple of 4. If it is at address 0x1001, it causes an alignment
	error. Using the GET/PUTLONG macros eliminates the error.

	A 2-bytes quantity (short or ushort) must be at an address that is a 
	multiple of 2. If it is at address 0x1001, it causes an alignment
	error. Using the GET/PUTSHORT macros eliminates the error.

	There are no alignment constraints on single-byte entities (chars).

	Presently, the gcc compiler we use for IOS has some "optimizations"
	that can cause mis-alignments, allthough the code seems to be alignment
	friendly. The compiler assumes that it can access any part of a data
	structure with an access method as big as the biggest scalar in the
	data structure, as it assumes that the data structure will allways
	be aligned to the alignment requirements of this scalar.

	Hence for the following data structure :

	typedef struct snap_hdr_ {
	    uchar  dsap;                /* destinations service access point */
	    uchar  ssap;                /* source service access point */
	    uchar  control;             /* frame type */
	    uchar  oui[3];              /* snap extension */
	    ushort type;                /* ethernet type field */
	    uchar  data[0];
	} snap_hdr;

	The compiler will optimize the two byte accesses below into a ushort
	access, which can cause an alignment error :

	} else if ((snap->dsap == SAP_NULL) && 
                   (snap->ssap == SAP_NULL)) && 

	To prevent this, the scalars in the data structure need to be declared
	volatile. I believe there is a bug against the compiler to stop
	it doing this.

*******************************************************************************
