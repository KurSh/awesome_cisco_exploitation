# $Id: Timers,v 3.3 1996/02/08 23:17:10 ahh Exp $
# $Source: /release/111/cvs/Xsys/Doc/Timers,v $
#------------------------------------------------------------------
# System timer documentation
#
# April 1994, Dave Katz
#
# Copyright (c) 1994-1996 by cisco Systems, Inc.
# All rights reserved.
#
#------------------------------------------------------------------
# $Log: Timers,v $
# Revision 3.3  1996/02/08  23:17:10  ahh
# CSCdi48469:  Timer documentation bug
# mgd_timer_get_additional_context -> mgd_timer_additional_context
#
# Revision 3.2  1995/11/17  08:33:07  hampton
# Remove old entries from the RCS header logs.
#
# Revision 3.1  1995/11/09  10:48:59  shaker
# Bump version numbers from 2.x to 3.x.
#
# Revision 2.1  1995/06/07  19:59:32  hampton
# Bump version numbers from 1.x to 2.x.
#
#------------------------------------------------------------------
# $Endlog$
#

	Title: Timers
	Date: 21-February-1995

The system supports three distinct flavors of timers.  Each type can
be used to time things to the limits of the system clock accuracy
(currently 4msec), but they use three distinct paradigms.  For lack of
better names, I'll call them "passive", "active," and "managed."

See the end of this document to answer the question, "So what kind of
timers should I use?"


1) History.

In the beginning, there was msclock, and it was good.  OK, maybe not
good, but sufficient if you were careful.  msclock is a macro that
expanded to "*clockptr", which references a cell that the Non Maskable
Interrupt routine (tied to the hardware timer tick) increments by the
basic clock rate (4 msec) each time it runs.  This provides a 32 bit
cell that rolls over after 49 days, 17 hours, 2 minutes, and 47.296
seconds.  Because of this rollover (and the sign change that occurs
after 24 days, 20 hours, 31 minutes, etc.) the use of msclock proved
to be error-prone, resulting in zillions of "49 day bugs".  These took
a remarkably long time to pop out, as it was quite some time before
routers stayed up long enough for these bugs to manifest themselves.
NOTE THAT THE EXPLICIT USE OF THE VARIABLE "MSCLOCK" IS DEPRECATED,
AND MUST NOT APPEAR IN ANY NEW CODE.


2) Passive Timers

Passive Timers are quite simple.  Basically, the current value of
msclock is grabbed, and either noted as-is (for "timers-in-the-past,"
see below) or noted after adding a delay value ("timers-in-the-future").
This noted value is then examined periodically, either by polling,
or when triggered by an event of some kind.

There is an inherent ambiguity in passive timers, however, in that
they wrap after 49 days.  This means that there is a danger when
comparing timestamps, in that they will alias if they are more than 24
days apart (in other words, if something happened 30 days in the past,
it will appear to be 19 days in the future unless there is some other
context to disambiguate with).  Someday, passive timers will be
expanded to 64 bits, at which point they won't roll over for roughly
584,000,000 years, well beyond the MTBF of our routers.

Variables declared to hold timestamps must be of type "sys_timestamp".
This is currently 32 bits, but will eventually be changed to 64 bits.


Passive Timers-In-The-Future

These are the most common timers in the system today.  Essentially,
when some event is to be scheduled in the future, the epoch of
that event is calculated, and then the system periodically checks to
see if that epoch has been reached (often in a process BLOCK routine).
More modern uses of timers-in-the-future use the value 0 to indicate
that the timer is not running;  the macros described below support
this scheme.

The following macros should be used for timers-in-the-future:

    TIMER_START(timer, delay)	
	Sets a timer to expire "delay" milliseconds in the future.
	Can be used whether or not the timer is running.

    TIMER_START_JITTERED(timer, delay, jitter_percent)
	Sets a timer to expire "delay" milliseconds in the future, minus
	a pseudorandom jitter of up to jitter_percent of the delay.
	The delay and jitter percentage must be such that the maximum
	jitter is at least 128 msec, or jitter will not be applied.
	Can be used whether or not the timer is running.

    TIMER_RUNNING(timer)
	Returns TRUE if a timer is running (non-zero).

    AWAKE(timer)
	Returns TRUE if the timer has expired.  Note that this does
	*NOT* check to see if the timer is running or not, for backward
	compatibility.  If your code starts and stops timers, you must
	explicitly check for TIMER_RUNNING before using AWAKE (or better
	yet use TIMER_RUNNING_AND_AWAKE).

    SLEEPING(timer)
	Returns TRUE if the timer has not yet expired.  Note that this
	does *NOT* check to see if the timer is running or not.  See above.

    TIMER_RUNNING_AND_AWAKE(timer)
  	Tests a timer to see if it is both active (non-zero) and awake.

    TIMER_RUNNING_AND_SLEEPING(timer)
  	Tests a timer to see if it is both active (non-zero) and still
	sleeping.

    TIMER_STOP(timer)
	Stops a timer (sets it to zero).

    TIMER_UPDATE(timer, delay)
	Adds an additional "delay" milliseconds to the existing timer.
	Note that this macro will do nothing if the timer is stopped.

    TIMER_UPDATE_JITTERED(timer, delay, jitter_percent)
	Adds an additional "delay" milliseconds to the existing timer,
	minus a pseudorandom jitter of up to jitter_percent of the delay.
	Note that this macro will do nothing if the timer is stopped.
	The delay and jitter percentage must be such that the maximum
	jitter is at least 128 msec, or jitter will not be applied.

    XAWAKE(timer, max)
	Returns TRUE if the timer has expired.  "max" is the maximum
	delay in milliseconds that the timer can ever be set to, in order
	to reduce ambiguity (see below).  Does not check to see if the timer
	is running.

    XSLEEPING(timer, max)
	Returns TRUE if the timer has not yet expired.  "max" is the
	maximum delay in milliseconds that the timer can ever be set to, 
	in order to reduce ambiguity (see below).  Does not check to see 
	if the timer is running.

    TIME_LEFT_SLEEPING(timer)
	Calculate the time left sleeping (before we wake up).  Used only
	for timers-in-the-future.  Returns a positive integer in the
	range 0 to 24 days.  If the timer has expired, it returns 0.
	If the timer is more than 24 days in the future or past,
	aliasing will occur.  Handy for display routines and the like.

    TIMER_SOONEST(timer1, timer2)
	Returns the earlier of timer1 and timer2.  If one is not
	running, it returns the other.  If both are not running,
	it returns a stopped timer (0).

    TIMER_ADD_DELTA(timer, delay) -
        Returns the non-zero timer sum of a timer value and a delta.
        In contrast to TIMER_UPDATE, this will work even if timer was
        0. This is used in cases where a timer value and a delay are
        added to compute the new timer value for a timer variable. Note
        TIMER_UPDATE() does the addition in place (on the parameter
        timer).


The SLEEPING and AWAKE macros will work properly *only* when it is
guaranteed that the time is never more than 24 days in the past or
future.  This effectively means that timers must be turned off after
they expire, or set at least once every 24 days, and cannot be set to
expire more than 24 days in the future.  A very common bug is to have
a very old timer laying around that suddenly appears after 24 days to
be armed and ready.

For example, if a timer has the value of 100 and the current epoch is
0x81000000, the timer looks to be almost 24 days in the future (instead
of slightly more than 24 days in the past).

The XSLEEPING and XAWAKE macros reduce the ambiguity.  They require an
additional parameter, which is the maximum duration that the timer can
ever use.  This reduces the period of ambiguity to the maximum duration
of the timer.  This shifts the sequence space around so that it extends
only a little bit into the future, but much further into the past.  For
example, if the maximum duration of a particular timer is 5 seconds, 
XSLEEPING would work properly from just under 49 days in the past
until five seconds in the future.  So in this case if a timer has
the value 100 and msclock has the value 0x81000000, it will look to
be AWAKE rather than SLEEPING.

XSLEEPING and XAWAKE add another degree of bug freedom.  If you guess
wrong about the max duration of the timer (say, you think it can only
be set to run for five seconds, but you set it 10 seconds into the future)
then it will appear to be long-expired rather than almost ready to expire.
Be careful out there, folks.

In general, if you are vigilant in new code about doing a TIMER_STOP
after a non-recurring timer expires, and precede AWAKE/XAWAKE calls
with a check for TIMER_RUNNING (or use TIMER_RUNNING_AND_AWAKE), you
should avoid most of the common pitfalls.


Simple example: imagine that you've implemented the Bletch protocol,
which requires an update to be sent every BLETCH_UPDATE milliseconds.
The timer is always running.  Reasonable code fragments are:

	initialization routine:
		bletch_update(bletch_pdb); /* Send the first update */
			-or-
		TIMER_START(bletch_pdb->update_timer, BLETCH_UPDATE);
					   /* Defer the first update */

	bletch_update:
		[send update]
		TIMER_START(bletch_pdb->update_timer, BLETCH_UPDATE);

	bletch_block:
		if (XAWAKE(bletch_pdb->update_timer, BLETCH_UPDATE))...


Passive Timers-In-The-Past

Not quite so common, but still prevalent, are timers-in-the-past.  These
are timestamps in which the current time is noted, and then periodically
examined to see whether enough time has passed for some event to occur.
They are often used for such purposes as rate limiting error messages--
when a message is emitted, the time that it was emitted is noted, and if
another request to emit is made, the previously noted time is examined
to see if sufficient time has passed.

These types of timers often have a common bug, which is that the event
noted may not happen very often, perhaps less than once every 49 days.
The CLOCK_IN_INTERVAL macro reduces the ambiguity to the length of
the delay period every 49 days (see example).  This error is intractable
until 64 bit timers are available, unless it can be guaranteed that
the event being limited happens more often than once per 49 days
(though the length of the ambiguity period may be acceptable).

The following macros should be used with timers-in-the-past:

    GET_TIMESTAMP(timestamp)
	Note the current time in the timestamp.

    GET_NONZERO_TIMESTAMP(timestamp)
	Like GET_TIMESTAMP() except that it doesn't allow a zero value.

    COPY_TIMESTAMP(timestamp1, timestamp2)
	Copies timestamp1 into timestamp2.  Ensures an atomic
	operation for the paranoid.

    ELAPSED_TIME(timestamp)
	Returns the amount of time that has elapsed (in milliseconds)
	since the timestamp.  The result is an unsigned integer in the
	range 0 to 49 days.  If the timestamp is more than 49 days old,
	aliasing will result.

    CLOCK_IN_INTERVAL(timestamp, delay)
	Returns TRUE if the current time lies sometime between timestamp
	and timestamp + delay.  This works for any time interval up to
	(49 days - Delay).  If just under 49 days have elapsed since
	the timestamp was noted, the macro will return a false positive.

    CLOCK_OUTSIDE_INTERVAL(timestamp, delay)
	Returns TRUE if the current time lies outside the interval timestamp
	to timestamp + delay.  This works for any time interval up to
	(49 days - Delay).  If just under 49 days have elapsed since
	the timestamp was noted, the macro will return a false negative.

Example:  Suppose you wanted to rate-limit a message to no more than
once per minute.  The following code sample does that job.  Note, however,
that this code will fail to emit the error message if the error occurs
during one minute roughly 49 days after the previous time it occurred.

   	send_error_message:
		if (CLOCK_OUTSIDE_INTERVAL(error_time, ONEMIN)) {
		    [send message]
		    GET_TIMESTAMP(error_time);
		}


Miscellany

Many bugs occur in well-meaning but error-prone attempts at comparing
timestamps.  NEVER USE ARITHMETIC COMPARISONS ("<", ">", etc.) WITH
TIMESTAMPS--THEY DON'T WORK IN CIRCULAR NUMBER SPACES!!!!  Instead,
use the following macros:

    TIMER_LATER(ts1, ts2)
	TRUE if ts1 is later than ts2.  They must be within 24.8 days
	of each other.

    TIMER_EARLIER(ts1, ts2)
	TRUE if ts1 is earlier than ts2.  They must be within 24.8 days
	of each other.


The time difference between two timestamps can be calculated with the
following macros:

    CLOCK_DIFF_UNSIGNED(ts1, ts2)
    CLOCK_DIFF_SIGNED(ts1, ts2) -
	Calculate ts2 - ts1 accounting for wrap.  If the signed version
	is used, it will return a range of -24 days to + 24 days.
	Use this if it is unclear about the time relationship between the
	two timestamps.  If the unsigned version is used, it
	will return a range of 0 to + 49 days.  This is useful if it
	is known a priori that the second timestamp is later than the first.




3) Active Timers (***DEPRECATED--DON'T USE IN NEW CODE!!!***)

Active timers are a relatively new addition and are not widely used.
These are more like the classic timers provided in operating systems,
whereby a timer is armed, and when it expires a callback routine is
executed to notify the entity that set the timer.

These have an advantage over passive timers in that it is not necessary
to poll them constantly--a single timer process keeps a sorted list of
armed timers instead.  This is a big win in situations where, for
instance, there is a timer on each of 100 control blocks;  with passive
timers, all 100 will have to be polled, whereas with active timers only
the armed timers consume CPU time, and effectively only the first armed
timer is polled.

There are some downsides, however.  It is relatively quite a bit more
expensive to arm/disarm an active timer, since it involves performing
an insertion sort on the timer queue.  Also, the callback is run on
the timer process thread, which has implications for reentrancy, stack
and CPU utilization, etc.  Given the introduction of managed timers
(below), THE USE OF ACTIVE TIMERS HAS BEEN DEPRECATED.  PLEASE DO NOT
USE THEM IN ANY NEW CODE.

Active timers are based around the timer_t data type.  This opaque data
type holds all of the variables and linkage needed to manipulate the
timer.  Callers should not look inside this structure (it's fairly well
hidden to make sure).

There are two types of timers, one-shot and continuous.  One-shot timers
expire once and disarm;  continuous timers will expire repeatedly every
interval.

Timers are created, used, and then destroyed.  Forgetting to destroy them
will cause memory leaks and potentially surprising callbacks.

The procedure calls are:

    create_timer(callback, arg1, arg2, arg3, name, type)
	Creates a timer, but does not arm it.
	Returns a pointer to a timer_t (or NULL).  "callback" is a
	pointer to the callback routine;  the three arguments will
	be passed back to the callback routine (handy for demuxing
	multiple timers with the same callback).  The name is for
	display purposes.  The type is TMT_ONCE or TMT_CONTINUOUS.

    change_timer_arg(timer, callback, arg1, arg2, arg3)
	Changes the parameters set up by create_timer.

    set_timer(timer, interval)
	Sets the timer to the specified interval (in milliseconds) and
	arms it.  Continuous timers already armed will finish their 
	current interval before making any change to the interval.  One-shot
	timers already armed will be reset to the new interval value
	immediately.

    set_timer_interval(timer, interval)
	Sets the timer to the specified interval (in milliseconds) but
	does not alter the running (or stopped) state at all.  The new
	interval will take effect the next time the timer is set or
	fires.

    jitter_timer(timer, jitter_percent)
	Sets the jitter level on this timer to the specified percentage
	of the interval.  This value is recalculated if the interval is
	changed.  A pseudorandom number between zero and the specified
	percentage is subtracted from the interval when arming the
	timer.

    restart_timer(timer)
	Restarts the timer with the last specified interval.  Handy
	for staving off timeouts and the like.

    stop_timer(timer)
	Disarms the timer.

    destroy_timer(timer)
	Destroys the specified timer.  Disarms it first if it was armed.

    active_timer(timer)
	Returns TRUE if the timer is armed.

    get_interval(timer)
	Returns the timer's last programmed interval.

    get_due_time(timer)
	Returns the number of milliseconds before the timer is due to
	expire.  Returns zero if unarmed or just recently expired.


Hazards of Callback Routines

The hazards of callback routines cannot be underestimated.  You must use
these with great care.

The biggest hazard has to do with reentrancy and data exclusion.  Once
a timer is set, the callback routine is called from the timer process
thread, so the original process has *no direct control* over when this
can happen.  The callback routine can be called any time the main
process suspends, including periodic suspensions, printf calls, etc.
If the callback routine manipulates shared data structures, great care
must be taken to ensure that proper locking is done (note, however,
that it is not clear what to do when the callback routine is locked
out...)

Another hazard is the use of unreasonable amounts of CPU time on the timer
thread.  This can potentially cause serious skew in the processing of
other timers.

Yet another hazard is overflowing the timer process's stack--the timer process
has no idea how much any of the callback routines are going to use, after
all.

The only reasonable way to handle things is to keep the callback routines
short and to the point.  Typically they should only wake up the main process,
potentially queueing a message in the process.  This keeps all of the
data structure manipulations synchronized.


For example, suppose we have a blort protocol with many instantiations
of it, but all handled by one process (as it should be;  creating lots of
individual processs gets expensive).  Imagine that we set a timer when
we send a message, so that if we don't receive a reply we can complain.
When the reply comes in, we cancel the timer.

A rough outline would go something like this:

	blort_init:
	   for each instantiation:
		malloc a blort_cb;
		blort_cb->timer = create_timer(blort_callback, blort_cb,
						0, 0, "Blort watchdog",
						TMT_ONCE);
		if (blort_cb->timer == NULL)
			... whatever

        blort_send:
	    send a frame
	    set_timer(blort_cb->timer, BLORT_TIMEOUT);

        blort_receive:
	    stop_timer(blort_cb->timer);

        blort_callback:
	    enqueue timeout notification for blort process

        blort_block:
	    if (received frames or notification queue non-empty)
		run process


4) Managed Timers

The latest addition to the stable of timers are "managed" timers.  These
are essentially passive timers-in-the-future, but with a twist.  They allow
you to group timers together to aid in timer management.

Managed timers are most useful in the case where you have a process
that uses multiple timers.  In the past, this has usually ended up
with a process "block" routine that tests a whole bunch of timers for
"awake"ness, and a process that makes the same pile of tests in order
to determine which timer has expired (or alternatively, a process
that runs periodically and makes the same tests).

Managed timers are groups of timers that are run together, along with a
"master" timer that is used to represent the whole group.  The managed
timer system maintains the individual timers in a sorted list, and
links them all to the master timer.  In the above process example, if managed
timers were used, the block routine would only test the master timer,
and the process would be told which timer had expired.

As if that weren't enough, the whole system can be used recursively;
the master timer for a bunch of timers can itself be hierarchically
linked with others into a master master timer.  This is useful for
efficiency purposes, since very large numbers of active timers in a
single chain will make the sorting operation expensive; the use of
hierarchy reduces the cost of an insertion from O(N) to O(log N).  It
also allows for modularity, since each subtree is loosely coupled, and
can be managed without any direct knowledge of its overall position.
(For instance, the single master timer in each process could in turn
be part of a global timer system in the scheduler, and we could get
rid of testing in the block routines completely.)

This forms a tree of timers.  The individual timers at the bottom of
the tree are known as "leaf" timers;  these are the timers that are
manipulated directly.  Internal nodes of the tree, the "parent" timers,
are never directly set by callers, but are manipulated by the timer
management system.

The overall mechanism works as follows:  first, the hierarchy is established
by calling an initialization routine for each leaf and parent timer.  The
parent to each timer is specified, thus establishing the tree.  Also
included is opaque context information, which is used when a timer expires
to determine what event should take place (details below).  Note that
the tree must be initialized from the root down;  the parent of any timer,
parent or leaf, must be initialized before the child.

Once the hierarchy is established, the leaf timers are manipulated using
the familiar start/stop/update routines.  When a leaf timer is started,
it is linked into a sorted list attached to its parent.  The parent
then is set to the earliest expiration time of any of its children,
and this is done recursively.  Thus, the timer at the root of the tree
always reflects the next timer to expire.

Note that only active timers incur any overhead in the managed timer
system;  stopped timers stay out of the way completely.

Timer expiration is tested for by simply testing the root of the tree for
expiration;  if it is expired, a single call will return the leaf timer
that expired, from which can be obtained the context information stored
earlier.  This timer must then be restarted or stopped (or you'll never
be able to see any other timers, and you'll infinite loop!)

The primary data structure is type mgd_timer.  This should be completely
opaque to all callers; never look inside!  Let the procedures in
mgd_timers.h and mgd_timers.c do it for you.  This structure is
typically embedded directly into another data structure, rather than
allocated separately and used through a pointer.

Managed timers provide almost all of the advantages of active timers,
without some of the nasty drawbacks (serialization is maintained, for
instance).  Therefore, managed timers should be used in preference to
active timers in all new code.

Managed timers may also be manipulated from interrupt routines.  If a
timer is going to be started, stopped, or updated from an interrupt
routine, this fact must be flagged at initialization time.  The managed
timer system will automatically propagate this fact in the appropriate
places in the timer hierarchy so that interrupt exclusion will be
applied when necessary.  In general, interrupts will not be excluded when
manipulating a subtree that does not require exclusion.

There are downsides and things to be careful of, as in all things.
First of all, the mgd_timer block is 24 bytes (as opposed to 4 bytes
for a simple timestamp)--if one were to embed a timer in a data
structure of which there were 50,000 copies, this could prove
significant.  The start and stop calls perform insertion sorts which
can be relatively expensive (relative to simple timestamps).  They are
not appropriate for something that is updated by data packet receipt,
for instance.  The managed timers create webs of pointer linkages behind
your back.  Be very sure that any timer that is part of an allocated
structure is stopped before freeing that structure, and that no
child timers are ever used when their parent timer has been freed.

Detailed calls:

Initialization routines (may *NOT* be called from interrupt routines!):

    mgd_timer_init_parent(timer, parent)
	Initializes parent timer "timer" with parent "parent".
	The parent MUST be initialized before attempting to initialize a
	child.

    mgd_timer_init_leaf(timer, parent, type, context, interrupt_environment)
	Initializes leaf timer "timer" with parent "parent", timer type "type",
	and context pointer "context".  If the timer is to be manipulated
	from interrupt routines, "interrupt_environment" must be set to TRUE.
	The parent MUST be initialized before attempting to initialize a child.

    mgd_timer_set_type(timer, type)
	Set a new type for this timer.  Must have been previously initialized.
	May be a leaf or parent timer.  (Note that this is the only way
	to set a type in a parent timer;  however, parent timers are
	normally invisible and don't need types.  See "Esoterica" below.

    mgd_timer_set_context(timer, context)
	Set a new context for this timer.  Must have been previously
	initialized.  Must be a leaf timer.

The following can be called *only* for leaf timers.  The timer MUST be
initialized before calling any of these routines.  These routines may
be called from interrupt routines.

    mgd_timer_start(timer, delay)
	Start timer "timer" with "delay" milliseconds of delay.  Can be used
	whether or not the timer is already running.

    mgd_timer_start_jittered(timer, delay, jitter)
	Same as mgd_timer_start, but jitters the timer with "jitter"
	percent variability subtracted from the delay.  Can be used
	whether or not the timer is already running.

    mgd_timer_update(timer, delay)
	Update "timer" with an additional "delay" milliseconds.  If the
	timer is stopped, this routine does nothing.

    mgd_timer_update_jittered(timer, delay, jitter)
	Same, but with jitter.

    mgd_timer_set_soonest(timer, timestamp)
	If "timestamp" is sooner than the current expiration time (if
	any) of "timer", change the expiration to that time.  Can
	be used whether or not the timer is already running.

    mgd_timer_set_exptime(timer, timestamp)
	Sets the timer to expire at time "timestamp."  This allows a timer
	to be set to expire at a particular epoch rather than after a
	time interval.  Can be used whether or not the timer is already
	running.

The following may be called for both leaf and parent timers.  These routines
may be called from interrupt routines.

    mgd_timer_stop(timer)
	Stop the timer.  If timer is a parent, this will recursively
	stop all of the children of this parent.  This is useful for
	such things as shutting down a process, since it is not
	necessary to find all of the running timers.  Can be used
	whether or not the timer is running (it's a no-op if not).

    leaf_timer = mgd_timer_first_expired(master_timer)
	Returns the address of the first expired timer in the tree
	rooted at master_timer, or NULL if nothing's there or expired.

    leaf_timer = mgd_timer_first_running(master_timer)
	Returns the address of the first running timer in the tree
	rooted at master_timer, or NULL if nothing's there.

    mgd_timer_expired(timer)
	Returns TRUE if the timer is running and expired, FALSE if stopped,
	or running but unexpired.

    mgd_timer_type(timer)
	Returns the opaque timer type for this timer

    mgd_timer_context(timer)
	Returns the opaque timer context for this timer.

    mgd_timer_exp_time(timer)
	Returns the expiration timestamp for this timer, or 0 if not running.

    mgd_timer_left_sleeping(timer)
	Returns the number of milliseconds left before expiration of this
	timer, or 0 if it has already expired or is stopped.

    mgd_timer_running(timer)
	Returns TRUE if this timer is running, FALSE if stopped.

    mgd_timer_running_and_sleeping(timer)
	Returns TRUE if this timer is running and unexpired, FALSE if
	expired or stopped.


Esoterica

There's a bunch of extra things that won't typically be used, but may
come in handy if you really know what you're doing and you have a really
good reason.

Linking and delinking:  Routines are available to take entire timer
trees and link them into arbitrary places in other timer trees (or
to cleave off a subtree).  The only forseen use is the event-driven
scheduler, but you never know.

Link and delink are roughly equivalent to start and stop, except
that the timer (which can be a parent) stays running.  In particular,
a link will cause an insertion sort into the parent, and a delink will
stop the parent if the delinked timer is the only running child.

    mgd_timer_link(timer, parent)
	Allows a timer tree to be linked into another timer tree.  The
	timer being linked may be a parent timer, and may be running.

    mgd_timer_delink(timer)
	Delinks a timer subtree from the rest of the timer tree.  The
	timer being delinked may be a parent timer, and may be running.

Extended context:  Normally, one context word should be enough.  However,
additional context words can be defined with a managed timer, both
leaf and parent timers.  To use this first declare the timer:
     MGD_TIMER_EXTENDED(name, extra_context);
	(rather than   mgd_timer name; )
where extra_context is the number of extra context words.

Then to set the context words, use:

     mgd_timer_set_additional_context(timer, index, value)
	"index" is the context word index (starting from 0), and
	"value" is the context value.

To retrieve the information, use:

    mgd_timer_additional_context(timer, index)
	returns the context value

Fenced timers:  Under normal circumstances, code which references
timers recurses all the way to the leaf timers (e.g., mgd_timer_first_expired)
ignoring the intervening parent timers.  However, there are circumstances
in which it may be desirable to recurse down to an arbitrary point in the
tree without going all the way to the leaf timer.  This is accomplished
by setting up a "fence", marking *all* timers at a particular level as
being "fenced".  Then the "fence level" timer can be found by recursing
down from the master timer until the fence is hit.

    mgd_timer_set_fenced(timer, state)
	Sets the "fenced" state of the timer to "state" (TRUE or FALSE)

    mgd_timer_first_fenced(timer)
	Returns the first fenced timer subordinate to the argument


Converting between leaf and parent timers:  A timer can be switched back
and forth between being a leaf and being a parent if the timer is not
running.

    mgd_timer_change_to_leaf(timer)
	Converts the timer to a leaf.  The timer must be initialized.
	If the timer is already a leaf, nothing happens.

    mgd_timer_change_to_parent(timer)
	Converts the timer to a parent.  The timer must be initialized.
	If the timer is already a parent, nothing happens.

Other randomness:
    mgd_timer_next_running(timer)
	Returns the next sibling to the argument.  This can be used
	to walk a timer tree.

    mgd_timer_first_child(timer)
	Returns the immediate child of the argument.  This can be used
	to walk a timer tree.


Example:  Suppose we have a protocol that requires a hello timer for
each interface, plus a timer for an ager that runs periodically.  First
we must decide how to structure the tree.  One way would be to put the
ager timer and all hello timers at the same level under a single master;
but to complicate it, let's make an additional requirement that we want
to be able to display when the next hello will be sent on any interface.
We'll structure our tree like this:
		master
		/    \
	      ager  hello_master
			/|\
		       / | \
		      /  |  \
		     /   |   \
		   idb1 idb2 idb3

Let's assume that we have:
	mgd_timer master;
	mgd_timer ager;
	mgd_timer hello_master
  and in the IDB we have
	mgd_timer idb_hello;

We define our timer types as:
  enum {AGER, HELLO};

In our initialization routine, we do:
	mgd_timer_init_parent(&master, NULL);
	mgd_timer_init_leaf(&ager, &master, AGER, NULL, FALSE);
	mgd_timer_start(&ager, 10*ONESEC);  /* Start the ager */
	mgd_timer_init_parent(&hello_master, &master);
	FOR_ALL_SWIDBS(idb) {
	    mgd_timer_init_leaf(&idb->idb_hello, &hello_master, HELLO,
				 idb, FALSE);
	    mgd_timer_start_jittered(&idb->idb_hello, 30*ONESEC, 25);
	}

At this point, all the timers are running.  Our process BLOCK routine
looks like:
    boolean fooBLOCK (...)
	/* Check for packets in queue */
		....
	/* Check for timer expiry */
	if (mgd_timer_expired(&master))
	    return(FALSE);
	     ...

Then our protocol handler looks like:
	     ...
	edisms(...)
	while (/* queue has packets in it */) {
		...
	}

	/* Process all expired timers. */

	while (mgd_timer_expired(&master) {
	    mgd_timer *expired_timer;
	    idbtype *idb;

	    expired_timer = mgd_timer_first_expired(&master);
	    switch (mgd_timer_type(expired_timer)) {
	      case AGER:
		run_ager();
		mgd_timer_update(expired_timer, 10*ONESEC); /* restart ager */
		break;
	      case HELLO:
		idb = mgd_timer_context(expired_timer);
		send_hello(idb);
		mgd_timer_start_jittered(expired_timer, 30*ONESEC, 25);
		break;
	      default:
	 	mgd_timer_stop(expired_timer);  /* Make it go away! */
		break;
	    }
	}

And we could have a display routine that says:

	printf("\nNext hello occurs in %d seconds",
	   mgd_timer_left_sleeping(&hello_master) / ONESEC);

When our process exits, we can simply do:
	mgd_timer_stop(&master);
and every one of the timers will be stopped.




5) Miscellaneous Time Related Functions

    time = GET_SECONDS()
	Extract the current time in seconds.  Used when working with
	unix style time values.




6) So What Kind of Timers Should I Use, Anyhow?

Given all these choices, what should a well-intentioned engineer use?
The answer, as always, is, "it depends."

Active timers should not be used any more, period.  Their chief charm
is that they are (more or less) "set and forget"; the user need not
write any code to poll the individual timers.  A secondary attraction
is the asynchronous callback; however, this is almost always the wrong
thing to do in our "operating system", which has no exclusion or
synchronization primitives.  The only safe way to use the callbacks
was to serialize them by setting a flag or enqueueing an event for the
main process to handle.  Active timers also do not scale;  every
"timer_set" call requires an insertion sort into a global list that
contains every active timer in the system.

Managed timers have much the same attractiveness as active timers,
but with less pitfalls.


General rule of thumb--for most purposes, use managed timers if you
have more than a couple of timers to take care of.  This will avoid
having to either put a whole load of AWAKE checks into your block
routines, or having to run the process periodically to make the load
of AWAKE checks.  Use passive timers for things that are updated
at data-forwarding time, since the overhead of a mgd_timer_start
can be significant.
