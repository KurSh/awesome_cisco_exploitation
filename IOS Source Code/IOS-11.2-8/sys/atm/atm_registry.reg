# $Id: atm_registry.reg,v 3.4.26.7 1996/08/08 05:05:29 lmercili Exp $
# $Source: /release/112/cvs/Xsys/atm/atm_registry.reg,v $
#------------------------------------------------------------------
# atm_registry.reg -- Atm Registry.
#
# 16-May-1995, R. Li Fo Sjoe
#              Kartik Chandrasekhar
#
# Copyright (c) 1995-1997 by cisco Systems, Inc.
# All rights reserved.
#------------------------------------------------------------------
# $Log: atm_registry.reg,v $
# Revision 3.4.26.7  1996/08/08  05:05:29  lmercili
# CSCdi63861:  rfc1577 stops working when router has more than one AIP
# Branch: California_branch
#
# Revision 3.4.26.6  1996/08/01  20:20:26  awu
# CSCdi62194:  %SYS-3-INVMEMINT:Invalid memory action; %SYS-2-MALLOCFAIL:
# Memory al
# Branch: California_branch
#  -introduce reg_invoke_atm_vc_activated()/deactivated(), for the
#   callback of activating/deactivating a PVC.
#
# Revision 3.4.26.5  1996/06/09  06:05:48  achopra
# CSCdi51530:  ATM ARP client misregisters if no address is configured
# Branch: California_branch
#
# Revision 3.4.26.4  1996/05/09  14:10:54  rbadri
# Branch: California_branch
# LANE, UNI3.1 features
#
# Revision 3.4.26.1.2.1  1996/04/27  06:33:20  cakyol
# non sync sync from V112_0_2 to ....
# Branch: LE_Cal_ATM_FR_California_Postsync_960425_branch
#
# Revision 3.4.26.3  1996/05/07  04:32:03  rzagst
# CSCdi56362:  ATM ARP init can be called when no atm interface is present
# backing out fix since it kills atm arp.
# Branch: California_branch
#
# Revision 3.4.26.2  1996/05/07  00:37:44  rzagst
# CSCdi56362:  ATM ARP init can be called when no atm interface is present
# Branch: California_branch
#
# Revision 3.4.26.1  1996/04/25  23:01:58  ronnie
# CSCdi55766:  Hey!  This ATM and Frame Relay is no different than in 11.1
# Feature commit for ATM and Frame Relay into 11.2
# Branch: California_branch
#
# Revision 3.4.42.1  1996/04/08  01:44:21  bbenson
# Branch: LE_Cal_V112_0_2_branch
# Sync of LE_Cal to new V112_0_2 sync point (post Port Ready).
#
# Revision 3.4.32.1  1996/03/25  02:18:13  cakyol
# sync LE_Syn_Cal_V111_1_3_branch to LE_Cal_V111_1_0_3_branch
# Branch: LE_Syn_Cal_V111_1_3_branch
#
# Revision 3.4.12.1  1996/03/21  21:50:42  cakyol
# Kartik's fix for "ILMI hung" problem picked up manually.
# Branch: LE_Cal_V111_1_0_3_branch
#
# Revision 3.4  1996/01/16  19:36:50  bcole
# CSCdi46724:  NHRP: Provide for migration from RFC1577
#
# Move problem registry services to new registry.
#
# Revision 3.3  1995/12/05  22:29:47  kartik
# CSCdi42922:  ILMI should do bookkeeping about registrations/deregs
# ILMI address registration will now ignore the selector byte.
#
# Revision 3.2  1995/11/17  08:45:52  hampton
# Remove old entries from the RCS header logs.
#
# Revision 3.1  1995/11/09  10:59:41  shaker
# Bump version numbers from 2.x to 3.x.
#
# Revision 2.3  1995/11/08  20:51:32  shaker
# Merge Arkansas_branch into 11.1 mainline.
#
# Revision 2.2  1995/07/26  15:13:07  schrupp
# CSCdi37690:  Support ATM ESI addressing with ILMI prefix
#
# Revision 2.1  1995/06/07  20:11:29  hampton
# Bump version numbers from 1.x to 2.x.
#
#------------------------------------------------------------------
# $Endlog$
#
# Syntax for defining a registry
#
# Each item must begin a line of its own.
# Lines may be continued by ending with a \
#
# BEGIN REGISTRY <name of registry>
#
# DEFINE <name of service point>
# /* <comment lines in standard C format describing the
#     registry. These will be reformatted unless they are
#     in the comment bar format> */
# DATA
#    <Lines of text to be copied from the input to the
#     between the comment and the function declaration>
# END DATA
#    <type of service> := LIST | LOOP | STUB | CASE | RETVAL | VALUE
#    <type declaration of value returned by called function>
#              must be void for LIST and CASE, boolean
#              for LOOP, and ulong for VALUE.
#    <prototype list for called function>
#    <number of cases for case service>
#    <type for case statement>
# END
#
# END REGISTRY
#
#

BEGIN REGISTRY ATM atm_regcode

DEFINE	atm_ilmi_send_trap
/*
 * Send an ILMI TRAP
 */
    STUB
    boolean
    uint if_index, ushort vccchange, int vpi, int vci, int ilmivccchange
END

DEFINE	atm_ilmi_create_event
/*
 * Create an ILMI event
 */
    STUB
    boolean
    int if_index, int periodic, int interval, int cookie
END

DEFINE	atm_ilmi_destroy_event
/*
 * Destroy an ILMI event
 */
    STUB
    void
    int if_index, int periodic, int cookie
END

DEFINE	atm_ilmi_pak_enqueue
/*
 * Enqueue a packet to atm_ilmi_process()
 */
    STUB
    void
    paktype *pak
END

DEFINE atm_ilmi_register_client
/*
 * Register a ILMI client.
 */
   STUB
   ilmiClient
   char *name
END

DEFINE atm_ilmi_register_service
/*
 * Register a service with ILMI.
 */
   STUB
   int
   ilmiClientReq *client_req
END

DEFINE atm_addr_change
/*
 * Service an ATM address change in an ATM ARP client.
 */
  LIST
  void
  idbtype *idb, boolean added
END


DEFINE atm_ilmi_client_request
/*
 * For a Client to send a request thru ILMI.
 */
   STUB
   int
   ilmiClientReq *client_req
END

DEFINE atm_ilmi_addrtraverse
/*
 * Walk the address Table. (Prefix Table on the router)
 */
   STUB
   OctetString *
   ilmiIntf intf, OctetString *prev_add
END

DEFINE atm_ilmi_unregister_client
/*
 * Remove a previously registered client.
 */
   STUB
   void
   ilmiClient client_id
END

DEFINE atm_ilmi_show_command
/*
 * Display ILMI information for an interface.
 */
  STUB
  void
  hwidbtype *hwidb
END

DEFINE atm_vc_created
/*
 * Called when a new VC is being created
 */
    LIST
    void
    vc_info_t *vc_info
END

DEFINE atm_vc_removed
/*
 * Called when a VC is being removed
 */
    LIST
    void
    vc_info_t *vc_info
END

DEFINE atm_vc_activated
/*
 * Callback when an ATM pvc is being activated
 */
    LIST
    void
    vc_info_t *vc_info
END

DEFINE atm_vc_deactivated
/*
 * Callback when an ATM pvc is being deactivated
 */
    LIST
    void
    vc_info_t *vc_info
END

DEFINE atm_arp_glommed_onto_vc
/*
 * Called when to glom onto a vc
 */
    LIST
    void
    idbtype *idb,vcd_t vc,uint protocol,addrtype *addr
END

DEFINE atm_arp_serv_connect_reg
/*
 * Called to handle atm arp connections from static map code
 */
    STUB
    void
    idbtype *idb,vcd_t vc
END

DEFINE atm_arp_serv_connect_ack_reg
/*
 * Called to acknowledge atm arp connections from static map code
 */
    STUB
    void
    idbtype *idb,vcd_t vc
END

DEFINE atm_arp_serv_disconnect_reg
/*
 * Called to disconnect atm arp connections from static map code
 */
    STUB
    void
    idbtype *idb,vcd_t vc
END

DEFINE atm_arp_enqueue
/*
 * enqueue atm arp packets to atm arp process 
 */
    STUB
    boolean 
    paktype *pak
END

END REGISTRY
