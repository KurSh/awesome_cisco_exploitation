#!/bin/sh
# $Id: cisco.SH,v 3.7.10.3 1996/09/13 19:04:50 bhavesh Exp $
# $Source: /release/112/cvs/Xsys/cisco.SH,v $
#------------------------------------------------------------------
# cisco.SH is run by {prep,update}_sys_tree to generate cisco.sh
#
# June 1995, Mark D. Baushke
#
# Copyright (c) 1995-1996 by cisco Systems, Inc.
# All rights reserved.
#------------------------------------------------------------------
# $Log: cisco.SH,v $
# Revision 3.7.10.3  1996/09/13  19:04:50  bhavesh
# CSCdi69107:  Updates for CW_FEATURE keyword according to the new image
# naming
# convention (version 11.2)
# Branch: California_branch
#
# Revision 3.7.10.2  1996/06/17  22:24:28  gstovall
# CSCdi58553:  Need new images for new product
# Branch: California_branch
# Add new *-inu-* image type for the c7200.
#
# Revision 3.7.10.1  1996/05/24  16:00:11  jpfeifer
# CSCdi51681:  Unknown IOS header parameter value
# Branch: California_branch
# Added more choices to the CWFEATURE switch statement.
# This will result in less 'UNKNOWN' values being set
# to the CWFEATURE variable.
#
# Revision 3.7  1996/02/27  07:17:56  rchiao
# CSCdi49917:  makefile changes for ClearCase, part II
# This is 2nd portions of the commit to fix problems identified with
# earlier commit today.
# makefile: two perl scripts moved from sys/scripts to /router/bin are
# corrected.
# ../dependancies changed to $(SYSROOT)/dependancies.
# cisco.SH: the definition of SYSROOT should be relative to where cisco.sh
# is called.
#
# Revision 3.6  1996/02/26  21:47:24  rchiao
# CSCdi49917:  makefile changes for ClearCase, part II
# Please see 'Description' for a more detailed explanation. After testing
# the build environment, I found that some derived element such as
# 'version',
# 'dependancies', are now required to use absolute path in order to
# access.
#
# Revision 3.5  1996/01/28  22:48:00  smackie
# Damn. Not all date programs are created equal. %Y works on Solaris,
# Irix and a host of other systems but not SunOS 4.1.3. Use %y and prefix
# it with "19" instead. (CSCdi47667)
#
# Revision 3.4  1996/01/28  21:19:12  smackie
# Modify the cisco.sh script template to use date + %Y to generate the
# current year in the copyright rather than a static text string. This way
# we don't have to remember to fix it every year. (CSCdi47667)
#
# Revision 3.3  1996/01/26  23:07:03  smackie
# Another year, another stock split. Update the main IOS software
# copyright date to 1996. (CSCdi47667)
#
# Revision 3.2  1995/11/17  08:32:00  hampton
# Remove old entries from the RCS header logs.
#
# Revision 3.1  1995/11/09  10:47:59  shaker
# Bump version numbers from 2.x to 3.x.
#
# Revision 2.4  1995/08/21  20:17:30  rchiao
# CSCdi39074:  build header DEVELOPMENT mispelled
#
# Revision 2.3  1995/07/27  01:40:30  mdb
# CSCdi37734:  release master needs more control over version string
# generation
#
# Revision 2.2  1995/06/19  10:10:23  mdb
# CSCdi35929:  CW_FEATURE string in c1000 images is UNKNOWN
# Define CW_FEATURE for gs-a-* gs-h-* gs-p-* and gs-y-* images.
#
# Revision 2.1  1995/06/07  19:58:22  hampton
# Bump version numbers from 1.x to 2.x.
#
#------------------------------------------------------------------
# $Endlog$
#

#!/bin/sh
v="$1"
trunk_rev="$2"
trunk_rev2="$3"
copy_name="$4"

rm -f cisco.sh
cat > cisco.sh <<@@E_O_F
#!/bin/sh
#
# cisco.sh
#
# Called with:
#      \$1	Description of software
#      \$2	Software status
#      \$3	system type
#      \$4	compiler to use to create cisco.o
#      \$5	Version increment if argument present
#
# Environment variables assumed to be set by our parent:
#      HWSWNAME   - used to create a unique cisco-$HWSWNAME.c file
#      CWIMAGE    - the name of the image to be built
#      CWFAMILY   - the software platform family name
#      CWFEATURE  - which features are included in this image
#      CWMEDIA    - FLASH, RAM, ROM, RELOCATABLE, PCMCIA, or UNKNOWN
#
# WARNING: This file was automatically generated by the checkout
# script when we created this copy of the Lab Trunk.
#
#  DO NOT EDIT.
#
PATH=/usr/local/bin:/usr/5bin:/bin:/usr/bin:/router/bin:/usr/ucb
ARGDESC="\$1"
ARGSTAT="\$2"
ARGSYS="\$3"
ARGCOMP="\$4"
ARGBUMP="\$5"
SYSROOT=\`../scripts/sysroot\`
if [ ! -r \$SYSROOT/version ]; then echo 100 > \$SYSROOT/version; fi
touch \$SYSROOT/version
v=\`cat \$SYSROOT/version\`
if [ "x\$v" = "x" ]; then echo 100 > \$SYSROOT/version; v=100; fi
wc=\`echo \$v | perl -ne '\$n=(split(/\\./));\$n--;print \$n,"\\n";' \`
build_ver="Version"
if [ \$wc = 0 ]; then		# if no dot, it's either release or eng
    if [ -f \$SYSROOT/masterbuild ]; then
	build_type=", RELEASE SOFTWARE (fc1)"
        minor_version=\$v
    else
        if [ -n "\$ARGBUMP" ]; then
            v=\`expr \$v + 1\`
            echo \$v > \$SYSROOT/version
            echo Making version \$v
        fi
	if [ "x\$ARGSTAT" = "x" ]; then
            build_type=", ENGINEER\'S PERSONAL BUILD (unsupported)"
	    minor_version=$v
	else
            build_type=" [$copy_name \$v]"
	    build_ver="\${ARGSTAT}Version"
	    minor_version=$v
	fi
    fi
elif [ \$wc = 1 ]; then	# there was only one dot
    # if the number before the dot was a zero, it's beta test software
    if [ \`echo \$v | cut -d. -f1\` = 0 ] ; then
        build_type=", BETA TEST SOFTWARE"
        minor_version=\$v
    else
        build_type=", MAINTENANCE INTERIM SOFTWARE"
        minor_version=\$v
    fi
else	# there was more than one dot
    build_type=", CISCO DEVELOPMENT TEST VERSION"
    minor_version=\$v
fi
rm -f cisco.c
if [ -n "\$HWSWNAME" ]; then HWSW="-\$HWSWNAME"; else HWSW=""; fi
if [ "x\$CWIMAGE" = "x" ]; then 
    image=\`echo \$ARGDESC | perl -ane 's/^.*\\((.*)\\).*/\$1/;print;'\`
    if [ "x\$image" != "x" ]; then CWIMAGE=\$image; fi
    if [ "x\$CWIMAGE" = "x" ]; then CWIMAGE="UNKNOWN"; fi
fi
if [ "x\$CWFAMILY" = "x" ]; then
    family=\`echo \$CWIMAGE | perl -ane '(\$_)=split(/-/);print \$_,"\\n";'\`
    if [ "x\$family" != "x" ]; then CWFAMILY=\$family; fi
    if [ "x\$CWFAMILY" = "x" ]; then CWFAMILY="UNKNOWN"; fi
fi
if [ "x\$CWFEATURE" = "x" ]; then
    case \$HWSW in
        # new naming scheme (* matches one of 'm', 'f', 'l', 'r')
        -gs-y-*)   CWFEATURE="REDUCED-IP"    ;; # gs-y-m
        -gs-ny-*)  CWFEATURE="IPX|REDUCED-IP" ;; #gs-ny-m
        -gs-by-*)  CWFEATURE="ATALK|REDUCED-IP" ;; #gs-by-m
        -gs-bny-*) CWFEATURE="ATALK|IPX|REDUCED-IP" ;; #gs-bny-m
        -gs-bnsy-*) CWFEATURE="ATALK|IPX|REDUCED-IP|PLUS" ;; #gs-bnsy-m
        -gs-bnsy40-*) CWFEATURE="ATALK|IPX|REDUCED-IP|CRYPTO40|PLUS" ;; #crypto40
        -gs-bnsy56-*) CWFEATURE="ATALK|IPX|REDUCED-IP|CRYPTO56|PLUS" ;; #crypto56

        -gs-qy-*)   CWFEATURE="ASYNC|REDUCED-IP"          ;; # gs-qy-mz 
        -gs-nqy-*)   CWFEATURE="IPX|ASYNC|REDUCED-IP"          ;; # gs-nqy-mz 
        -gs-y2-*)   CWFEATURE="REDUCED-IP|PIM|OSPF"          ;; # gs-y2-mz 

        -gs-ainr-*) CWFEATURE="APPN|IP|IPX|IBM" ;; #gs-ainr-l gs-ainr-m
        -gs-aj-*)  CWFEATURE="APPN|ENTERPRISE" ;; #gs-aj-m #gs-aj-l
        -gs-ajs-*)  CWFEATURE="APPN|ENTERPRISE|PLUS" ;; #gs-ajs-m #gs-aj-l
        -gs-ajs40-*)  CWFEATURE="APPN|ENTERPRISE|CRYPTO40|PLUS" ;; #gs-ajs-m #gs-aj-l
        -gs-ajs56-*)  CWFEATURE="APPN|ENTERPRISE|CRYPTO56|PLUS" ;; #gs-ajs-m #gs-aj-l
        -gs-c-*)   CWFEATURE="COMM-SERV"     ;; # cs subset
        -gs-d-*)   CWFEATURE="DESKTOP"       ;; # gs-d-f gs-d-m gs-d-r 
        -gs-ds-*)  CWFEATURE="DESKTOP|PLUS"   ;; # gs-ds-f gs-ds-m gs-ds-r gs-ds-l
        -gs-ds40-*)  CWFEATURE="DESKTOP|CRYPTO40|PLUS"   ;; # gs-ds40-l gs-d40-m
        -gs-ds56-*)  CWFEATURE="DESKTOP|CRYPTO56|PLUS"   ;; # gs-ds56-l gs-ds56-m
        -gs-f-*)   CWFEATURE="FRAD"          ;; # gs-f-f gs-f-l gs-f-r 
        -gs-fin-*)   CWFEATURE="LANFRAD"          ;; # gs-f-f gs-f-l gs-f-r 
        -gs-g-*)   CWFEATURE="ISDN"          ;; # gs-g-f gs-g-m gs-g-r 
        -gs-i-*)   CWFEATURE="IP"            ;; # gs-i-f gs-i-m gs-i-r
        -gs-is-*)  CWFEATURE="IP|PLUS"        ;; # gs-is-f gs-is-m gs-is-r 
        -gs-is40-*)  CWFEATURE="IP|CRYPTO40|PLUS"        ;; # gs-is40-l gs-is40-m
        -gs-is56-*)  CWFEATURE="IP|CRYPTO56|PLUS"        ;; # gs-is56-l gs-is56-m
	-gs-j-*)   CWFEATURE="ENTERPRISE"    ;; # gs-j-l ???
	-gs-js-*)   CWFEATURE="ENTERPRISE|PLUS"    ;; # gs-js-l gs-js-m
	-gs-js40-*)   CWFEATURE="ENTERPRISE|CRYPTO40|PLUS"    ;; # gs-js40-l gs-js56-m
	-gs-js56-*)   CWFEATURE="ENTERPRISE|CRYPTO56|PLUS"    ;; # gs-js56-l gs-js56-m
        -gs-p-*)   CWFEATURE="SERVICE"       ;;

        -gs-ajsv-*)  CWFEATURE="APPN|ENTERPRISE|VIP|PLUS" ;; #gs-ajs-m #gs-aj-l
	-gs-jsv-*)   CWFEATURE="ENTERPRISE|VIP|PLUS"    ;; # gs-jsv-l gs-jsv-m
        -gs-pv-*)  CWFEATURE="SERVICE|VIP"   ;; #gs-pv-m

        -gs-ads-*)  CWFEATURE="APPN|DESKTOP|PLUS"   ;; # gs-ds-m gs-ds-l
        -gs-inu-*) CWFEATURE="IP|IPX|VLAN"   ;; # gs-inu-f gs-inu-l gs-inu-m gs-inu-r

        -gs-adsv-*)  CWFEATURE="APPN|DESKTOP|VIP|PLUS"   ;; # gs-adsv-m gs-adsv-l
        -gs-ajsv40-*)  CWFEATURE="APPN|ENTERPRISE|VIP|CRYPTO40|PLUS" ;; #gs-ajsv40-m gs-ajsv40-l
        -gs-ajsv56-*)  CWFEATURE="APPN|ENTERPRISE|VIP|CRYPTO56|PLUS" ;; #gs-ajsv56-m gs-ajsv56-l
        -gs-dsv-*)  CWFEATURE="DESKTOP|VIP|PLUS"   ;; # gs-dsv-m gs-dsv-l
        -gs-dsv40-*)  CWFEATURE="DESKTOP|VIP|CRYPTO40|PLUS"   ;; # gs-dsv40-m gs-dsv40-l
        -gs-dsv56-*)  CWFEATURE="DESKTOP|VIP|CRYPTO56|PLUS"   ;; # gs-dsv56-m gs-dsv56-l
        -gs-isv-*)  CWFEATURE="IP|VIP|PLUS"        ;; # gs-isv-m 
        -gs-isv40-*)  CWFEATURE="IP|VIP|CRYPTO40|PLUS"        ;; # gs-isv40-m
        -gs-isv56-*)  CWFEATURE="IP|VIP|CRYPTO56|PLUS"        ;; # gs-isv56-m
        -gs-jsv40-*)  CWFEATURE="ENTERPRISE|VIP|CRYPTO40|PLUS" ;; #gs-jsv40-m gs-jsv40-l
        -gs-jsv56-*)  CWFEATURE="ENTERPRISE|VIP|CRYPTO56|PLUS" ;; #gs-jsv56-m gs-jsv56-l

        -gs-boot-*) CWFEATURE="BOOT"         ;; # gs-boot-r gs-boot-c gs-boot-m
        -gs-rboot-*) CWFEATURE="BOOT|IBM"   ;;

	-gs-ajv-*) CWFEATURE="APPN|ENTERPRISE|VIP" ;; #gs-ajv-m
        -gs-cd)    CWFEATURE="COMM-SERV|DESKTOP" ;; # gs-cd
        -gs-cd-*)  CWFEATURE="COMM-SERV|DESKTOP" ;; # gs-cd-f gs-cd-l
        -gs-dr-*)  CWFEATURE="DESKTOP|IBM"  ;; # gs-dr-f gs-dr-m gs-dr-r gs-dr-l
        -gs-im-*)  CWFEATURE="IP|RMON"       ;; # gs-im-r gs-im-m gs-im-l gs-im-f
        -gs-imn-*) CWFEATURE="IP|RMON|IPX"   ;; # gs-imn-l
        -gs-imnr-*) CWFEATURE="IP|RMON|IPX|IBM" ;; #gs-imnr-l
        -gs-imr-*) CWFEATURE="IP|RMON|IBM"  ;; # gs-imr-r gs-imr-m gs-imr-l gs-imr-f
        -gs-in-*)  CWFEATURE="IP|IPX"        ;; # gs-in-f gs-in-l gs-in-m gs-in-r
        -gs-inr-*) CWFEATURE="IP|IPX|IBM"   ;; # gs-inr-f gs-inr-l gs-inr-m gs-inr-r 
        -gs-ins-*) CWFEATURE="IP|IPX|PLUS"    ;; # gs-isn-f gs-isn-l gs-isn-m gs-isn-r 
        -gs-ir-*)  CWFEATURE="IP|IBM"       ;; # gs-ir-f gs-ir-l gs-ir-m gs-ir-r 
        -gs-jm-*)  CWFEATURE="ENTERPRISE|RMON" ;; #gs-jm-r gs-jm-m gs-jm-l gs-jm-f
        -gs-jv-*)  CWFEATURE="ENTERPRISE|VIP" ;; #gs-jv-m
        -gs-k-*)   CWFEATURE="ENTERPRISE"    ;; # gs-k-l ???
	-gs-kv-*)  CWFEATURE="ENTERPRISE|VIP" ;; #gs-kv-m
        -gs-l-*)   CWFEATURE="SECURE"        ;;
        -gs-n-*)   CWFEATURE="IPX"           ;;

        # known 'unknown' images
        -gs-i)       CWFEATURE="UNKNOWN" ;; # IP+BRIDGE in RAM
        -gs-kpgen)   CWFEATURE="UNKNOWN" ;; # ENTERPRISE + PGEN in RAM
        -gs-ktcl)    CWFEATURE="UNKNOWN" ;; # internal testing only
        -gs-m)       CWFEATURE="UNKNOWN" ;; # gs with no special features
        -gs-manu)    CWFEATURE="UNKNOWN" ;; # used by manufacturing only
        -gs-nsp)     CWFEATURE="UNKNOWN" ;;
        -gs-pgen)    CWFEATURE="UNKNOWN" ;; # PGEN in RAM
        -gs-r)       CWFEATURE="UNKNOWN" ;;
        -gs-rem)     CWFEATURE="UNKNOWN" ;; # internal engineering testing only
        -gs-rx)      CWFEATURE="UNKNOWN" ;; # GS + ISDN + X25 in ROM
        -gs-s)       CWFEATURE="UNKNOWN" ;;
        -gs-x)       CWFEATURE="UNKNOWN" ;; # GS + X25 in RAM
        -test)       CWFEATURE="UNKNOWN" ;;
        -xx-ipr)     CWFEATURE="UNKNOWN" ;;

        # trunkd test images not to be managed by CiscoWorks
        -trunkd-aipxo)      CWFEATURE="UNKNOWN" ;;
        -trunkd-apolloonly) CWFEATURE="UNKNOWN" ;;
        -trunkd-atonly)     CWFEATURE="UNKNOWN" ;;
        -trunkd-atws)       CWFEATURE="UNKNOWN" ;;
        -trunkd-clnsonly)   CWFEATURE="UNKNOWN" ;;
        -trunkd-dialer)     CWFEATURE="UNKNOWN" ;;
        -trunkd-dnonly)     CWFEATURE="UNKNOWN" ;;
        -trunkd-dtw)        CWFEATURE="UNKNOWN" ;;
        -trunkd-fronly)     CWFEATURE="UNKNOWN" ;;
        -trunkd-iponly)     CWFEATURE="UNKNOWN" ;;
        -trunkd-ipxonly)    CWFEATURE="UNKNOWN" ;;
        -trunkd-lite)       CWFEATURE="UNKNOWN" ;;
        -trunkd-moponly)    CWFEATURE="UNKNOWN" ;;
        -trunkd-smdsonly)   CWFEATURE="UNKNOWN" ;;
        -trunkd-snap)       CWFEATURE="UNKNOWN" ;;
        -trunkd-snmponly)   CWFEATURE="UNKNOWN" ;;
        -trunkd-tbonly)     CWFEATURE="UNKNOWN" ;;
        -trunkd-tiny)       CWFEATURE="UNKNOWN" ;;
        -trunkd-vaxonly)    CWFEATURE="UNKNOWN" ;;
        -trunkd-vinesonly)  CWFEATURE="UNKNOWN" ;;
        -trunkd-x25only)    CWFEATURE="UNKNOWN" ;;
        -trunkd-xnsonly)    CWFEATURE="UNKNOWN" ;;

        # everything else
        *)                  CWFEATURE="UNKNOWN" ;;
    esac
    if [ "x\$CWFEATURE" = "x" ]; then CWFEATURE="UNKNOWN"; fi
fi
if [ "x\$CWMEDIA" = "x" ]; then 
    case \$HWSW in
        # historical names
        -bt-r)       CWMEDIA="ROM"         ;; # ROM wo/WAN netboot
        -bt-rx)      CWMEDIA="ROM"         ;; # ROM w/WAN netboot
        -bt-s)       CWMEDIA="ROM"         ;; # RAM wo/WAN netboot w/FLASH
        -bt-x)       CWMEDIA="RAM"         ;; # RAM w/WAN netboot
        -cs-desktop) CWMEDIA="RAM"         ;;
        -cs-e)       CWMEDIA="RAM"         ;; # CS small experimental
        -cs-h)       CWMEDIA="RAM"         ;; # for hosed hardware
        -cs-iponly)  CWMEDIA="RAM"         ;;
        -cs-k)       CWMEDIA="RAM"         ;;
        -cs-kr)      CWMEDIA="ROM"         ;;
        -cs-ts)      CWMEDIA="RAM"         ;;
        -gs-b)       CWMEDIA="RAM"         ;; # BRIDGE in RAM
        -gs-bfpx)    CWMEDIA="FLASH"       ;; # ENTERPRISE + PT
        -gs-bprx)    CWMEDIA="ROM"         ;; # ENTERPRISE + PT
        -gs-bpx)     CWMEDIA="RAM"         ;; # ENTERPRISE + PT
        -gs-br)      CWMEDIA="ROM"         ;; # BRIDGE in ROM
        -gs-brx)     CWMEDIA="ROM"         ;; # BRIDGE + X25 in ROM
        -gs-bx)      CWMEDIA="RAM"         ;; # BRIDGE + X25 in RAM
	-gs-d)       CWMEDIA="RAM"         ;;
	-gs-i)       CWMEDIA="RAM"         ;;
	-gs-in)      CWMEDIA="RAM"         ;;
        -gs-k)       CWMEDIA="RAM"         ;;
        -gs-kf)      CWMEDIA="FLASH"       ;; # old-style name
        -gs-kr)      CWMEDIA="ROM"         ;;
        -gs-m)       CWMEDIA="RAM"         ;;
        -gs-s)       CWMEDIA="RAM"         ;;
        -pt-lrx)     CWMEDIA="ROM"         ;; # PT in ROM
        -pt-lx)      CWMEDIA="RAM"         ;; # PT in RAM

        # new naming scheme
        -gs-*-c)     CWMEDIA="PCMCIA"      ;; # (flash credit card) wrapper
        -gs-*-f)     CWMEDIA="FLASH"       ;;
        -gs-*-l)     CWMEDIA="RELOCATABLE" ;;
        -gs-*-m)     CWMEDIA="RAM"         ;;
        -gs-*-r)     CWMEDIA="ROM"         ;;
        *)           CWMEDIA="UNKNOWN"     ;;
    esac
    if [ "x\$CWMEDIA" = "x" ]; then CWMEDIA="UNKNOWN"; fi
fi

#Added to distinguish between different trains in the banner
if [ -n "\$TRAIN_HEADER" ]; then
    train_header="\$TRAIN_HEADER";
else
    train_header="";
fi


echo \#include \"master.h\" > cisco.c
echo \#include \"../os/sum_magic_number.h\" >>cisco.c
echo \#ifdef str >>cisco.c
echo \#undef str >>cisco.c
echo \#endif >>cisco.c
echo \#define str\(s\) \#s >>cisco.c
echo \#ifdef xstr >>cisco.c
echo \#undef xstr >>cisco.c
echo \#endif >>cisco.c
echo \#ifndef CW_MAX_DESCR_STRLEN >>cisco.c
echo \#define CW_MAX_DESCR_STRLEN 512 >>cisco.c
echo \#endif >>cisco.c
echo \#ifndef CW_MAX_STRLEN >>cisco.c
echo \#define CW_MAX_STRLEN 64 >>cisco.c
echo \#endif >>cisco.c
echo \#define xstr\(s\) str\(s\) >>cisco.c
echo \#ifdef verno >>cisco.c
echo \#undef verno >>cisco.c
echo \#endif >>cisco.c
echo \#define verno xstr\(SYS_MAJORVERSION\) \".\" \\\\ >>cisco.c
echo xstr\(SYS_MINORVERSION\) \"\(\$minor_version\)\$train_header\" >>cisco.c
echo \#define oemsysdescr \"\$ARGDESC, \${build_ver} \" \\\\ >>cisco.c
echo verno \\\\ >>cisco.c
echo \"\${build_type}\\\\\\\\n\" >>cisco.c

echo \#define compiled \"Compiled \`date +"%a %d-%h-%y %H:%M"\` by \$USER\" >>cisco.c
echo \#define ios_string \"Cisco Internetwork Operating System Software \\\\\\\\nIOS \(tm\) \" >>cisco.c
echo \#define sysdescr ios_string oemsysdescr \\\\ >>cisco.c
echo \"Copyright \(c\) 1986-19\`date +"%y"\` by cisco Systems, Inc.\\\\\\\\n\" \\\\ >>cisco.c
echo compiled >>cisco.c

echo static char cw_begin\[\] = \"CW_BEGIN\$\" \"\$HWSW\$\"\; >>cisco.c
echo char cw_image\[CW_MAX_STRLEN\] = \"CW_IMAGE\$\" \"\$CWIMAGE\$\"\; >>cisco.c
echo static char cw_family\[\] = \"CW_FAMILY\$\" \"\$CWFAMILY\$\"\; >>cisco.c
echo static char cw_feature\[\] = \"CW_FEATURE\$\" \"\$CWFEATURE\$\"\; >>cisco.c
echo char cw_version\[CW_MAX_STRLEN\] = \"CW_VERSION\$\" verno \"\$\" \;>>cisco.c
echo static char cw_media\[\] = \"CW_MEDIA\$\" \"\$CWMEDIA\$\"\; >>cisco.c
echo char cw_sysdescr\[CW_MAX_DESCR_STRLEN\] = \"CW_SYSDESCR\$\" >>cisco.c
echo sysdescr >>cisco.c
echo \"\$\"\; >>cisco.c
echo static char cw_end\[\] = \"CW_END\$\" \"\$HWSW\$\" \; >>cisco.c

echo char cw_ciscoversion\[CW_MAX_DESCR_STRLEN\] = sysdescr \; >>cisco.c
echo char cw_oemversion\[CW_MAX_DESCR_STRLEN\] = oemsysdescr compiled \; >>cisco.c
echo char *ciscoversion = cw_ciscoversion\; >>cisco.c
echo char *oemversion = cw_oemversion\; >>cisco.c
echo \#ifndef cw_struct_ >>cisco.c
echo \#define cw_struct_ >>cisco.c
echo struct cw_struct \{ char *ptr\; unsigned short size\; \}\; >>cisco.c
echo \#endif >>cisco.c
echo struct cw_struct cw_table\[\] = \{ >>cisco.c
echo \{cw_begin, sizeof cw_begin \}, >>cisco.c
echo \{cw_image, sizeof cw_image\}, >>cisco.c
echo \{cw_family, sizeof cw_family\}, >>cisco.c
echo \{cw_feature, sizeof cw_feature\}, >>cisco.c
echo \{cw_version, sizeof cw_version\}, >>cisco.c
echo \{cw_media, sizeof cw_media\}, >>cisco.c
echo \{cw_sysdescr, sizeof cw_sysdescr\}, >>cisco.c

echo \{cw_end, sizeof cw_end \}, >>cisco.c
echo \{0, 0\} \}\; >>cisco.c
echo int cw_table_cnt = sizeof\(cw_table\)/sizeof\(struct cw_struct\)\; >>cisco.c

echo "$trunk_rev [$copy_name \$v], \$ARGDESC, \`date +'%a %d-%h-%y %H:%M'\` by \$USER" >> .compiles
if [ cisco\$HWSW.c != cisco.c ]; then
	rm -f cisco\$HWSW.c
	cp cisco.c cisco\$HWSW.c
	echo generated cisco\$HWSW.c
	if [ -n "\$COMP" ]; then
		\$COMP -nostdinc -nostdlib -I../h -D\$ARGSYS -O -c cisco\$HWSW.c
		echo generated cisco\$HWSW.o
	fi
else
	\$ARGCOMP -pipe -nostdinc -nostdlib -c -I../h -D\$ARGSYS cisco.c
fi
@@E_O_F
chmod +x cisco.sh
