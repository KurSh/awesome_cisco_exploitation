# $Id: dlc_registry.reg,v 3.4.6.1 1996/05/17 10:42:21 ppearce Exp $
# $Source: /release/112/cvs/Xsys/cls/dlc_registry.reg,v $
#-----------------------------------------------------------------
# dlc registry - for functions called dlc subsystems
#
# 1/8/95 - Richard Livingston
#
# Copyright (c) 1995-1996 by cisco Systems, Inc.
# All rights reserved.
#------------------------------------------------------------------
# $Log: dlc_registry.reg,v $
# Revision 3.4.6.1  1996/05/17  10:42:21  ppearce
# Merge IbuMod into Calif
#
# Revision 3.3.14.3  1996/04/05  06:05:26  schiang
# Branch: IbuMod_Calif_branch
# merge ncia server code
#
# Revision 3.3.14.2  1996/03/28  08:19:33  pmorton
# Merge VDLC fixes to IbuMod_Calif_branch
#
# Revision 3.3.14.1  1996/03/17  17:36:48  ppearce
# Sync IbuMod_Calif_branch to V111_1_3
#
# Revision 3.2.4.1  1995/12/17  09:50:08  pmorton
# Branch: Cal_Ibm_branch
# VDLC Check-in.  This is the working base for all DLUs
#
# Revision 3.2  1995/11/17  08:55:36  hampton
# Remove old entries from the RCS header logs.
#
# Revision 3.1  1995/11/09  11:11:40  shaker
# Bump version numbers from 2.x to 3.x.
#
# Revision 2.6  1995/11/08  20:53:13  shaker
# Merge Arkansas_branch into 11.1 mainline.
#
# Revision 2.5  1995/09/07  04:38:24  kpatel
# CSCdi39871:  DLSw+ does not interoperate with remote window size
#              of one
#
# Revision 2.4  1995/07/31  18:58:27  ppearce
# CSCdi37939:  Eliminate use of CLS_P_TYPE_NUMBERS from DLSw+
#
# Revision 2.3  1995/07/19  20:58:27  pmorton
# CSCdi25556:  dynamic mapping between x121 and qllc virtual mac
# addresses.
# Dynamic mapping implemented by DLSw+ over qllc.
# Add support for Activate/Deactivate Ring
#
# Revision 2.2  1995/06/15  22:59:56  ppearce
# CSCdi35921:  CLS/RSRB virtual ring not removed after "appn stop"
#
# Revision 2.1  1995/06/07  20:20:17  hampton
# Bump version numbers from 1.x to 2.x.
#
#------------------------------------------------------------------
# $Endlog$

# Syntax for defining a registry
#
# Each item must begin a line of its own.
# Lines may be continued by ending with a \
#
# BEGIN REGISTRY <name of registry>
#
# DEFINE <name of service point>
# /* <comment lines in standard C format describing the
#     registry. These will be reformatted unless they are
#     in the comment bar format> */
# DATA
#    <Lines of text to be copied from the input to the
#     between the comment and the function declaration>
# END DATA
#    <type of service> := LIST | LOOP | STUB | CASE | RETVAL | VALUE
#    <type declaration of value returned by called function>
#              must be void for LIST and CASE, boolean
#              for LOOP, and ulong for VALUE.
#    <prototype list for called function>
#    <number of cases for case service>
#    <type for case statement>
# END
#
# END REGISTRY
#
#
# CONTENTS (and notes about work needed)
# cls_rput - routine for messages from dlc to cls
# dlc_wput - routine for messages from cls to dlc's
# cls_assert - print message, dump - need to move to the os general
# llc2EnableReq - create a vring - need to move to be parser driven
# llc2DisableReq - remove a vring - need to move to be parser driven
# cls_CreateLak - here because driven from llc's xid handler, could
#                 be re-thunk, but lack starts in llc2 connectionless flows.
#		  Registered because llc2 ships without srb, - for x.25 in
#		  the comserver image.
# cls_remove_vring - remove CLS vring interface [ from CLSDluDestroy() ]
# trmac2lak - given a mac addr, find the lackie.  registered for the same
#	      reason that cls_CreateLak above is registered.
# dlsw_running - boolean, used to prevent calling dlsw routines when dlsw
#                is not configured.  However, the routine itself might not
#                be there if DLSw doesn't ship in the image, therefore, the
#		 routine is registered as a stub.

BEGIN REGISTRY DLC

DEFINE	cls_rput
/*
 * CLS input hook for CLS messages & data frames from DLC's.
 */	
	STUB
	void
	ClsUCepIdT uCepId, ClsOpcodeT opCode, ClsDlcParamBlockT* pb
END

DEFINE dlc_wput
/*
 *  CLS output hooks to various DLC types as defined in "h/cls_types.h"
 */
       CASE
       void
       DlcPCepIdT pCepId, DlcOpcodeT opCode, ClsDlcParamBlockT* pb      
       CLS_MAXDLC
       CLSDLCType_e clsDLCPortType
END

DEFINE  cls_assert
/*
 * Take a break while the router reloads!
 */
 	STUB
	void
	char* file, int line, char *exp, boolean fatal
END

DEFINE  llc2EnableReq
/*
 * Enable the llc2 port on the interface (or virtual interface)
 */
 	STUB
	void
	llctype *pCepId, ClsDlcParamBlockT *clsParamBlock

END
DEFINE  llc2DisableReq
/*
 * Disable the llc2 port on the interface (or virtual interface)
 */
 	STUB
	void
	llctype *pCepId, ClsDlcParamBlockT *clsParamBlock

END
DEFINE  llc2ActivateRngReq
/*
 * Enable the llc2 port's ring copy function on the interface (or
 * virtual interface).  'Ring copy' is defined as promiscuous copy as
 * appropriate to DLC interface.  For TKR, it activates real rings.  For
 * Transparent Bridging, enable bridging code.
 */
 	STUB
	void
	llctype *pCepId, ClsDlcParamBlockT *clsParamBlock

END
DEFINE  llc2DeActivateRngReq
/*
 * Disable the llc2 port's ring copy function on the interface (or
 * virtual interface).  See comment above for llc2ActivateRngReq...
 */
 	STUB
	void
	llctype *pCepId, ClsDlcParamBlockT *clsParamBlock

END

DEFINE  cls_CreateLak
/*
 * Enable the llc2 port on the interface (or virtual interface)
 */
 	STUB
	void
	llctype *llc, paktype *pak


END

DEFINE  cls_remove_vring
/*
 * Remove CLS vring interface
 */
 	STUB
	void
	idbtype *idb


END

DEFINE  trmac2lak
/*
 * given a mac address, find the corresponding local-ack entry
 * This should *NOT* be part of the interface boundary, should
 * be looked upon as a temporary measure, needed for splitting
 * llc2 and RSRB.
 */
 	STUB
	lak_t* 
	paktype *pak, uchar *entity, boolean fromnet

END

DEFINE dlsw_running
/*
 * boolean test to see if dlsw peer has been configured
 */
 	STUB
	boolean
	ulong sport, ulong dport, ipaddrtype fhost
END

DEFINE dlsw_get_ring_req
/*
 * pull the next pending Activate_Ring request off the queue
 * or build it in the ususal way.
 */
	RETVAL
	TCLSIMsg *
	idbtype *swidb
	CLS_MAXDLC
	CLSDLCType_e clsDLCPortType
END

DEFINE dlsw_queue_cls_message
/*
 * Pass a CLSI message to DLSw so that it can be passed
 * to CLS within DLSw's context
 */
	STUB
	void
	TCLSIMsg	*theMsg
END

DEFINE ucep_cantput
/*
 * boolean test to see if dlu can take data for a particular cep
 */
        RETVAL
        boolean
        word UCepId, boolean queueempty
        0
        uint DluReadQueue
END

DEFINE lnm_get_ring_req
/*
 * pull the next pending Activate_Ring request off the queue
 * or build it in the ususal way.
 */
	RETVAL
	TCLSIMsg *
	idbtype *swidb
	CLS_MAXDLC
	CLSDLCType_e clsDLCPortType
END

DEFINE lnm_queue_cls_message
/*
 * Pass a CLSI message to LNM so that it can be passed
 * to CLS within LNM's context
 */
	STUB
	void
	TCLSIMsg	*theMsg
END

DEFINE dlsw_add_cache
/*
 * Add a mac address to a DLSW cache
 */
	STUB
	boolean
	uchar		*macaddr
END

DEFINE vdlc_default_port
/*
 * Add/remove a vdlc default port when ring-group is created/deleted
 */
	STUB
	void
	tr_vgrouptype	*vrg,	\
	uchar		*vmac,	\
	boolean		sense
END

DEFINE dlsw_get_sap
/*
 * Get the Dlsw U Sap Id (at the DLU layer)
 *
 * based on the DLC type
 */
	RETVAL
	ClsUSapIdT
	hwidbtype	*idb
	CLS_MAXDLC
	CLSDLCType_e	clsDLCPortType
END

DEFINE cls_is_tbridge_type
/*
 * Return TRUE if it is a vidb for TBRIDGE.
 */
        STUB
        boolean
        hwidbtype *idb
END

DEFINE cls_get_rsrb_ring
/*
 * Return rsrb virtual ring number.
 */
        STUB
        ushort
        ushort rsrb_ring
END

DEFINE cls_get_rsrb_bridge
/*
 * Return rsrb bridge numner.
 */
        STUB
        uchar
        ushort rsrb_ring
END


DEFINE dlsw_set_enable_req
/*
 * Set up the enable request.
 */
       CASE
       void
       EnableReq_t *enableReq
       CLS_MAXDLC
       CLSDLCType_e clsDLCPortType
END


DEFINE ncia_running
/*
 * boolean test to see if ncia peer has been configured
 */
        STUB
        boolean
        ulong sport, ulong dport, ipaddrtype fhost
END

	
END REGISTRY DLC


