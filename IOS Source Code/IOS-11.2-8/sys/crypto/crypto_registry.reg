# $Id: crypto_registry.reg,v 3.1.64.12 1996/08/09 23:29:44 xliu Exp $
# $Source: /release/112/cvs/Xsys/crypto/crypto_registry.reg,v $
#------------------------------------------------------------------
# crypto_registry.reg
#
# crypto subsystem registry file. 
#
# 12, 1995, Xliu 
#
# Copyright (c) 1995-1996 by cisco Systems, Inc.
# All rights reserved.
#------------------------------------------------------------------
# Revision 3.1.2.1  1995/12/11  21:34:44  xliu
# Branch: IosSec_branch
# Add crypto registry files.
#
# Revision 3.1  1995/12/11  20:57:07  xliu
# Placeholder files.
#
# Revision 1.7  1995/06/07 12:03:03  smackie
# Fold back Arizona_branch into mainline.
#
#------------------------------------------------------------------
# $Endlog$
#
#
#
# Syntax for defining a registry
#
# Each item must begin a line of its own.
# Lines may be continued by ending with a \
#
# BEGIN REGISTRY <name of registry>
#
# DEFINE <name of service point>
# /* <comment lines in standard C format describing the
#     registry. These will be reformatted unless they are
#     in the comment bar format> */
# DATA
#    <Lines of text to be copied from the input to the
#     between the comment and the function declaration>
# END DATA
#    <type of service> := LIST | LOOP | STUB | CASE | RETVAL | VALUE
#    <type declaration of value returned by called function>
#              must be void for LIST and CASE, boolean
#              for LOOP, and ulong for VALUE.
#    <prototype list for called function>
#    <number of cases for case service>
#    <type for case statement>
# END
#
# END REGISTRY
#
#

BEGIN REGISTRY CRYPTO 

DEFINE crypto_engine_register_crypto_vectors 
/* 
 * Called to register the either RP or RSP crypto vectors to a given idb. 
 */
        LIST
	void
        hwidbtype *hwidb, void *head
END 

DEFINE crypto_engine_restore_media_vectors
/*
 * Called to restore the meida vectors to a given idb
 */
	LIST
	void
	hwidbtype *hwidb, void *head
END

DEFINE crypto_engine_req_remote_dspt
/*
 * Called to send the key request to vip
 */
	LIST
	void
	ushort crypto_engine_id, \
	void *blk
END

DEFINE crypto_map_check
/*
 * Called to check crypto maps
 */
	STUB
	boolean
	paktype *pak, char *crypto_map, int action, boolean fastswitch
END

DEFINE crypto_rsp_register_ip_turbo_fs 
/* 
 * Called to register the crypto vectors to a given idb. 
 */
        LIST
	void
        hwidbtype *hwidb
END

DEFINE crypto_engine_rsp_conf_init
/*
 * Called by crypto engine to init rsp conf
 */
	LIST
	void
	void* conf,  void*idb

END

DEFINE crypto_show_flow_info
/*
 * Called to show ip flow cache crypto info
 */
        LIST
        void
        ipaddrtype prefix, \
        ipaddrtype mask, \
        idbtype *idb
END

DEFINE crypto_engine_vip_upd_map
/*
 * Called by vip ipc callback to update crypto map on vip 
 * crypto fastsend vector.
 */
	LIST
	void
	uchar *msg
END

DEFINE crypto_vip_map_head_add 
/*
 * Called to add crypto map head to vip
 */
	LIST
	void
	void *head
END

DEFINE crypto_show_vip_conn_tbl
/*
 * Called to display connection table maintained by specific vip. 
 */
	LIST
	void
        int slot
END

DEFINE crypto_vip_map_add
/*
 * Called to add crypto map to vip
 */
	LIST
	void
	char *map
END

DEFINE crypto_vip_map_delete
/*
 * Called to delete the crypto map from vip
 */
	LIST
	void
	char *map
END

DEFINE crypto_vip_map_head_delete
/*
 * Called to delete the crypto map from vip
 */
	LIST
	void
	uchar *tag
END

DEFINE crypto_vip_assign_map_to_int
/*
 * Called to assing crypto map to an interface
 */
	LIST
	void
	hwidbtype* idb, void *head
END

DEFINE crypto_vip_map_set_peupe
/*
 * Called to set pe/upe for a given map
 */
	LIST
	void
	char *map
END

DEFINE crypto_vip_map_set_modeflags
/*
 * Called to set special mode flags for a given map
 */
	LIST
	void
	char *map
END


DEFINE crypto_vip_upd_map_conn_id
/*
 * Called to set pe/upe for a given map
 */
	LIST
	void
	char *map, int old_id
END

DEFINE crypto_engine_recv_key_request
/*
 * Called by vip ipc callback to send the key request
 * to EPA.
 */
	LIST
	void
	uchar *msg
END

DEFINE crypto_engine_rsp_ipc_callback
/*
 * Called by ip dfs ipc callback to forward crypto related request. 
 * to EPA.
 */
	LIST
	void
	void *msg
END

DEFINE crypto_ipcache_add_callback
/*
 * Called to add crypto encap vector to ip cache entry
 */
	LIST
	void
	ipcache_rntype *entry
END

DEFINE crypto_engine_vip_get_maps
/*
 * Called to download crypto maps to vip 
 */
	LIST
 	void	
	-
END

DEFINE crypto_engine_vip_register_evector
/*
 * Called to register crypto vector to encapinfotype 
 */
	LIST
 	void	
        void *eptr
END

DEFINE crypto_config_epa
/*
 * Called to config the epa card
 */
	LIST
	void
	ushort id, uchar* passwd, ushort size
END

DEFINE crypto_show_card_status
/*
 * Called to show the epa card status
 * parameter slot specifies slot in which ESA is present
 * print_status indicates whether status should be printed to tty
 */
	LIST
	void
	ushort slot, boolean print_status
END

DEFINE crypto_card_cfg_comm
/*
 * Called to config card 
 */
	LIST
	void
	ushort slot
END
DEFINE crypto_snmp_conn_update
/*
 * Update connection information for SNMP
 */
	LIST
	void
	- 
END

DEFINE get_slot_serial_number
/* 
 * Called to get platform serial id
 */
	STUB
        ulong
	ushort slot
END

DEFINE get_processor_serial_number
/* 
 * Called to get platform serial id
 */
	STUB
        ulong
	-
END


DEFINE crypto_remove_dfs
/*
 * Called to remove a distributed switching flag from a vip interface 
 */
	LOOP
        boolean
        idbtype *idb
END

DEFINE crypto_add_connection_idb
/*
 * Called to add output idb for the given flow and the given conn to the table.
 */
        LIST
        void
        hwidbtype *idb, ushort conn_id
END

DEFINE crypto_invalidate_ip_cache
/*
 * Called to invalidate all the ip cache entries whose idb is assoicated
 * with the given connection. The corresponsing flow entries are reset
 * when the flow is invoked to match the packets.
 */
        LIST
        void
        ushort conn_id
END

DEFINE crypto_engine_key_timeout
/*
 * Called  when the key request timeout.
 */
        LIST
        void
        mgd_timer *timer
END

DEFINE crypto_dialer_propagate_map
/*
 * Called  by dialer parser to propagate the map and vector struct
 * from idb1 to idb2.
 */
        LIST
        void
  	hwidbtype* idb1, hwidbtype* idb2
END

DEFINE crypto_dialer_remove_map
/*
 * Called  by dialer parser to remove the map and vector struct
 * from idb1 to idb2.
 */
        LIST
        void
  	hwidbtype* idb1
END

END REGISTRY
