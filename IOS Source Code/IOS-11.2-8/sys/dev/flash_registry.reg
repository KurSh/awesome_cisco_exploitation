# $Id: flash_registry.reg,v 3.2.60.2 1996/07/24 22:05:47 widmer Exp $
# $Source: /release/112/cvs/Xsys/dev/flash_registry.reg,v $
#------------------------------------------------------------------
# flash_registry.reg - Service Points for Flash Registry
#
# Oct 1994, Eric Fronberg	
#
# Copyright (c) 1994-1997 by cisco Systems, Inc.
# All rights reserved.
#------------------------------------------------------------------
# $Log: flash_registry.reg,v $
# Revision 3.2.60.2  1996/07/24  22:05:47  widmer
# CSCdi60592:  Error: command buffer too small [OK]  Cant save to nvram
# Branch: California_branch
# Malloc buffer instead of using stack
# Improve intuitivness of logic
#
# Revision 3.2.60.1  1996/04/15  21:13:25  bcole
# CSCdi54649:  IP Host Modularity, IP Automatic Stub Routing feature
# commit
# Branch: California_branch
#
# Revision 3.2  1995/11/17  09:01:12  hampton
# Remove old entries from the RCS header logs.
#
# Revision 3.1  1995/11/09  11:20:02  shaker
# Bump version numbers from 2.x to 3.x.
#
# Revision 2.3  1995/11/08  20:54:13  shaker
# Merge Arkansas_branch into 11.1 mainline.
#
# Revision 2.2  1995/09/23  05:57:06  enf
# CSCdi39189:  100X need insurance against loading incorrect image
#
# Revision 2.1  1995/06/07  20:25:02  hampton
# Bump version numbers from 1.x to 2.x.
#
#------------------------------------------------------------------
# $Endlog$
#

#Syntax for defining a registry
#
# Each item must begin a line of its own.
# Lines may be continued by ending with a \
#
# BEGIN REGISTRY <name of registry>
#
# DEFINE <name of service point>
# /* <comment lines in standard C format describing the
#     registry. These will be reformatted unless they are
#     in the comment bar format> */
# DATA
#    <Lines of text to be copied from the input to the
#     between the comment and the function declaration>
# END DATA
#    <type of service> := LIST | LOOP | STUB | CASE | RETVAL | VALUE
#    <type declaration of value returned by called function>
#              must be void for LIST and CASE, boolean
#              for LOOP, and ulong for VALUE.
#    <prototype list for called function>
#    <number of cases for case service>
#    <type for case statement>
# END
#
# END REGISTRY
#
#

# 
# Flash specific registries
#

BEGIN REGISTRY FLASH


DEFINE        file_boot_in_place
/*
 * Index is FILE_ACCESS_xxxx
 * Check if file specified is bootable in-place or not.
 * Returns TRUE/FALSE if bootable in-place or not.
 */
      RETVAL
      boolean
      const char *filename, uchar **buff, ulong *buffersize
      0
      int file_proto
END

DEFINE flash_boot_verify
/*
 * Verify whether a file in flash can be booted up.
 * (Do some sanity checks)
 */
	STUB
	boolean
	uchar *image_ptr, ulong image_size, void *fs_info
END

DEFINE flash_download_verify
/*
 * Validate and identify a file being downloaded to flash. 
 * (Do some sanity checks)
 */
	STUB
	int
	void *parms, void *fs_info, boolean erase
END

DEFINE RFF_exec_check
/*
 * See if specified flash image can run in-place
 */
	STUB
	boolean
	uchar *image_ptr, ulong phy_start
END


DEFINE	flash_bootfile_default
/*
 * This function returns a pointer to the name of the first good
 * bootable file in flash, if it exists, else NULL.
 */
	STUB
	const char *
	-
END

DEFINE flash_file_match
/*
 * The function determines if the filenames input to the function
 * are equivalent (as opposed to an exact match)
 */
        STUB
        boolean
        char *file1, char *file2
END

DEFINE	flash_file_server
/*
 * Given a filename and a TFTP socket structure, see if we have the
 * specified file in flash (or eventually hard disk or whatever).
 * Use TFTP to send the file to the requestor.  Return TRUE if file
 * successfully sent.
 */
DATA
	typedef struct ipsocktype_ ipsock_;
END DATA
	STUB
	boolean
	ipsock_ *soc, const char *filename, boolean debug_flag
END


DEFINE  flash_device_driver_init
/*
 * Index is platform type + device type combined together.
 * Used to register the initialization function for a device.
 * returns void
 */
        CASE
        void
        void *dev
        0
        int type
END

DEFINE  flash_device_file_system
/*
 * Index is platform type + device type combined together.
 * Used to register the initialization function for a file system.
 * returns void
 */
        CASE
        void
        char *alias, boolean cksum_flag
        0
        int type
END


DEFINE  file_system_init
/*
 * Index is platform type + device type combined together.
 * This is the purge function for the file system.
 * returns void
 */
        CASE
        void
        int dh, ulong flags
        0
        int type
END

DEFINE  map_file_cksums
/*
 * Index is platform type + device type combined together.
 * This maps file systems from the existing partition set to the newly
 * created partition set.
 * returns boolean
 */
      CASE
      void
      void *ffs_old, void *ffs_new
      0
      int type
END

DEFINE  file_system_stat
/*
 * Index is platform type + device type combined together.
 * Used to register the info function for the file system.
 * returns void
 */
        RETVAL
        int
        flash_t *fsp, fsstat_t *ptr
        0
        int type
END


DEFINE  file_system_info
/*
 * Index is platform type + device type combined together.
 * Used to register the info display function for the file system.
 * returns void
 */
        CASE
        void
        flash_t *fsp, int flag
        0
        int type
END

DEFINE  file_system_sniff
/*
 * Index is platform type + device type combined together.
 * Used to register the sniff function for the file system.
 * returns void
 */
        CASE
        void
        char *nm, void *fsbounds
        0
        int type
END

DEFINE  file_system_mem_free
/*
 * Index is platform type + device type combined together.
 * Used to register the file system function that is used to
 * free up all the memory that was allocated by the file system
 * structures.
 * returns void
 */
        CASE
        void
        void *info_ptr, int flags
        0
        int type
END

DEFINE  flash_device_default
/*
 * Return alias of default flash device, NULL if none.
 */
	STUB
	char *
	-
END

DEFINE	flash_filename_parse
/*
 * Parse out file name components, if any
 */
	STUB
	void *
	const char *filename
END

DEFINE  flash_print_hardware
/*
 * Print out one-liners about each flash device found.
 * Called for "show version" output.
 */
	STUB
	void
	-
END

DEFINE flh_log_putc
/*
 * flash load helper logging put char request
 */
	CASE
	void
	char ch
	0
	int code
END

DEFINE flh_call
/*
 * Call to flash load helper
 */
	STUB
	int
	void *plb
END
	
DEFINE flh_version
/*
 * Determine whether boot ROMs support FLH; if so, get version number.
 */
	STUB
	int
	-
END

DEFINE flh_ok_check
/*
 * Call to check whether it's ok to proceed with FLH.
 */
	STUB
	boolean
	ulong prompt
END

DEFINE flh_invoke
/*
 * Invoke the FLH by an EMT call to the ROM monitor.
 */
	STUB
	void
	void *flh_parm
END

DEFINE copy_flhlog_tftp
/*
 * Copy FLH log to tftp server
 */
	STUB
	boolean
	void *copy_parms
END

DEFINE flh_check_parms
/*
 * Check the filenames for flh so that they don't overrun buffer
 */
	STUB
	boolean
	char *src_file, char *dst_file, int verbose, int copy_type
END

DEFINE classify_image
/*
 * Determine image type by examining first block of buffer
 */
	STUB
	ulong *
	uchar *buff, ulong *itype, void *info
END

DEFINE check_rel_image
/*
 * Do some validation checks on a relocatable image.
 */
	STUB
	boolean
	void *ptr, ulong bufsize
END

DEFINE replace_flash_devices_entry
/*
 * Replace the entry in the table of flash devices after
 * partitioning is done successfully.
 */
	STUB
	void
	char *devnm, void *dev
END

DEFINE allow_flash_partitioning
/*
 * Determine if partitioning of flash is to be allowed.
 */
        STUB
        boolean
        -
END 

DEFINE  rcp_flash_server
/*
 * flash server via rcp
 */
        STUB
        boolean
        void *mumble, char *name
END


DEFINE  write_to_flash
/*
 * write a buffer to flash as a file
 */
        STUB
        boolean
        void *tcb, char *filename, uchar *buffer, ulong buflen
END

DEFINE  flash_block_server
/*
 * Read a file out of flash block by block.
 * Returns TRUE/FALSE if read succeeded.
 */
DATA
typedef boolean (*clbk_func) (uchar **buf, long *bytesleft, long len,
                             void *opaque_args);
END DATA
        STUB
        boolean
        const char *filename, uchar *buff, ulong *buffersize, boolean verbose,\
        clbk_func function_called, void *func_arg
END

DEFINE  get_num_flash_part
/*
 * get the number of flash partitions 
 */
        STUB
        int
	-
END

DEFINE  multi_part_get_file_name
/*
 * get a file name out of a multi partitioned flash system
 */
        STUB
        boolean
	char *filename
END

DEFINE flash_needs_buffer
/*
 * some platforms need to copy data from flash into a buffer
 * before doing image checks.  This routine returns true if a buffer
 * is required
 */
	STUB
	boolean
	-
END

DEFINE	flash_config_enabled
/*
 * Check if the flash config flag is enabled.
 * Returns TRUE if yes.
 */
	STUB
	boolean
	-
END

DEFINE	config_buffer_to_startup
/*
 * Copy a config command buffer to startup config file.
 * Return size of the created file, or 0 if failed.
 */
	STUB
	int
	char *source, uint length, boolean vocal
END

DEFINE	access_flash_config
/*
 * Set up subsequent flash config access method: write/read/erase.
 */
	LIST
	void
	int flag
END

DEFINE	write_flash_config
/*
 * Write this configuration to flash and decide if it is a distilled config.
 * Returns TRUE if yes.
 */
	STUB
	boolean
	boolean newline, const char *string, va_list args
END

DEFINE	proc_flash_config
/*
 * Check if flash config starts.
 */
	LIST
	void
	parseinfo *csb, uint priv_flag
END

DEFINE	generate_nv_distilled_version
/*
 * Generate no-op version ff.ff into nvram to indicate
 * the config is distilled (if it is).
 */
	LIST
	void
	parseinfo *csb
END

DEFINE	default_flash_device
/*
 * Return default device id.
 */
	STUB
	char *
	-
END

DEFINE	rsp_flash_file_system
/*
 * Check the availability of the new file systems.
 * Returns TRUE if yes.
 */
	STUB
	boolean
	-
END

DEFINE image_family_check
/*
 * check image to see if it's approprite for this family
 */
	STUB
	int
	char *buf
END

DEFINE	rp_flash_show
/*
 * RP show flash redirector to support flash card
 */
	STUB
	boolean
	parseinfo *csb
END

DEFINE	rp_flash_file_length
/*
 * Redirect flash_file_length to flash card
 */
	STUB
	boolean
	const char *filename, long *length
END

DEFINE RFSS_watchdog_start
/*
 * Start a watchdog timer on old filesystem opens.
 */
        STUB
        void
		char *file_id, int fd
END

DEFINE RFSS_watchdog_stop
/*
 * Stop the watchdog timer (old filesystem opens).
 */
        STUB
        void
		int fd
END

DEFINE add_flash_prefix
/*
 * If the filename is old filesystem, prepends flash: prefix
 */
        STUB
        void
		char **filename_p, char *full_name
END

DEFINE flash_alias_match
/*
 *
 */
        STUB
	boolean
	char *alias
END

END REGISTRY FLASH
