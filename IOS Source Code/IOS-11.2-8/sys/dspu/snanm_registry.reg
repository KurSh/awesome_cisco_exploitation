# $Id: snanm_registry.reg,v 3.2.58.1 1996/05/17 10:49:35 ppearce Exp $
# $Source: /release/112/cvs/Xsys/dspu/snanm_registry.reg,v $
#------------------------------------------------------------------
# snanm_registry.reg - Service Points for SNA Network Management Registry
#
# Feb 1995, Barry Chan
#
# Copyright (c) 1994-1997 by cisco Systems, Inc.
# All rights reserved.
#
#------------------------------------------------------------------
# $Log: snanm_registry.reg,v $
# Revision 3.2.58.1  1996/05/17  10:49:35  ppearce
# Merge IbuMod into Calif
#
# Revision 3.2.46.2  1996/03/28  01:02:48  bchan
# CSCdi52724:  merge tn3280 server code
# Branch: IbuMod_Calif_branch
#
# Revision 3.2.46.1  1996/03/22  18:51:00  lmetzger
# Initial Version of Response Time Reporter
#
# Revision 3.2  1995/11/17  09:06:16  hampton
# Remove old entries from the RCS header logs.
#
# Revision 3.1  1995/11/09  11:30:03  shaker
# Bump version numbers from 2.x to 3.x.
#
# Revision 2.2  1995/11/08  20:56:41  shaker
# Merge Arkansas_branch into 11.1 mainline.
#
# Revision 2.1  1995/06/07  20:30:45  hampton
# Bump version numbers from 1.x to 2.x.
#
#------------------------------------------------------------------
# $Endlog$

BEGIN REGISTRY SNANM

DEFINE Ether_Alert
/* Ethernet alert */
  DATA
   typedef enum Ether_AlertType {
      Ether_Alert1,
      Ether_Alert2,
      Ether_Alert3,
      Ether_Alert4,
      Ether_Alert5,
      Ether_Alert6,
      Ether_Alert7,
      Ether_Alert8,
      Ether_Alert9,
      Ether_Alert10,
      Ether_Alert11,
      Ether_Alert12
    }Ether_AlertType;

  END DATA

	STUB
	void
	Ether_AlertType alertType, \
        hwidbtype*      idb
END



DEFINE TR_Alert
/* token ring alert */
  DATA
  typedef enum TR_AlertType {
    TrAlert1,
    TrAlert2,
    TrAlert3,
    TrAlert4,
    TrAlert5,
    TrAlert6,
    TrAlert7,
    TrAlert8,
    TrAlert9,
    TrAlert10,
    TrAlert11,
    TrAlert12,
    TrAlert13,
    TrAlert14     /* shutdown */
  }TR_AlertType;
END DATA
	STUB
	void
	TR_AlertType alertType, \
        hwidbtype*      idb
END



DEFINE Tcp_Alert
/* tcp ip alert */
DATA
END DATA
	STUB
	void
        conntype*      idb
END

DEFINE Dlc_Alert
/* dlc (hdlc, lapb)  alert */
DATA
  typedef enum Dlc_AlertType {
     Hdlc_keepAliveAlert,
     Lapb_keepAliveAlert,
     Hdlc_signalLostAlert
  }Dlc_AlertType;
END DATA
	STUB
	void
	Dlc_AlertType alertType, \
        hwidbtype*    idb
END

DEFINE Lanllc_Alert
/* llc2 alert */

DATA
  typedef enum Lanllc_AlertType {
   LanllcAlert1,
   LanllcAlert2,
   LanllcAlert3,
   LanllcAlert4,
   LanllcAlert5,
   LanllcAlert6,
   LanllcAlert7,
   LanllcAlert8,
   LanllcAlert9,
   LanllcAlert10,
   LanllcAlert11,
 }Lanllc_AlertType;
END DATA

	STUB
	void
	Lanllc_AlertType alertType, \
        llctype*      llc
END

DEFINE Cipllc_Alert
/* CIP llc2 alerts */

DATA
  typedef enum Cipllc_AlertType {
   CipllcAlert1,
   CipllcAlert2,
   CipllcAlert3,
   CipllcAlert4,
   CipllcAlert5,
   CipllcAlert6,
   CipllcAlert7,
   CipllcAlert8,
   CipllcAlert9,
   CipllcAlert10,
   CipllcAlert11,
   CipllcUnknownSapAlert,
   CipllcDupSapAlert,
   CipllcConnLimitExceededAlert,
 }Cipllc_AlertType;
END DATA

	STUB
	void
	Cipllc_AlertType alertType, \
        cip_llctype*     cipllc
END

DEFINE Tn3270s_Alert
/* CIP llc2 alerts */

DATA
  typedef enum Tn3270s_AlertType {
   Tn3270sAlert1,
   Tn3270sAlert2,
   Tn3270sAlert3,
   Tn3270sCPDL001,
   Tn3270sCPDL002,
   Tn3270sCPDL005,
   Tn3270sCPAM001,
   Tn3270sCPCS004,
   Tn3270sCPPL001  
 }Tn3270s_AlertType;

  struct tn3270s_data;
END DATA

	CASE
	void
	Tn3270s_AlertType alertType, \
        struct tn3270s_data*     Tn3270s_data
	0
        int a_type
END

DEFINE Lapb_Alert
/* lapb alert */
DATA
typedef enum Lapb_AlertType {
   LapbAlert1,
   LapbAlert2,
   LapbAlert3,
   LapbAlert4,
   LapbAlert5,
   LapbAlert6,
   LapbAlert7,
   LapbAlert8,
   LapbAlert9,
   LapbAlert10,
   LapbAlert11
}Lapb_AlertType;

END DATA
	STUB
	void
	Lapb_AlertType alertType, \
        hwidbtype *idb
END

DEFINE Qllc_Alert
/* qllc alert */
DATA
typedef enum Qllc_AlertType {
   QllcAlert1,
   QllcAlert2,
   QllcAlert3,
   QllcAlert4,
   QllcAlert5,
   QllcAlert6,
   QllcAlert7,
   QllcAlert8,
   QllcAlert9
}Qllc_AlertType;
END DATA
	STUB
	void
	Qllc_AlertType alertType, \
        qllctype*      qllc
END

DEFINE Sdlc_Alert

/* sdlc alert */
DATA
typedef enum Sdlc_AlertType {
   SdlcAlert1,
   SdlcAlert2,
   SdlcAlert3,
   SdlcAlert4,
   SdlcAlert5,
   SdlcAlert6,
   SdlcAlert7,
   SdlcAlert8,
   SdlcAlert9,
   SdlcAlert10,
   SdlcAlert11,
   SdlcAlert12,
   SdlcAlert13,
   SdlcAlert14,
   SdlcAlert15,
   SdlcAlert16
}Sdlc_AlertType;
END DATA
	STUB
	void
	Sdlc_AlertType alertType, \
        sdlc_data_block*      sdlc
END


DEFINE X25_Alert

/* X25 alert */
DATA
typedef enum X25_AlertType {
   X25Alert1,
   X25Alert2,
   X25Alert3,
   X25Alert4,
   X25Alert5,
   X25Alert6,
   X25Alert7,
   X25Alert8,
   X25Alert9,
   X25Alert10,
   X25Alert11,
   X25Alert17,
   X25Alert20, 
   X25Alert21
}X25_AlertType;
END DATA
	STUB
	void
	X25_AlertType alertType, \
        lcitype*      lci, \
        hwidbtype*      idb, \
        uchar* eventData
END


DEFINE Rtt_Alert
/* Rtt alert */
 
DATA
typedef enum Rtt_AlertType {
   rttMonConnectionChangeNotification_Alert,
   rttMonThresholdNotification_Alert,
   rttMonTimeoutNotification_Alert
} Rtt_AlertType;
END DATA
        STUB
        void
        Rtt_AlertType alertType, \
        long rttMonCtrlAdminIndex, \
        void *uniqueToken
END
 
 
DEFINE Rtt_Resolve
/* Rtt resolution */
 
DATA
typedef enum Rtt_ResolveType {
   rttMonConnectionChangeNotification_Resolve,
   rttMonThresholdNotification_Resolve,
   rttMonTimeoutNotification_Resolve
} Rtt_ResolveType;
END DATA
        STUB
        void
        Rtt_ResolveType resolveType, \
        long rttMonCtrlAdminIndex, \
        void *uniqueToken
END
 

DEFINE SendAlertToHost
/* Send Alert to host. The hierachy name list needed not be set if
 * they are defined in idb. idb can be null if no hierachy name to
 * be updated.
 */
        STUB
        void
        uchar* buffer,     \
        hwidbtype*   idb
END


DEFINE MV_SendAlert
/* Send preformatted Alert */
        STUB
	MV_SV_RC
        MV* buffer
END

DEFINE generateDSPUtrap
/*
 * Called to generate DSPU traps
 */
DATA
  typedef struct dspuTrap dspuTrap;
END DATA
        STUB
        void
        dspuTrap* pTrap
END

END REGISTRY
