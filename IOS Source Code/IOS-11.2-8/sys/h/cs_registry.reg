# $Id: cs_registry.reg,v 3.8.12.4 1996/06/16 21:11:41 vnguyen Exp $
#------------------------------------------------------------------
# cs_registry.reg - Service Points for Communications Server Registry
#
# 25-August-1993, Kirk Lougheed
#
# Copyright (c) 1993-1997 by cisco Systems, Inc.
# All rights reserved.
#
#------------------------------------------------------------------
# $Log: cs_registry.reg,v $
# Revision 3.8.12.4  1996/06/16  21:11:41  vnguyen
# Finally committing Brasil to California_branch
#
# Revision 3.8.12.3  1996/05/28  16:20:26  vandys
# CSCdi50153:  systat does not display ISDN access users
# Branch: California_branch
#
# Revision 3.8.12.2  1996/03/29  18:10:32  sjackson
# CSCdi52586:  Modem busyout cannot be used without autoconfig
# Changed the definition of the busyout allowed registry
# Branch: California_branch
#
# Revision 3.8.12.1  1996/03/28  18:36:26  sjackson
# CSCdi50364:  Modem autoconfig database should contain Microcom commands
# Branch: California_branch
#
# Revision 3.8  1996/02/14  19:36:42  asb
# CSCdi48113:  Should deliver NetBios NS [implement rest of RFC1877]
#
# Revision 3.7  1996/02/03  04:12:54  tkolar
# CSCdi47986:  IOS modem integration isnt quite there yet
# Add a way for the IOS to know if the modem switch has reserved the
# modem.
#
# Revision 3.6  1996/01/30  00:06:03  sjackson
# CSCdi47778:  Requirement for modem busyout without modem autoconfig
# Registry added to allow busyout without autoconfig
#
# Revision 3.5  1996/01/26  17:24:56  asb
# CSCdi46322:  Should return async-bootp dns-server instead of routers
# DNS server
#
# Revision 3.4  1996/01/12  20:04:11  sjackson
# CSCdi44704:  modem busyout command is needed
# Command added as an extension of the line modem autoconfigure
#
# Revision 3.3  1995/12/09  00:43:38  tkolar
# CSCdi45302:  Need a clean interface between modem hardware and
# commserver
# Make it easy to claim a tty for exclusive use by a process, and add a
# modem_busyout registry.
#
# Revision 3.2  1995/11/17  09:12:01  hampton
# Remove old entries from the RCS header logs.
#
# Revision 3.1  1995/11/09  11:34:58  shaker
# Bump version numbers from 2.x to 3.x.
#
# Revision 2.2  1995/11/08  20:58:25  shaker
# Merge Arkansas_branch into 11.1 mainline.
#
# Revision 2.1  1995/06/07  20:34:51  hampton
# Bump version numbers from 1.x to 2.x.
#
#------------------------------------------------------------------
# $Endlog$
#
#
# Syntax for defining a registry
#
# Each item must begin a line of its own.
# Lines may be continued by ending with a \
#
# BEGIN REGISTRY <name of registry>
#
# DEFINE <name of service point>
# /* <comment lines in standard C format describing the
#     registry. These will be reformatted unless they are
#     in the comment bar format> */
# DATA
#    <Lines of text to be copied from the input to the
#     between the comment and the function declaration>
# END DATA
#    <type of service> := LIST | LOOP | STUB | CASE | RETVAL | VALUE
#    <type declaration of value returned by called function>
#              must be void for LIST and CASE, boolean
#              for LOOP, and ulong for VALUE.
#    <prototype list for called function>
#    <number of cases for case service>
#    <type for case statement>
# END
#
# END REGISTRY
#
#

BEGIN REGISTRY CS


DEFINE	tn3270_conn_init1
/*
 * Summary: Initial half of TN3270 connection initialization.
 * Input: Connection on which to initiate TN3270.
 * Returns: NULL.
 * Comments:  Allocate memory for TN3270, curses, and termcap.
 */
	STUB
	int
	conntype *conn
END

DEFINE	tn3270_conn_init2
/*
 * Summary: Second half of TN3270 connection initialization.
 * Input: Connection on which TN3270 is being initiated.
 * Returns: NULL.
 * Comments: Initialize the TN3270 screen.
 */
	STUB
	void
	conntype *conn
END

DEFINE	tn3270_conn_terminate
/*
 * Summary: Terminate a TN3270 connection.
 * Input: Connection to terminate.
 *	  Unused boolean.
 * Returns: NULL.
 * Comments: Reset the screen and free memory for TN3270, curses, and termcap.
 */
	STUB
	void
	conntype *conn, boolean DoScreen
END

DEFINE	tn3270_conn_resume
/*
 * Summary: Resume a TN3270 session.
 * Input: Connection on which to resume the TN3270 session.
 * Returns: NULL.
 * Comments: Reset the screen color and redraw the screen.
 */
	STUB
	void
	conntype *conn
END 

DEFINE	tn3270_user_keypress
/*
 * Summary: Process an incoming character from the user's terminal.
 * Input: Character to process.
 *	  Connection the character is from.
 * Returns: NULL.
 */
	STUB
	void
	char ch, conntype *conn
END

DEFINE	tn3270_network_data
/*
 * Summary: Process TN3270 outbound data from an IBM host.
 * Input: Buffer containing data.
 *	  Length of buffer.
 *	  Unused integer.
 *	  Connection on which data was received.
 * Returns: NULL.
 */
	STUB
	void
	uchar *Buffer, int count, int control, conntype *conn
END

DEFINE	tn3270_end_of_packet
/*
 * Summary: Handle a received EOR (End of Record) for a connection.
 * Input: Connection on which EOR was received.
 * Returns: NULL.
 */
	STUB
	void
	conntype *conn
END

DEFINE	tn3270_terminal_type
/*
 * Summary: Get an IBM terminal type string for a terminal.
 * Input: TTY of interest.
 * Returns: Pointer to the IBM terminal type string.
 */
	STUB
	char *
	tt_soc *tty
END 

DEFINE	xremote_show_systat 
/*
 * Summary: Show XRemote system statistics.
 * Input: TTY of interest.
 * Returns: TRUE if anything was printed; FALSE otherwise.
 * Comments:  This function uses printf to list the X clients 
 *		associated with the TTY in a systat format.
 */
	STUB
	boolean
	tt_soc *tx
END



DEFINE	xremote_show_tcp 
/*
 * Summary: Show XRemote TCP.
 * Input: TTY of interest.
 * Returns: NULL.
 * Comments:  This function uses printf to list the X clients 
 *		associated with the TTY in a "show tcp" format.
 */
	STUB
	void
	tt_soc *tty	
END



DEFINE	xremote_tcp_conn 
/*
 * Summary: XRemote TCP connect.
 * Input: TCP connection.
 *	  TTY session for XRemote.
 * Returns: TRUE if the XRemote connection was opened; FALSE otherwise.
 */
	STUB
	boolean
	tcbtype *tcb, tt_soc *tty
END



DEFINE	xremote_tcp_check_access 
/*
 * Summary: XRemote TCP check access.
 * Input: TTY session for XRemote.
 *	  Remote host that is trying to get access.
 *	  TCP port on the remote host.
 *	  TCP port on the local host that the remote host is trying to access.
 * Returns: TRUE if access is permitted; FALSE otherwise.
 */
	STUB
	boolean
	tt_soc *tty, ipaddrtype fhost, ulong lport, ulong dport
END



DEFINE	xremote_create_tty_proc 
/*
 * Summary: Create an XRemote TTY process.
 * Input: TTY with which to associate the created process.
 * Returns: Always returns TRUE.
 * Comments:  This function creates a process for reverse XRemote.
 */
	STUB
	boolean
	tt_soc *tty
END



DEFINE	lat_sx_get_char 
/*
 * Summary: Get characters from a terminal and put them in a slot for X/LAT. 
 * Input: Switches on the X/LAT protocol. 
 *	  Pointer to a session block.
 *	  Pointer to the slot space.
 *	  Maximum size of the slot space.
 *	  Pointer to memory to be filled with amount of slot space taken.
 * Returns: NULL.
 * Comments:  Part of the XRemote-LAT interface.
 */
DATA
	typedef struct sb sbnode;
END DATA
	CASE
	void
	sbnode *sb_ptr, uchar *of_byte, int max, int *n
	0
	long sb_sc
END



DEFINE	lat_sx_put_char 
/*
 * Summary: Put characters into the user's terminal process for X/LAT.
 * Input: Switched on the X/LAT protocol. 
 *	  Pointer to a session block,
 *	  Pointer to a buffer of characters.
 *	  Length of the buffer.
 * Returns: NULL.
 * Comments: Part of the XRemote-LAT interface.
 */
	CASE
	void
	sbnode *sb_ptr, uchar *of_byte, int len
	0
	char sb_sc
END



DEFINE	lat_sx_session 
/*
 * Summary: Report changes in the X/LAT session status.
 * Input: Switches on the X/LAT protocol. 
 *	  Pointer to a session block.
 *	  New state the session.
 *	  Boolean that is set if the called function handled the change.
 * Returns: NULL.
 * Comments:  Part of the XRemote-LAT interface.
 */
	CASE
	void
	sbnode *sb_ptr, int reason, boolean *ret
	0
	char sb_sc
	
END



DEFINE	lat_ox_session 
/*
 * Summary: Change in the X/LAT session status.
 * Input: (not yet documented)
 * Returns: (not yet documented)
 * Comments: (not yet documented)
*/
DATA
	typedef struct ob obnode;
END DATA
	CASE
	void
	sbnode *sb_ptr, obnode *ob_ptr, int reason, boolean *ret
	0
	char sb_sc
END



DEFINE	xremote_hx_session 
/*
 * Summary: Open a new LAT connection.
 * Input: Pointer to LAT connection information.
 * Returns: Always returns TRUE.
 */
DATA
	typedef struct hi hinode;
END DATA
	STUB
	boolean
	hinode *hi_ptr
END



DEFINE	xremote_show_lat 
/*
 * Summary: Show the XRemote LAT.
 * Input: TTY of interest.
 * Returns: TRUE if anything was printed; FALSE otherwise.
 * Comments:  This function uses printf to list the X clients
 *            associated with the TTY in a "show lat" format.
 */
	STUB
	void
	tt_soc *tty
END

DEFINE	xremote_show_lat_font 
/*
 * Summary: Show XRemote LAT font sessions.
 * Input: NULL.
 * Returns: NULL.
 * Comments: This function uses printf to display the XRemote/LAT font 
 *		connections.
 */
	STUB
	void
	-
END

DEFINE	async_show_controllers
/*
 * Summary: Display controller data for each type of controller in the system.
 * Input: NULL.
 * Returns: NULL.
 * Comments: This function uses printf to list all the information for each
 * 		asynchronous controller in the system.
 */
	LIST
	void
	-
END

DEFINE	tty_birth
/*
 * Summary: Notify others that a process on a TTY has been created.
 * Input: Type of process.
 *  	  TTY on which the process was created.
 * Returns: NULL.
 */
	CASE
	void
	tt_soc *tty
	0
	int tty_process_type

END

DEFINE	chat_dial
/*
 * Summary: Cause a CHAT script to dial out on an interface.
 * Input: IDB on which to dial out.
 *	  ASCII representation of the number to dial.
 *	  Address of the dialer map.
 * Returns: TRUE if dialing was started.
 * Comments:  If this call is successful, it starts an "async dialer" 
 *	process that is associated with the IDB.
 */
	STUB
	boolean
	hwidbtype *idb, char *number, dialermaptype *addr

END

DEFINE	callback_initiate
/*
 * Summary: Initiate a callback on a TTY.
 * Input: User (the decision to call back, and where to call back to, is 
 *		 made on a per-user basis)
 *	  TTY with which  the user is currently associated.
 *	  Protocol for which  we are requesting a callback.
 *	  Boolean that specifies whether to free the user information 
 *			on failure.
 * Returns: TRUE if a callback was required.
 */
	STUB
	boolean
      usernametype *user, tt_soc *tty, int callback_type, boolean discard
END

DEFINE	callback_expired_tty
/*
 * Summary: Check whether the callback process on a line should expire, 
 * 		and/or reset the callback timer.
 * Input: TTY of interest.
 *        Boolean that specifies whether to reset the callback timer.
 * Returns: TRUE if the call killed the callback process on the TTY.
 * Comments: If the timer has expired, this function calls death() on
 *	the passed TTY to kill whatever process is waiting there (presumably
 *	a callback).
 */
	STUB
	boolean
      tt_soc *tty, boolean reset
END

DEFINE  callback_ppp_start
/*
 * Summary: Spawn a callback PPP process.
 * Input: TTY that the incoming user is on.
 *	  User information.
 *  	  Dialing information from the PPP negotiation.
 * Returns: TRUE if the callback process was successfully started.
 * Comments: This function spawns a callback PPP process because there is 
 *		no process context for asynchronous PPP links. The resulting 
 *		callback occurs based on the user information provided or, 
 *		if none is provided, on the dialer string.
 */
	STUB
	boolean
        tt_soc *tty, usernametype *info, char *dialstring
END

DEFINE  callback_enabled
/*
 * Summary: Check whether callback in enabled for a particular callback type.
 * Input: User to check on.
 *	  TTY user is on.
 *	  Protocol user is running.
 * Returns: TRUE if callback is enabled for that user running that protocol.
 */
	STUB
	boolean
        usernametype *user, tt_soc *tty, int callback_type
END

DEFINE clear_screen
/*
 * Summary: Clear the screen, that is, STDIO, for example, between menus.
 * Input: NULL.
 * Returns: NULL.
 */
	STUB
	void
	-

END

DEFINE	async_line_get_idb
/* 
 * Summary: Get the hwidb and swidb for a given TTY line.
 * Input:  Keyed on the TTY type.
 *	   Target TTY.
 *	   Pointer to a swidb pointer (to be filled with tty swidb)
 *	   Pointer to a hwidb pointer (to be filled with tty hwidb)
 * Returns: TRUE if hwidb and swidb are set; FALSE otherwise.
 */
	RETVAL
	boolean
	tt_soc *tty, idbtype **idb, hwidbtype **hwidb
	0
	int tty_type
END

DEFINE	async_handle_process
/* 
 * Summary: Run extra processing for a TTY line.
 * Input: Keyed on the TTY type:
 *	  TTY of interest.
 * Returns: NULL.
 */
	CASE
	void
	tt_soc *tty
	0
	int tty_type
END

DEFINE	async_handle_options
/* 
 * Summary: Handle the authentication options depending on the line type.
 * Input: Keyed on the TTY type:
 *	  TTY of interest.
 * Returns: NULL.
 * Comments: This registry is used with dynamic lines, such as VTYs, 
 * 		that must be configured on the fly. This registry is called 
 *		as soon as it is determined that the line will be using PPP.
 */
	CASE
	void
	tt_soc *tty
	0
	int tty_type
END

DEFINE async_trigger_startoutput
/*
 * Summary: Trigger startoutput() from the interrupt level for asynchronous
 *		interfaces.
 * Input: IDB of interest.
 * Returns: NULL.
 * Comments: Wake up the async fastswitch helper process after setting
 *	the ttymask so that this IDB is interesting.
 */
        STUB
        void
        hwidbtype *idb
END

DEFINE	slip_pt_supports_compression
/*
 * Summary: Return FALSE if this image does not support protocol translation.
 * Input: VTY of interest.
 * Returns: TRUE if the VTY supports compression.
 * Comments: This registry is implemented in this way because the 
 *	slip_exec parse chain needs to test for protocol translation
 *      compression parameters, and protocol translation may not be
 *	present in some images.
 */
        STUB
        boolean
        tt_soc *tty
END

DEFINE	pt_novell_get_owner_idb
/*
 * Summary: Get the Novell owner of a client IDB if it exists.
 * Input: IDB of interest.
 * Returns: Novell owner of the IDB, or NULL if none exists.
 * Comments: It is possible for Novell clients to attach to an IDB yet have 
 *	no Novell information of their own. Instead, these IDBs have pointers 
 *	to an owner Novell IDB. This function takes client's IDB and 
 *	returns the owner IDB.
 */
	STUB
	idbtype *
	idbtype *idb
END


DEFINE	pt_novell_pppclient_configure
/*
 * Summary: Configure PPP client mode for Novell if Novell is supported.
 * Input: IDB of the Novell owner.
 *	  IDB to use for the Novell client.
 *	  Boolean that is TRUE to configure PPP client mode and FALSE to
 *		unconfigure this mode.
 * Returns: NULL.
 */
	STUB
	void
	idbtype *target_idb, idbtype *idb, boolean sense
END

DEFINE  arap_start_pt_helper_process
/*
 * Summary: Start a protocol translation helper process for a VTY line 
 *            running ARAP.
 * Input: Keyed on the TTY type.
 * Returns: NULL.
 * Comments: For VTY lines, start a protocol translation helper process. 
 *             For TTY lines, just return.
 */
        CASE
        void
        tt_soc *tty
        0
        int tty_type
END

DEFINE	arap_callback_enabled
/*
 * Summary: Check whether ARAP callback is configured.
 * Input: NULL.
 * Returns: TRUE if arap_callback is enabled.
 */
	STUB
	boolean
        -
END

DEFINE	modem_autoconfigure
/*
 * Summary: Configure a modem using the internal modemcap database.
 * Input: TTY to which the modem is attached.
 * Returns: TRUE if the process was successfully started.
 * Comments: This registry starts a "Modem Autoconfigure" process 
 *	on the TTY that is passed in. This process runs through a series
 *	of conversations with an attached device, first attempting to 
 *	discover what kind of modem it is, then configuring the modem in
 *	accordance with an internal database.
 */
	STUB
	int
        tt_soc *tty
END

DEFINE	modem_discovery
/*
 * Summary: Attempt to discover what kind of modem is attached to a TTY.
 * Input: TTY on which to discover the modem type.
 * Returns: Returns a pointer to the modem type, or NULL if not known.
 * Comments: This registry sends a series of strings to a TTY and compares 
 * 	the responses from the TTY to the known response strings of the 
 *	modems in the modemcap database.
 */
	STUB
	char *
        tt_soc *tty
END

DEFINE	modem_type_desired
/*
 * Summary: Override the modem discovery process.
 * Input: TTY on which modem discovery is being done.
 * Returns: Return a pointer to the name of the modem to use, or NULL if
 * 		none exists.
 * Comments: This function is useful on platforms with built-in modems.
 *	It is called before any dialog is attempted with the modem on 
 *	a TTY, and is intended to short circuit the discovery process for
 *	TTYs that are attached to the built-in modems.
 */
	STUB
	char *
        tt_soc *tty
END

DEFINE	modemcap_get_string
/*
 * Summary: Get a value from the modemcap database.
 * Input: Type of modem.
 *	Attribute requested.
 *	Integer, which should always be 0.
 * Returns: Pointer to the modemcap string associated with the modem name
 *		and the requested attribute type.
 */
	STUB
	char *
        char *modemname, char *attrtype, int recurselevel
END

DEFINE	modem_busyout
/*
 * Summary: Mark a TTY line as "busy" so it will neither accept nor
 *	instigate phone calls.
 * Input: TTY of interest,
 * 	  TRUE if modem has been busied out; FALSE if modem is being
 *		brought back into service.
 * Returns: TRUE if some action was taken.
 */
	STUB
	boolean	
        tt_soc *tty, boolean sense
END

DEFINE	modem_hardware_override
/*
 * Summary: Allow Cisco integrated communications equipment a chance to 
 *		reserve a line for its own use.
 * Input: TTY of interest.
 * Returns: TRUE if the modem hardware takes over the line.
 */
	STUB
	boolean	
        tt_soc *tty
END

DEFINE modem_group
/*
 * Summary: Notify others when a group-async IDB is created.
 * Input: Group-async IDB.
 * Returns: NULL.
 */
   STUB
   void
   hwidbtype *hwidb
END

DEFINE modem_set_codec_type
/*
 * Summary: Set the modem board codec type.
 * Input: TRUE if an E1 interface has been detected.
 * Returns: NULL.
 * Comment: Whenever a T1 or an E1 interface is detected in the system, 
 *	this function is called to set up the modem's codec type.
 */
   STUB
   void
   boolean codec_A_law
END

DEFINE modem_report
/*
 * Summary: This function is called whenever an ISDN event occurs.
 * Input: Hardware IDB pointer for the D channel.
 *	  Call ID associated with call.
 *	  Bariable that is always set to 0.
 *	  B channel associated with the call.
 *	  Event type.
 *	  Calling party's phone number, or NULL.
 *	  Called party's phone number, or NULL.
 *	  ISDN event cause.
 * Returns:  ISDN event cause.
 */
   STUB
   ushort
   hwidbtype *dchan_idb, ushort call_id, ushort ces, short bchan, ushort event, char *remote_num, char *local_num, ushort cause
END
 
DEFINE digital_call_report
/*
 * Summary: This function is called whenever a digital ISDN event occurs.
 * Input: IDB of the channel to be mapped,
 *	  B channel to use.
 *	  Event type.
 * Returns: NULL.
 */
   STUB
   void
   hwidbtype *bchan_idb, ushort bchan, ushort event
END

DEFINE modem_async_idb_inits
/*
 * Summary: Initialize modem management type information whenever an 
 *	async IDB is created.
 * Input: IDB of interest.
 * Returns: NULL.
 */
   STUB
   void
   hwidbtype *hwidb
END

DEFINE  systat
/*
 * Summary: Hook so various protocols can add a listing of access clients.
 * Input: NULL.
 * Returns: NULL.
 * Comments: Functions added to this registry should use printf to print 
 *	all active lines in systat format.
 */
	LIST
	void
	-
END

DEFINE	modem_hardware_in_use
/*
 * Summary: Determine whether the modem hardware has reserved the line.
 * Input: TTY of interest.
 * Returns: TRUE if the line has been reserved by the modem hardware.
 * Comments: The Cisco IOS code uses this function to determine whether 
 *	the modem hardware is performing self-maintenance before initiating 
 *	a dialout on the line.
 */
	STUB
	boolean	
        tt_soc *tty
END

DEFINE	modem_busyout_allowed
/*
 * Summary: Determine whether the busyout mechanism is applicable.
 * Input: TTY of interest.
 *	  Unused boolean.
 * Returns: TRUE if busyout is supported by the hardware on the TTY.
 */
	STUB
	boolean	
        tt_soc *tty, boolean printerror
END

DEFINE modem_mgmt_exists
/*
 * Summary: Determine whether modem management software exists outside 
 *	of the Cisco IOS management software.
 * Input: NULL.
 * Returns: TRUE if other modem management software exists.
 */
        STUB
        boolean
        -
END

DEFINE modem_mgmt_inits
/*
 * Summary: Initialize the modem management software.
 * Input: NULL.
 * Returns: NULL.
 * Comments: It is not entirely clear why this registry exists, because 
 *	one would expect modem management software to be initialized by 
 *	the subsystem in which it is contained.
 */
        STUB
        void 
        -
END

DEFINE modem_mgmt_oob_operation
/*
 * Summary: Take action to turn the OOB port on or off.
 * Input: Pointer to modem information.
 *	  OOB_PORT_ON or OOB_PORT_OFF.
 * Returns: NULL.
 */
        STUB
        void
        void *modem_info, boolean oob_action
END

DEFINE  bootp_ns_addr
/*
 * Summary: Return the name server address for hosts configured using 
 *	async BOOTP.
 * Input: Switched on DNS port type.
 *	  Boolean to set whether to use the primary name server.
 *	  Address in which to placed the returned information.
 * Returns: TRUE if the information was returned to the specified address.
 * Comments: This function is the Right Thing to do for Microsoft and 
 *	RFC 1877. It tries to return the NS address configured by async BOOTP. 
 *	If it cannot, it defaults to the system NS information. This is all 
 *	done in the interest of keeping old configurations working.
 */
        CASE
        void
        boolean primary, void *addr
        0
        int type
END

DEFINE	bootp_ns_addr_dns
/*
 * Summary: Return the DNS server address. 
 * Input: Boolean to set whether to use the primary name server.
 *	  Address in which to place the returned information.
 * Returns: TRUE if the information was returned in the specified address.
 * Comments: This function is not meant to be called directly. Instead, call 
 *	the NetBIOS version, bootp_ns_addr_nbns.
 */
	LOOP
	boolean
	boolean primary, ipaddrtype *addr
END

DEFINE	bootp_ns_addr_nbns
/*
 * Summary: Return the NetBIOS Name Service address.
 * Input: Boolean to set whether to use the primary name server.
 *	  Address in which to place the returned information.
 * Returns: TRUE if the information was returned to the specified address.
 * Comments: This function is not meant to be called directly.
 */
	LOOP
	boolean
	boolean primary, ipaddrtype *addr
END

DEFINE	channel_hwidb
/*
 * Summary: Return a pointer to the hwidb of the channel (ISDN, 
 *	channelized T1, and so forth) that is attached to the supplied TTY 
 *	(that is, V.120 or internal modem).
 * Input: TTY of interest.
 *	  Pointer to be filled in with the hwidb.
 * Returns: TRUE if the hwidb is filled in.
 */
	LOOP
	boolean
	tt_soc *tty, hwidbtype** hwidb
END

DEFINE modem_get_calling_number
/*
 * Summary: Get the calling party number for users on async modem lines or IDBs.
 * Input:   TTY of interest.
 *	IDB of interest.
 *      Pointer to a char pointer where the ASCII representation of the
 *              calling number is to be stored.
 * Returns: TRUE if the number is filled in; FALSE otherwise.
 */
	LOOP
	boolean
	tt_soc *tty, hwidbtype *idb, char **ptr
END

DEFINE modem_get_called_number
/*
 * Summary: Get the called party number for users on async modem lines or IDBs.
 * Input:   TTY of interest.
 *	IDB of interest.
 *      Pointer to a char pointer where the ASCII representation of the
 *              called number is to be stored.
 * Returns: TRUE if the number is filled in; FALSE otherwise.
 */
	LOOP
	boolean
	tt_soc *tty, hwidbtype *idb, char **ptr
END

END REGISTRY CS
