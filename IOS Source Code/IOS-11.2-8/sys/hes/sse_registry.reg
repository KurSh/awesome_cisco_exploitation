# $Id: sse_registry.reg,v 3.3.22.3 1996/05/04 00:44:24 wilber Exp $
#------------------------------------------------------------------
# sse_registry.reg - Service Points for the SSE registry
#
# Oct. 1993, Tony Li
#
# Copyright (c) 1993-1996 by cisco Systems, Inc.
# All rights reserved.
#
#------------------------------------------------------------------
# $Log: sse_registry.reg,v $
# Revision 3.3.22.3  1996/05/04  00:44:24  wilber
# Branch: California_branch
#
# Integrated Routing and Bridging
# - Rip out MTR transparent bridging support.
#
# Constrained Multicast Flooding
# - Convert tbridge flood array to a linked list of tbifd's.
#
# Revision 3.3.22.2  1996/04/30  05:43:58  gchristy
# CSCdi56163:  SSE: move low_mem function to system registry
# Branch: California_branch
#
# Revision 3.3.22.1  1996/04/29  09:20:40  gchristy
# CSCdi50875:  SSE: handle low memory conditions more gracefully
# Branch: California_branch
#
# Revision 3.3  1996/01/23  08:47:56  mmcneali
# CSCdi47323:  vLAN encapsulated IP SSE switched.
#
# Faster Baby, Faster!
#
# Revision 3.2  1995/11/17  09:21:06  hampton
# Remove old entries from the RCS header logs.
#
# Revision 3.1  1995/11/09  11:43:12  shaker
# Bump version numbers from 2.x to 3.x.
#
# Revision 2.3  1995/09/25  08:33:52  tli
# CSCdi40960:  ISP jumbo patch 2
#
# Revision 2.2  1995/06/15  18:38:13  gchristy
# CSCdi26854:  SSE access-lists arent enabled with SSE switching
#  - add a new registry function which causes SSE access lists to be
#    rebuilt when SSE switching is enabled or disabled on an interface
#    that has an access-list defined
#
# Revision 2.1  1995/06/07  20:45:20  hampton
# Bump version numbers from 1.x to 2.x.
#
#*------------------------------------------------------------------
# $Endlog$

#
#
# Syntax for defining a registry
#
# Each item must begin a line of its own.
# Lines may be continued by ending with a \
#
# BEGIN REGISTRY <name of registry>
#
# DEFINE <name of service point>
# /* <comment lines in standard C format describing the
#     registry. These will be reformatted unless they are
#     in the comment bar format> */
# DATA
#    <Lines of text to be copied from the input to the
#     between the comment and the function declaration>
# END DATA
#    <type of service> := LIST | LOOP | STUB | CASE | RETVAL | VALUE
#    <type declaration of value returned by called function>
#              must be void for LIST and CASE, boolean
#              for LOOP, and ulong for VALUE.
#    <prototype list for called function>
#    <number of cases for case service>
#    <type for case statement>
# END
#
# END REGISTRY
#
#

BEGIN REGISTRY SSE

DEFINE sse_update
/*
 * Called when it may be likely that an SSE update is needed.
 */
	LIST
	void
	ssetype *sse, sse_protoinfo *protoinfo
END	

DEFINE sse_dispatch
/*
 * Functions should return TRUE if they want the SSE manager to allow them
 * to update.  This is called from scheduler context.
 */
	LOOP
	boolean
	sse_protoinfo *protoinfo
END	

DEFINE sse_fast_dispatch
/*
 * Functions should return TRUE if they want the SSE manager to allow them
 * to update.  This is called from scheduler context.  Only functions which
 * would react horribly to being delayed (e.g., bridging) should use this
 * service. 
 */
	LOOP
	boolean
	sse_protoinfo *protoinfo
END	

DEFINE sse_data_init
/*
 * Called when a new SSE is discovered.  Individual protocols can then
 * initialize protocol specific data stored in the sse data structure.
 */
	LIST
	void
	sse_protoinfo *protoinfo
END	

DEFINE sse_protocols_invalid
/*
 * Called when protocols should perform a software reset, such as when the
 * SSE cache is invalid.
 */
	LIST
	void
	sse_protoinfo *protoinfo
END

DEFINE sse_idb_invalid
/*
 * Called when an interface will be invalidated.
 */
	LIST
	void
	sse_protoinfo *protoinfo
END

DEFINE sse_protocol_reset
/*
 * Called when a single protocol should perform a software reset.
 */
	CASE
	void
	sse_protoinfo *protoinfo
	MAX_SSE_PROTOCOL
	int protocolnum
END

DEFINE sse_reinit
/*
 * Called when something horrible has happened, such as the complex being
 * stepped on.  Protocols should free up all of their data structures
 * immediately.  Protocol trees in the sse structure itself have already
 * been cleaned up.  Fix things like private patchpoints.
 */
	LIST
	void
	ssetype *sse, sse_protoinfo *protoinfo
END

DEFINE sse_icbtree_branch
/*
 * A loop registry.  At the end of an icb tree, we need an address to
 * branch to.  The function which decides to set this should return TRUE,
 * to stop further lookups.
 */
	LOOP
	boolean
	hwidbtype *hwidb, int *result_addr
END

DEFINE sse_print_stats
/*
 * Print stats in the summary as appropriate.  Automore is already enabled.
 * Use the macros in sse.h for formatting.  Only used for protocols which
 * are not in the "normal" tree.
 */	
	LIST
	void
	sse_protoinfo *protoinfo
END

DEFINE sse_preload_cache
/*
 * Only used with the Unix image.  A function to be called to preload a
 * routing cache with data for testing.
 */
	CASE
	void
	uchar *buf, uchar *end
	LINK_MAXLINKTYPE
	int protocolnum
END

DEFINE sse_idb_capable
/*
 * Return TRUE if SSE switching can be configured on the given interface.
 */
	STUB
	boolean
	hwidbtype *hwidb, boolean fast_ok
END

DEFINE sse_idb_bridging_capable
/*
 * Return TRUE if SSE bridging can be configured on the given interface.
 */
	STUB
	boolean
	hwidbtype *hwidb
END

DEFINE sse_load
/*
 * Debugging routine to load the SSE.  Should never be used in production.
 */
	STUB
	void
	parseinfo *csb
END

DEFINE sse_protoinfo
/*
 * Return a pointer to the protoinfo structure corresponding to an SSE.
 */
	STUB
	sse_protoinfo *
	ssetype *sse
END

DEFINE sse_consistency
/*
 * Vector to protocol specific routines to perform consistency checking for
 * code generation.
 */
	CASE
	void
	ssetype *sse, int protocol
	MAX_SSE_PROTOCOL
	int protocolnum
END

DEFINE sse_bus_reset
/*
 * Reset the bus that we're running on.
 */
	STUB
	void
	mcitype *cbus, boolean criticalflag
END

DEFINE sse_board_reset
/*
 * Reset the specific hardware that we're running on.
 */
	STUB
	void
	mcitype *cbus
END

DEFINE sse_present
/*
 * See if there's an SSE present.
 */
	STUB
	boolean
	-
END

DEFINE sse_wake_manager
/*
 * Request for fast attention from the SSE manager.
 */
	STUB
	void	
	-
END

DEFINE sse_access_check
/*
 * Rebuilds SSE access-lists if this interface is SSE capable and
 * an outgoing ACL is defined.
 */
	STUB
	void
	idbtype *idb
END

DEFINE sse_access_get_patchpoint
/*
 * Return the patchpoint address associated with a given IP access list
 */
	STUB
	ulong
	ssetype *sse, acl_headertype *acl
END

DEFINE sse_acl_exists
/*
 * Return TRUE if we have generated an access tree for a given list
 */
	STUB
	boolean
	ssetype *sse, acl_headertype *list
END

DEFINE set_vlan_sse_switched

/*
 * Set the SSE switching on or off for a given vLAN.
 */

        STUB
        void
        idbtype *vlan_subinterface, boolean on_or_off
END


END REGISTRY
