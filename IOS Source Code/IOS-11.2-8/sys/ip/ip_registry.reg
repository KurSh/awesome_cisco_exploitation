# $Id: ip_registry.reg,v 3.11.4.24 1996/09/06 21:00:54 snyder Exp $
# $Source: /release/112/cvs/Xsys/ip/ip_registry.reg,v $
#------------------------------------------------------------------
# ip_registry.reg - Service Points for IP registry
#
# 15-Jul-1993, Dean Hiller
#
# Copyright (c) 1993-1997 by cisco Systems, Inc.
# All rights reserved.
#------------------------------------------------------------------
# $Log: ip_registry.reg,v $
# Revision 3.11.4.24  1996/09/06  21:00:54  snyder
# CSCdi68334:  dump unused spinner support, save memory
#              412 image, 4 data
# Branch: California_branch
#
# Revision 3.11.4.23  1996/09/06  13:27:29  fox
# CSCdi50490:  neighbor route never installed
# Branch: California_branch
# Simplify neighbor route creation.  Try to add the route when IPCP or
# SLIP are ready.  Also try to add the route if the interface comes up
# while you know about the neighbor.
#
# Revision 3.11.4.22  1996/09/05  23:59:31  rbadri
# CSCdi64212:  martian table bogusly externed in a .c file.
# Branch: California_branch
# Use registry to adjust the martian table. Created a new boolean
# to mark the validity of the entry.
#
# Revision 3.11.4.21  1996/08/16  22:53:10  rbadri
# CSCdi66287:  LANE: Clean up IPX/OSPF releated initializaion
# Branch: California_branch
# Registry function to setup broadcast flag for LANE.
#
# Revision 3.11.4.20  1996/08/06  08:27:19  gchristy
# CSCdi64974:  IP Cache: delayed invalidation can create inconsistancies
# Branch: California_branch
#  - Back out changes made for CSCdi55725.
#
# Revision 3.11.4.19  1996/07/30  14:42:27  michellw
# CSCdi64226:  Support larger max_frame_size (>1516) for LANE
# Branch: California_branch
# - The max_frame_size will be set to 1516 for ethernet and 4544 for TR
#   if mtu is not configured on the sub-interface; otherwise, it will be
#   set to based on the configured mtu.
# - The lane module will not come up if the configured mtu is not valid.
# - Add one more parameter (swidb) to the reg_invoke_media_change_mtu
#   registry function.
# - 1577 will come up with the default AIP mtu size (4470) if mtu is not
#   configured on the sub-interface.
#
# Revision 3.11.4.18  1996/07/19  22:55:15  irfan
# CSCdi63267:  dhcp hickups
# Branch: California_branch
# misc. dhcp proxy client improvements:
#  - appear to the server as a relay agent to get unicasts back correctly.
#  - tap packets from bootp server to see if they are responses directed
#    to the dhcp proxy client (relay-agent).
#  - make it work for lines that don't have a logged-in user.
#  - reduce the sleep interval in allocation attempts.
#  - use client ID strings beginning with a byte of 0.
#  - rename dhcp_sock.
#  - make allocation work if prev. request is in selecting/requesting
#    states.
#  - make allocation work if prev. lease entry is being purged.
#  - should use new process primitives. also block on crashes.
#  - add more debug information.
#
# Revision 3.11.4.17  1996/07/02  17:00:56  slin
# CSCdi61526:  MacIP ipgpAssign Error - Overlapping IP address with
# client range
# Branch: California_branch
# - During IP address assignment, skip addresses that fail IP alias chec
#
# Revision 3.11.4.16  1996/06/27  09:36:44  fox
# CSCdi61238:  linktype is an overloaded symbol
# Branch: California_branch
# Change idb->linktype to idb->getlink.
#
# Revision 3.11.4.15  1996/06/27  03:27:18  mleelani
# CSCdi60876:  Multicast fastswitching flag should be compatible with
# unicast
# Branch: California_branch
# Reflect unicast fastswitching polarity
#
# Revision 3.11.4.14  1996/06/24  16:04:37  myeung
# CSCdi55725:  OSPF CPU HOG
# Branch: California_branch
# - Modify IP cache invalidation code to allow delayed invalidation
#
# Revision 3.11.4.13  1996/06/18  00:28:36  nkwok
# CSCdi57945:  EZSetup name need changing
# Branch: California_branch
# Add sub-system setup registry
#
# Revision 3.11.4.12  1996/05/23  07:37:20  myeung
# CSCdi58029:  OSPF crash in ospf_interface_up() when unconfiguring OSPF
# Branch: California_branch
# - Add boolean parameter to ip_address_change registry to indicate if
#   the change is for secondary or primary address.
#
# Revision 3.11.4.11  1996/05/19  00:24:29  rpratt
# CSCdi57306:  HTML config has problems in new platform
# Branch: California_branch
#
# Revision 3.11.4.10  1996/05/17  11:24:39  ppearce
# Merge IbuMod into Calif
#
# Revision 3.10.8.4  1996/05/14  06:19:23  lmetzger
# Branch: IbuMod_Calif_branch
#
# Response Time Reporter code review updates
#
# Revision 3.10.8.3  1996/05/05  23:11:39  ppearce
# Sync to IbuMod_Calif_baseline_960504
#
# Revision 3.10.8.2  1996/04/03  14:41:19  ppearce
# Sync to IbuMod_Calif_baseline_960402
#
# Revision 3.10.8.1  1996/03/17  17:52:15  ppearce
# Sync IbuMod_Calif_branch to V111_1_3
#
# Revision 3.11.4.9  1996/05/13  20:09:49  mleelani
# CSCdi57016:  Multicast helper-maps not functional
# Branch: California_branch
# Fix helper-maps.
#
# Revision 3.11.4.8  1996/05/09  14:30:55  rbadri
# Branch: California_branch
# LANE, UNI3.1 features
#
# Revision 3.11.4.7  1996/05/06  16:43:26  dino
# CSCdi56689:  When a multipoint-VC goes away, the IP multicast cache is
#              not fixed
# Branch: California_branch
#
# Revision 3.11.4.6  1996/05/04  01:02:30  wilber
# Branch: California_branch
#
# Integrated Routing and Bridging
# - ARP, IP protocol, fast-switching and smf support for the Bridge-group
#   Virtual Interface.
# - Set up bridge/route indicators based on CRB/IRB is enabled or not.
#
# Constrained Multicast Flooding
# - Convert tbridge flood array to a linked list of tbifd's.
#
# Name Access List
#
# Revision 3.11.4.5  1996/04/27  05:51:24  syiu
# Branch: California_branch
# Commit Dial1_branch
#
# Revision 3.11.4.4.4.1  1996/04/27  07:04:44  cakyol
# non sync sync from V112_0_2 to ....
# Branch: LE_Cal_ATM_FR_California_Postsync_960425_branch
#
# Revision 3.11.4.4  1996/04/17  13:41:43  fred
# CSCdi54910:  commit rsvp, traffic shaping, and RED
# Branch: California_branch
#
# Revision 3.11.4.3  1996/04/15  21:16:04  bcole
# CSCdi54649:  IP Host Modularity, IP Automatic Stub Routing feature
# commit
# Branch: California_branch
#
# Revision 3.11.4.2  1996/04/10  04:22:57  bcole
# CSCdi54192:  IPX pings over a multipoint GRE tunnel fail intermittently
# Branch: California_branch
#
# Fixup IPX encapsulation over multipoint tunnels.
#
# Revision 3.11.4.1.4.1  1996/04/08  01:55:30  bbenson
# Branch: LE_Cal_V112_0_2_branch
# Sync of LE_Cal to new V112_0_2 sync point (post Port Ready).
#
# Revision 3.11.4.1  1996/03/28  01:23:06  jenny
# CSCdi50806:  TCP connection terminates if outgoing interface MTU is
# decreased
# Branch: California_branch
# Added a new CASE registry which IP now uses to notify of transport
# layer if interface MTU is smaller than packet size and dont fragment
# bit is set in the packet.
#
# Revision 3.11.10.1  1996/03/22  09:40:11  rlowe
# Non-sync Synalc3_LE_Cal_V111_1_0_3_merge_branch to V111_1_3
# yielding LE_Syn_Cal_V111_1_3_branch.
# Branch: LE_Syn_Cal_V111_1_3_branch
#
# Revision 3.11  1996/03/09  22:55:39  widmer
# CSCdi47890:  HTTP server doesnt work
# Add HTTP server
#
# Revision 3.10.12.1  1996/03/05  06:14:23  rlowe
# Apply LANE content to merge branch.
# Branch: Synalc3_LE_Cal_V111_1_0_3_merge_branch
#
# Revision 3.10.6.1  1996/02/27  21:08:58  cakyol
# non sync sync of LE_Cal_V111_0_16_branch to V111_1_0_3 yielding
# LE_Cal_V111_1_0_3_branch
# Branch: LE_Cal_V111_1_0_3_branch
#
# Revision 3.10  1996/01/24  20:14:57  jenny
# CSCdi47046:  TCP/IP need code clean up (part 3)
# . removed ip/tuba.c, ip/tuba_default.c and ip/tuba.h
# . removed all includes for ip/tuba.h.
# . removed more TUBA related code.
#
# Revision 3.9  1996/01/19  03:02:40  dlobete
# CSCdi44954:  Local-switching for DFS required
# But that's not all! Also part of this jumbo Distributed IP
# Switching commit:
# - CSCdi43302: Illegal Access to Low Address crashes RVIP/4E (RSP2)
# - DFS config which mirrors RSP route-cache setting
#         (ie configurable distributed flow or optimal switching)
# - Interrupt level IPC updates and invalidates for DFS cache operations
# - Stay in closer synch with RSP cache for prefix invalidations
#
# Revision 3.8  1996/01/16  19:37:03  bcole
# CSCdi46724:  NHRP: Provide for migration from RFC1577
#
# Move problem registry services to new registry.
#
# Revision 3.7  1996/01/15  17:18:05  misko
# CSCdi37400:  2511 passes packets after ipcp completes but before
# reporting int up
# Allow PPP to notify IP when IP comes up.  Since PPP can have NCP's that
# come and go, and since IP routes may be installed when PPP negotiated,
# we need to be able to tell IP to propogate those routes.  Otherwise
# a lot of traffic gets dropped.  Take advantage of existing registrys
# to notify IP when PPP thinks it is up.  In addition, fix network.c so
# that when line protocol comes up, route propogation is not delayed by
# the keepalive period.
#
# Revision 3.6  1996/01/11  02:26:35  jenny
# CSCdi46513:  TCP/IP need code clean up (part 2)
# . removed ip_tuba.c and clns_tuba.c.
# . removed lots of tuba related registry stubs and code.
# 
# Revision 3.5.2.1  1996/02/15  21:50:15  rbadri
# Branch: LE_Cal_V111_0_16_branch
# Add an additonal swidb parameter to the registry bump_cache_version
#
# Revision 3.5  1995/12/13  22:57:26  lol
# CSCdi39791:  access-lists applied by tacacs+ dont work when
# fast-switched
#
# Revision 3.4  1995/11/19  06:06:02  fox
# CSCdi43820:  routes thrash on ipcp_up()
# Don't send gratuitous ARP on the interface the peer is on.
# Rename ip_send_gratuitous_arps() as ip_arp_send_gratuitous_arps().
# Remove route_remove_neighbor() as it did the same thing as
# iprouting_delete_conn_route().
#
# Revision 3.3  1995/11/18  00:58:02  thille
# CSCdi38736:  BGP snmp trap responses getting lost
# Fix and modularize the bgp trap support.  While I am here, removed some
# trap stuff in ip_snmp.c that was obsoleted by Jeff's modularization of
# traps.
#
# Revision 3.2  1995/11/17  09:33:45  hampton
# Remove old entries from the RCS header logs.
#
# Revision 3.1  1995/11/09  11:55:38  shaker
# Bump version numbers from 2.x to 3.x.
#
# Revision 2.10  1995/11/08  21:04:16  shaker
# Merge Arkansas_branch into 11.1 mainline.
#
# Revision 2.9  1995/10/23  20:57:26  fox
# CSCdi42602:  Neighbor routes are lost if routing table is cleared
# Move neighbor address support to the WAN code.
# Call the WAN code if an interface's routes are being modified.
#
# Revision 2.8  1995/09/23  21:39:24  dkatz
# CSCdi38306:  ISIS shouldnt run SPF on leaf route changes
# Reference renamed fields.
#
# Revision 2.7  1995/09/20  17:05:03  dino
# CSCdi36738:  Multicast sender being designated router
#
# Revision 2.6  1995/09/18  19:35:49  fox
# CSCdi40523:  Add IP Address Pooling support for ISDN and other sync
# interfaces
# Modify IP address pooling to support all Point-to-Point interfaces
# Remove Odd/Even Address feature
# Add 'ppp negotiate' command
#
# Revision 2.5  1995/09/06  07:06:19  dino
# CSCdi39769:  Modularity: mroute.c has direct calls into mib subsystem
#
# Revision 2.4  1995/07/16  18:04:11  thille
# CSCdi37049:  Console output from SNMP WriteNet SET confuses console user
# Bad programmer, no doggie biscuit.
#
# Revision 2.3  1995/07/15  02:36:55  thille
# CSCdi37049:  Console output from SNMP WriteNet SET confuses console user
# Add a silent_mode parameter to some routines and registries and set it
# to TRUE when making the calls from SNMP WriteNet, netConfigSet, or
# hostConfigSet.  Also, add an errmsg for each so the event can still get
# logged, and make it clear what caused the event.  Fix other callers to
# pass FALSE so current behavior will be maintained.
#
# Revision 2.2  1995/06/30  10:10:39  irfan
# CSCdi36611:  cleanup of sanity checks for remote SLIP/PPP parameters
# Don't allow SLIP w/o required IP configuration. Same for PPP, but
# don't block possible IPX or ATALK PPP clients.
#
# Revision 2.1  1995/06/07  20:57:34  hampton
# Bump version numbers from 1.x to 2.x.
#
#------------------------------------------------------------------
# $Endlog$
#

#
#
# Syntax for defining a registry
#
# Each item must begin a line of its own.
# Lines may be continued by ending with a \
#
# BEGIN REGISTRY <name of registry>
#
# DEFINE <name of service point>
# /* <comment lines in standard C format describing the
#     registry. These will be reformatted unless they are
#     in the comment bar format> */
# DATA
#    <Lines of text to be copied from the input to the
#     between the comment and the function declaration>
# END DATA
#    <type of service> := LIST | LOOP | STUB | CASE | RETVAL | VALUE
#    <type declaration of value returned by called function>
#              must be void for LIST and CASE, boolean
#              for LOOP, and ulong for VALUE.
#    <prototype list for called function>
#    <number of cases for case service>
#    <type for case statement>
# END
#
# END REGISTRY
#
#

BEGIN REGISTRY IP


DEFINE  ip_routing
/* 
 * Callbacks notified when IP routing is enabled or disabled.
 */
	LIST
	void
	int onoff, boolean changed
END


DEFINE ip_udp_input
/*
 * First function to absorb datagram returns true.  Used by things
 * like appletalk over UDP code, etc.
 * This registration point is currently orthogonal to the socket mechanism.
 */
	LOOP
	boolean
	paktype *pak, udptype *udp
END


DEFINE ip_change_mtu
/*
 * Notification of IP mtu changes.
 */
	LIST
	void
	hwidbtype *hwidb, idbtype *swidb, int delta
END


DEFINE tunnel_raw_enqueue
/* 
 * Perform generic tunnel cleanup.
 */
	STUB
	void
	hwidbtype *hwidb, paktype *pak
END


DEFINE tunnel_setmode
/*
 * Initialize tunnel info parameters.
 */
	CASE
	void
	tunnel_info *tinfo, linktype_t *getlink, int *enctype
	END_TUN_MODE
	int mode
END
	
DEFINE tunnel_fast_setup
/*
 * Initialize tunnel fastswitching support (if applicable)
 */
       RETVAL
      boolean
      tunnel_info *tinfo
      END_TUN_MODE
      int mode
 END

DEFINE ip_enqueue
/*
 * Pass IP datagram to correct protocol.
 */
	CASE
	void
	paktype *pak
	MAX_PROT
	int protocol
END

DEFINE ip_forward_dbcast
/*
 * Ask upper protocol layers if it is acceptable for us to translate
 * to a local broadcast and forward to net.  We do this because in 
 * some cases, the upper layer protocol may handle this already.
 */
	RETVAL
	boolean
	-
	MAX_PROT
	int protocol
END

DEFINE ip_alias
/*
 * If IP datagram is aliased, let correct protocol handle it.
 */
	LOOP
	boolean
	paktype *pak
END


DEFINE ip_access_group
/* 
 * Callback for changes to an interface access group. 
 */
	LIST
	void
	idbtype *idb, boolean groupin, acl_headertype *acl
END


DEFINE ip_access_list
/* 
 * Callback for changes to access lists. 
 */
	LIST
	void
	acl_headertype *acl
END

DEFINE ip_aspath_access_list
/* 
 * Callback for changes to as-path access lists. 
 */
	LIST
	void
	int listnumber
END

DEFINE ip_send_audit
/* 
 * Send an audit message.
 */
	STUB
	void
	paktype *pak, ulong code
END

DEFINE ip_address_change
/* 
 * An interface address has been changed.
 */
	LIST
	void
	idbtype *idb, ipaddrtype address, \
	ipaddrtype mask, boolean secondary, boolean adding
END

DEFINE ip_show_traffic
/* 
 * Show traffic statistics.
 */
	LIST
	void
	-
END

DEFINE ip_address_duplicate
/* 
 * Verify that supplied address/mask pair is not the same as addresses
 * on other interfaces. Should only be called during command processing.
 */
	STUB
	boolean
	ipaddrtype address, ipaddrtype mask, idbtype *ignore_idb, \
	boolean primary
END

DEFINE ip_address_reserved
/*
 * See if any registered application claims the supplied address is
 * reserved.
 */
	LOOP
	boolean
	idbtype *idb, ipaddrtype address
END

DEFINE ip_first_hop
/*
 * Choose the best source address to use for a given destination.
 */ 
	STUB
	idbtype *
	ipaddrtype *address, ipaddrtype destination, ulong flags
END

DEFINE tcp_listen
/* 
 * Pass incoming TCP request to the correct processing routine.
 */
	CASE
	void
	tcbtype *tcb
	0
	ushort localport
END


DEFINE tcp_access_check
/*
 * Validate access to port from a foreign host.
 */
	RETVAL
	boolean
	ulong sport, ulong dport, ipaddrtype fhost
	0
	ushort localport
END


DEFINE tcp_tty_close
/*
 * Notifies interested parties that a tty connection is closing
 */
	LIST
	void
	conntype *conn
END


DEFINE tcp_guess_md5_key
/*
 * Ask the application (indexed by well-known port) for the MD5 key
 * that might be in use for the specified conversation using the TCP
 * MD5 option.
 */
	RETVAL
	char *
	addrtype *laddr, addrtype *faddr, ushort lport, ushort fport, \
		char *buf, int buflen
	0
	ushort localport
END


DEFINE ip_slarp
/*
 * Process IP specific portions of an HDLC keepalive datagram
 * SLARP == Serial Line Address Resolution Protocol (cisco specific).
 */
	STUB
	void
	paktype *pak
END


DEFINE ip_clns_basic_timers
/*
 * Process ISO-IGRP basic timers router sub-command.
 */
	STUB
	void
	clns_pdbtype *pdb, parseinfo *csb
END

DEFINE ip_clns_delete_router
/*
 * Remove a clns router.
 */
	STUB
	boolean
	char *router_name
END

DEFINE	ip_clns_distance
/*
 * Process distance command for CLNS routing protocols.
 */
	STUB
	void
	clns_pdbtype *pdb, int distance
END

DEFINE ip_clns_find_router_name
/*
 * Find the pdb for the routing process associated with this name.
 */
	STUB
	clns_pdbtype *
	char *router_name
END

DEFINE ip_clns_igrp_pdb_initialize
/*
 * Initialize the ISO-IGRP processes.
 */
	STUB
	clns_pdbtype *
	char *router_name
END

DEFINE ip_clns_metric_command
/*
 * Process router sub-command "metric weights" command.
 */
	STUB
	void
	clns_pdbtype *pdb, parseinfo *csb
END

DEFINE ip_clns_nv_write_redist
/*
 *
 */
	STUB
	void
	clns_pdbtype *to_pdb, char *nv_command
END

DEFINE ip_clns_redistribute
/*
 * Process redistribute router subcommand for OSI routing protocols.
 */
	STUB
	void
	clns_pdbtype *pdb, clns_pdbtype *rpdb, int sense, char *map_name
END

DEFINE ip_clns_redistribute_level_nvgen
/*
 * Redistributing IS-IS into this pdb, print level.
 */
	STUB
	void
	pdbtype *proto, pdbtype *pdb
END

DEFINE ip_clns_redistribute_level_printf
/*
 * Redistributing IS-IS into this pdb, print level.
 */
	STUB
	void
	pdbtype *proto, pdbtype *pdb
END

DEFINE ip_clns_redistribute_metric_nvgen
/*
 *
 */
	STUB
	void
	pdbtype *proto, pdbtype *pdb
END

DEFINE ip_clns_redistribute_metric_printf
/*
 *
 */
	STUB
	void
	pdbtype *proto, pdbtype *pdb
END
DEFINE ip_clns_filter_create
/*
 *
 */
	STUB
	ulong
	char *str, ulong oldindex
END

DEFINE ip_get_filter_index
/*
 *
 */
	STUB
	ulong
	char *str
END

DEFINE ip_clns_filter_destroy
/*
 *
 */
	STUB
	void
	ulong index
END

DEFINE ip_filter_name
/*
 *
 */
	STUB
	char *
	ulong index
END

DEFINE ip_route_map_inform
/*
 *
 */
	LIST
	void
	char *map_name, int event
END

DEFINE ip_clns_staticpdb
/*
 * Return the value of the clns_staticpdb.
 */
	STUB
	clns_pdbtype *
	-
END

DEFINE	ip_interface_route_adjust
/*
 *
 */
	LIST
	void
	idbtype *idb, boolean sense
END

DEFINE iprouting_route_adjust
/*
 * Used to send a message to the background process to perform a route
 * adjust.
 */
 	STUB
	void
	idbtype *idb
END

DEFINE ip_passive_cmd_route_adjust
/*
 * When the passive-interface command is specified, call the appropriate
 * protocol to do route_adjust
 */
	CASE
	void
	pdbtype *pdb, idbtype *idb, boolean sense
	MAX_IP_PROCESS
	ulong proctype
END

DEFINE	ip_tcpdriver_active_open
/*
 * Create and open a new TCP encapsulated stream.
 */
	STUB
	tcp_encaps *
	ipaddrtype ipaddr, ipaddrtype sipaddr, ushort port, ulong window,\
	tcp_encaps *tmp, int *status
END

DEFINE	ip_tcpdriver_passive_open
/*
 * Upon TCP open, create a new TCP encapsulated stream.
 */
	STUB
	tcp_encaps *
	tcbtype *tcb, ulong window, tcp_encaps *tmp
END

DEFINE	ip_tcpdriver_change_timeout
/*
 * Turn on or off the retransmission timeout.
 */
	STUB
	void
	tcp_encaps *t, boolean retrans
END

DEFINE	ip_tcpdriver_close
/*
 * Remember that this entry is dead.
 */
	STUB
	void
	tcp_encaps *t
END

DEFINE	ip_tcpdriver_abort
/*
 * Remember that this entry is aborted.
 */
	STUB
	void
	tcp_encaps *t
END

DEFINE	ip_tcpdriver_update
/*
 * Update values in the TCP driver structure.
 */
	STUB
	void
	tcp_encaps *t, tcpdriver_readf readf, int thresh, void *cookie
END

DEFINE	ip_tcpdriver_unacked_output
/*
 * Return TRUE if the TCP stream attached to this driver
 * has unacknowedged output.
 */
	STUB
	boolean
	tcp_encaps *t
END

DEFINE	ip_tcpdriver_oqlen
/*
 * Return queue length of this driver's output queue.
 */
	STUB
	ulong
	tcp_encaps *t
END

DEFINE	ip_tcpdriver_set_oqmax
/*
 * Set the maximum output queue length for a TCP output queue.
 */
	STUB
	void
	tcp_encaps *t, ulong len
END

DEFINE  ip_tcpdriver_set_flow_ctrl_levels
/*
 * Set the high and low water amrks for output queue flow control indications
 */
        STUB
        void
        tcp_encaps *t, ulong hiwater, ulong lowater
END

DEFINE ip_tcpdriver_get_tos
/*
 * Get the current IP TOS being used on this connection
 */
	STUB
	uchar
	tcp_encaps *t
END

DEFINE ip_tcpdriver_set_tos
/*
 * Set the current IP TOS being used for this connection
 */
	STUB
	void
	tcp_encaps *t, uchar tos
END

DEFINE	ip_tcpdriver_get_oqmax
/*
 * Get the maximum output queue length for a TCP output queue.
 */
	STUB
	ulong
	tcp_encaps *t
END

DEFINE	ip_tcpdriver_send
/*
 * Perform output to a TCP stream (queue for later send by TCP Driver process).
 */
	STUB
	int
	tcp_encaps *t, paktype *pak, boolean force
END

DEFINE	ip_tcpdriver_send_now
/*
 * Perform output to a TCP stream (queue and attempt to send now).
 * This call is only valid at process level.
 */
	STUB
	int
	tcp_encaps *t, paktype *pak, boolean force
END

DEFINE	ip_tcpdriver_tcb
/*
 * Return tcb pointer given handle.
 */
	STUB
	tcbtype *
	tcp_encaps *t
END

DEFINE	ip_tcpdriver_fhost
/*
 * Return the foreign host of this stream.
 */
	STUB
	ipaddrtype
	tcp_encaps *t
END

DEFINE	ip_tcpdriver_lhost
/*
 * Return the local host ip address of this stream.
 */
	STUB
	ipaddrtype
	tcp_encaps *t
END

DEFINE	ip_tcpdriver_fport
/*
 * Return the foreign port of this stream.
 */
	STUB
	ushort
	tcp_encaps *t
END

DEFINE	ip_tcpdriver_lport
/*
 * Return the local port of this stream.
 */
	STUB
	ushort
	tcp_encaps *t
END

DEFINE	ip_tcpdriver_set_flag
/*
 * Set a flag.
 */
	STUB
	void
	tcp_encaps *t, uint flag
END

DEFINE	ip_tcpdriver_clear_flag
/*
 * Clear a flag.
 */
	STUB
	void
	tcp_encaps *t, uint flag
END

DEFINE	ip_tcpdriver_keepalive
/*
 * Control keepalives
 */
	STUB
	int
	tcp_encaps *t, int op, ulong value
END

DEFINE	ip_tcpdriver_start
/*
 * Start up the TCP driver upon request.
 */
	STUB
	void
	-
END

DEFINE  ip_open_socket
/*
 * Open IP socket
 */
	STUB
	ipsocktype *
	ushort protocol, addrtype *laddr, addrtype *faddr, ushort lport,\
	ushort fport, uint status
END

DEFINE	ip_close_socket
/*
 * Close IP socket
 */
	STUB
	void
	ipsocktype *soc
END

DEFINE        rcp_write
/*
 * called to send a buffer using the rcp protocol
 */
DATA
typedef   long (*rcp_write_callback)(uchar **buf, long chunk, void * func_arg);
END DATA
      STUB
      boolean
      const char *filename, addrtype *foreignhost, char *buffer, ulong buffsize, \
      filetype *rcp_params, rcp_write_callback func, void *func_arg
END

DEFINE        rcp_send
/*
 * send a buffer of data using rcp protocol on tcb.  called after the
 * other side has authenticated us (or we've authenticated the other
 * side if called by rshd_server).
 */
      STUB
      int
      tcbtype *tcb, const char *name, char *buf, ulong bufsize, \
      rcp_write_callback func, void *func_arg, boolean display
END

DEFINE        rcp_receive
/*
 * receive a buffer of data using rcp protocol on tcb.  called after the
 * other side has authenticated us and the router is ready to receive
 * data
 */
DATA
typedef boolean (*callback_func)(uchar **buf, long *bytesleft, long len,
				       void *opaque_args);

END DATA
      STUB
      int
      tcbtype *tcb, uchar *buf, ulong *bufsize, boolean verbose, \
      callback_func func, void *func_arg
END


DEFINE	      tcp_session_init
/*
 * create a registry call set up special things for a particular tcp session
 */
	CASE
	void
	tt_soc *tty, void *session_info
	0
	ushort localport
END


DEFINE	ip_tftp_open_socket
/*
 * Open an IP socket to the TFTP port
 */
	STUB
	ipsocktype *
	addrtype *fhost, ushort sockflakgs
END

DEFINE	ip_tftp_WRQ
/*
 * Transmits a TFTP write request
 */
	STUB
	boolean
	ipsocktype *soc, const char *filename, const char *mode, boolean server
END

DEFINE	ip_tftp_sendblock
/*
 * Transmit bock of data using tftp
 */
	STUB
	boolean
	ipsocktype *soc, int blknum, uchar *buffer, int len, boolean server
END

DEFINE        tftp_write
/*
 * high level access for writing a file to some host using tftp
 */
      STUB
      void
      char *filename, addrtype *host, uchar *buffer, char *mode, \
      uint buffersize
END

DEFINE	ip_send_echo
/*
 * Send an ICMP Echo
 */
	STUB
	boolean
	ipaddrtype destination, echotype *data, int bytes, ushort pattern,\
	ipaddrtype source, boolean nofrag, idbtype *idb
END

DEFINE	ip_good_address
/*
 * Validate IP address
 */
	STUB
	boolean
	ipaddrtype address, ipaddrtype mask, boolean maskcheck
END

DEFINE	ip_ifbroadcast
/*
 * Given a target address, an interface address and a mask, is the
 * target a broadcast address?  Used by SMDS static mapping code.
 * Once the new generalized static mapping table is written, this
 * service point should be removed.
 */
	STUB
	boolean
	ipaddrtype target, ipaddrtype address, ipaddrtype mask
END


DEFINE	ip_transit_bridging
/*
 * Given an IP address and an output interface, return a MAC address
 * or NULL if none.  Used by transit bridging media such as FDDI and SMDS.
 */
	STUB
	uchar *
	ipaddrtype address, idbtype *output
END

DEFINE  ip_add_static_route
/*
 * Create an IP static route.  Used by IP-specific drivers, such as
 * the IBM Channel interface.
 */
	STUB
	void
	ipaddrtype network, ipaddrtype mask, ipaddrtype gateway, \
	    idbtype *idb, ulong tag, long flags, long distance, \
	    hwidbtype *hwidb
END

DEFINE  ip_delete_static_route
/*
 * Delete an IP static route (interface type).  Used by IP-specific
 * drivers, such as the IBM Channel interface.
 */
	STUB
	void
	ipaddrtype network, ipaddrtype mask, idbtype *idb
END

DEFINE  ip_delete_per_user_route
/*
 * Delete any per-user IP static routes when an interface goes down.
 * Used by tacacs+.
 */
	STUB
	void
	hwidbtype *idb
END


DEFINE ip_origin
/* 
 * First function to have valid origin information returns a buffer.
 * The value of the boolean returned is, 0, 1, or many...
 */
	LOOP
	boolean
	ipaddrtype address, ipaddrtype mask, ushort *buffer, int size
END

DEFINE ip_path
/* 
 * Determine the AS path information of a given route.
 */
	RETVAL
	char *
	ipaddrtype address, ipaddrtype mask, char *buffer, int size
	0
	int proctype
END

DEFINE ip_dupaddr_action
/*
 * See if any registered protocols wants to take any action
 * upon an IP address duplication is detected.
 */
	LOOP
	boolean
	idbtype *idb, ipaddrtype target
END

DEFINE ip_arp_for_proto
/*
 * See if any registered protocols want to claim IP ARP packet as an ARP
 * for an IP address which is under control of that protocol.
 */
	LOOP
	boolean
	idbtype *idb, ipaddrtype taddr
END

DEFINE ip_proxyarp_proto_action
/*
 * Allow a registered protocol to affect the generation of a proxy ARP
 * response.  Protocol can decide to inhibit the proxy ARP response and
 * or change the MAC address provided in the response.
 */
	LOOP
	boolean
	idbtype *idb, ipaddrtype source, ipaddrtype target, boolean *allow, uchar *mac_addr
END

DEFINE ip_mobile_arp_accept
/*
 * Allow other protocols to cause us to accept ARP packets we would
 * otherwise reject.
 */
	LOOP
	boolean
	idbtype *idb, ipaddrtype target
END

DEFINE ip_mobile_arp_new_host
/*
 * Inform other protocols that we have an off net host now resident.
 */
	LIST
	void
	uchar *modeptr, ipaddrtype address, idbtype *idb
END

DEFINE nv_add_tcp_port
/*
 * Add an NV string with either the name or the number of the given TCP
 * port.
 */
	LIST
	void
	uint port
END

DEFINE nv_add_udp_port
/*
 * Add an NV string with either the name or the number of the given UDP
 * port.
 */
	LIST
	void
	uint port
END

DEFINE printf_tcp_port
/*
 * Print either the name or the number of the given TCP port.
 */
	LIST
	void
	uint port
END

DEFINE printf_udp_port
/*
 * Print either the name or the number of the given UDP port.
 */
	LIST
	void
	uint port
END

DEFINE	ip_defaultnetwork_command        
/*
 * Used by Autoinstall over WAN link
 */
	STUB
	void
	parseinfo *csb
END

DEFINE 	ip_address_command
/*
 * Used by Autoinstall over WAN link
 */
	STUB
	void
	parseinfo *csb
END

DEFINE 	fork_bootp_client
/*
 * Used by Autoinstall over WAN link
 */
	STUB
	int
	char *proc_name
END

DEFINE 	bootp_check_local_delivery
/*
 * Used by DHCP proxy client to trap
 * packets received at the server port.
 */
	STUB
	boolean
	paktype *pak
END

DEFINE ip_arp_add_incomplete_entry
/*
 * Callback to inform other protocols that we have a new incomplete entry.
 */
	LIST
	void
	idbtype *interface, ipaddrtype destination
END

DEFINE ip_arp_receive
/*
 * Inform other protocols that we have a request that we don't know how to
 * deal with.
 */
	LIST
	void
	idbtype *interface, boolean reply_flag, ipaddrtype src, ipaddrtype destination 
END

DEFINE ip_mforward
/*
 * Allow IP unicast routing to be independent of IP multicast routing.
 */
	STUB
	boolean
	paktype *pak
END

DEFINE ip_mcache_update
/*
 * Allow IP multicast fastswitching to be independent of IP unicast 
 * fastswitching. This is the multicast cache update function that is
 * called from the unicast cache update function.
 */
	STUB
	void
	paktype *pak
END

DEFINE ip_invalidate_mcache
/*
 * Allow IP multicast fastswitching to be informed when a MAC header has
 * potentially changed in an outgoing interface list entry.
 */
	STUB
	void
	idbtype *idb
END

DEFINE ipmulticast_hes_fs
/*
 * Allow IP multicast fastswitching to be independent of IP unicast 
 * fastswitching. This is the high-end fastswitching registry.
 */
	STUB
	boolean
	ipaddrtype group, hwidbtype *hwidb
END

DEFINE ipmulticast_les_fs
/*
 * Allow IP multicast fastswitching to be independent of IP unicast 
 * fastswitching. This is the low-end fastswitching registry.
 */
	STUB
	boolean
	paktype *pak
END

DEFINE ip_adjust_tunnel_mroutes
/*
 * Inform the IP multicast routing table the next-hop to a tunnel
 * endpoint has changed.
 */
	STUB
	void
	idbtype *idb
END

DEFINE ipmulticast_loopback
/*
 * Decide if a locally originated packet needs to be loopback through the
 * multicast forwarding engine. This is only the case if we are doing IP
 * multicast routing when a multicast group is in sparse-mode and this system
 * is the PIM DR for the interface the packet is to be sent on.
 */

 	STUB
	boolean
	paktype *pak
END

DEFINE snmp_add_ip_group
/*
 * IP multicast routing table registry for calls to the SNMP code.
 */
 	STUB
	void
	ipaddrtype group
END

DEFINE snmp_delete_ip_group
/*
 * IP multicast routing table registry for calls to the SNMP code.
 */
 	STUB
	void
	ipaddrtype group
END

DEFINE ipcache_add_callback
/*
 * Callback after a cache entry has been added.
 */
	LIST
	void
	ipcache_rntype *ptr
END

DEFINE ipcache_delete_callback
/*
 * Callback after a cache entry has been removed.
 */
	LIST
	void
	ipcache_rntype *ptr
END
	
DEFINE ip_get_netsmask
/*
 * Given an IP address, attempt to find the netmask which should be used
 */
	STUB
	void
	ipaddrtype address, ipaddrtype *mask
END

DEFINE iprouting_pdb_init
/*
 * Initialize a pdb to start routing on it.
 */
	RETVAL
	pdbtype *
	ushort asystem
	0
	ulong proctype
END

DEFINE iprouting_delete_conn_route
/*
 * Delete a pdb_CONNECTED route from the IP routing table.
 */
	STUB
	void
	ipaddrtype address, ipaddrtype mask
END

DEFINE iprouting_delete_conn_route_int
/*
 * Delete a pdb_CONNECTED route from the IP routing table for 
 * specified interface
 */
	STUB
	void
	ipaddrtype address, ipaddrtype mask, idbtype *swidb
END

DEFINE iprouting_delete_route
/*
 * Delete a route from the IP routing table.
 */
	STUB
	boolean
	ipaddrtype address, ipaddrtype mask
END

DEFINE ipcache_setup_interface
/*
 * Recompute whether or not it is okay to fast switch IP
 */
	STUB
	void
	hwidbtype *hwidb
END

DEFINE ipcache_invalidate_range
/*
 * Selectively invalidate parts of IP route cache
 */
	STUB
	void
	ipaddrtype prefix, ipaddrtype mask
END

DEFINE ipcache_invalidate_subrange
/*
 * Selectively invalidate parts of IP route cache
 */
	STUB
	void
	ipaddrtype prefix, ipaddrtype mask, ipaddrtype c_mask
END

DEFINE ipcache_invalidate_target
/*
 * Selectively invalidate parts of IP route cache
 */
	STUB
	void
	ipaddrtype prefix, ipaddrtype mask, ipaddrtype c_mask
END

DEFINE ipcache_invalidate_nexthop
/*
 * Invalidate IP route cache of a particular nexthop.
 */
	STUB
	void
	ipaddrtype nexthop
END

DEFINE ipcache_invalidate
/*
 * Invalidate IP route cache for a particular interface, or entire cache
 * if interface is NULL.
 *
 * If immediately == TRUE, force an immediate cache flush;  otherwise,
 * the handler may choose to delay the flush as it wishes.
 */
	STUB
	void
	hwidbtype *hwidb, idbtype *swidb, boolean immediately
END

DEFINE iprouting_gdp_default_ndb_prio
/*
 * Determine the GDP priority of the default route.
 */
	STUB
	void
	ushort *prio
END

DEFINE ip_arp_send_gratuitous_arps
 /*
  * Send gratuitous arps on almost all active IP interfaces
  */
	STUB
	void
	idbtype *idb, ipaddrtype addr
END

DEFINE ip_add_p2p_neighbor_route
 /*
  * Add P2P IP neighbor route
  */
	STUB
	boolean
	idbtype *idb, ipaddrtype addr
END

DEFINE iprouting_irdp_send_report
 /*
  * Send an IRDP report message
  */
	STUB
	void
	idbtype *idb, ipaddrtype destination
END

DEFINE iprouting_via_nonsubnet
 /*
  * Determine if route to a given IP destination makes use of a subnet
  * route.
  */
	STUB
	boolean
	ipaddrtype addr
END

DEFINE ip_secondary
 /*
  * Process ip ... secondary command
  */
	STUB
	boolean
	idbtype *idb, boolean addflag, ipaddrtype address, ipaddrtype mask
END

DEFINE iprouting_snmp_rtlookup_exact
 /*
  * Lookup an exact match for an IP route in the routing table
  */
	STUB
	boolean
	ipaddrtype addr, ndbtype **ndb, ulong *proctype, boolean *is_def
END

DEFINE iprouting_snmp_rtlookup_lexnext
 /*
  * Lookup the lexicographically next route in the IP routing table
  */
	STUB
	boolean
	ipaddrtype addr, ndbtype *best, ulong *proctype, boolean *is_def
END

DEFINE iprouting_conn_plimit_exceed
 /*
  * Determine if passed in path count exceeds pdb_CONNECTED.multipath
  */
	STUB
	boolean
	ulong dupcount
END

DEFINE iprouting_alert
/*
 * For IP protocols that care, let them process the router alert option
 * possibly absorbing the packet in the process
 */
	CASE
	void
	paktype *pak, boolean *absorbed
	MAX_PROT
	int protocol
END

DEFINE iprouting_macaddr
/*
 * Allow an IP routing protocol to determine the "link layer" address used
 * during encapsulation.
 */
	LOOP
	boolean
	paktype *pak, ipaddrtype nhop, uchar const **macaddr
END

DEFINE iprouting_nhrp_tunnel_bcast
/*
 * Interface between GRE tunneling code and NHRP.  Used to allow NHRP
 * to handle packet replication of GRE packets during sending of 
 * broadcasts/multicasts over multipoint tunnels.
 */
	STUB
	boolean
	paktype *pak
END

DEFINE ip_policy_forward
/*
 * Allow IP routing to be independent of IP policy routing.  Return TRUE if
 * the packet has been policy routed.
 */
	LOOP
	boolean
	paktype *pak
END

DEFINE ip_defaultgw
/* 
 * Returns ip address of the default gateway.
 */
	STUB
	ipaddrtype
        -
END

DEFINE ip_set_per_user_acl
/*
 * Set a per-user acl
 */
	STUB
	void
	idbtype *swidb, int direction, uint list
END

DEFINE ip_defaultgw_change
/*
 * Notification of IP default gateway change.
 */
	LIST
	void
	ipaddrtype defaultgw
END

DEFINE iprouting_external_flush
/*
 * Flush all external LSA information from the given routing protocol
 */
	CASE
	void
	pdbtype *pdb
	0
	ulong proctype
END

DEFINE iprouting_area_id
/*
 * Display a string representing a given area identifier.
 */
	RETVAL
	char *
	pdbtype *pdb, ulong area_id
	0
	ulong proctype
END

DEFINE ospf_perform_asbr_duty
/*
 * Let ospf figure out if it needs to deal with ASBR
 */
	STUB
	void
	pdbtype *pdb
END

DEFINE ospf_configure_for_broadcast
/*
 * Configure the interface for Broadcast
 */
	STUB
	void
	idbtype *idb, boolean flag
END

DEFINE ip_get_pool_addr
 /*
  * Get an address for the peer on p2p link. this may come from
  *   any mechanism. Currently DHCP proxy client  or  Local Pooling
  *   Returns 0: fail, 1: Succeeded,  -1: Pending in Q
  */
	STUB
	int
	ipaddrtype *req_addr, \
	idbtype *idb, uchar *ustring, uchar *poolname, \
	ulong wait_ticks
END

DEFINE ip_peer_addr
 /*
  * Returns IDB's peer address.  Returns zero if no address currently
  *   configured or acquired.  Will not attempt to acquire an address.
  */
	STUB
	ipaddrtype
	idbtype *idb
END

DEFINE set_ip_peer_addr
 /*
  * Set passed address as IDB's peer address.  Return previously
  *   obtained address. Always succeeds
  */
	STUB
	void
	idbtype *idb, ipaddrtype new_addr, uint addr_source
END

DEFINE clear_ip_peer_addr
 /*
  * Clears IDB's peer address.  Return previously obtained address if any.
  *   Always succeeds
  */
	STUB
	void
	idbtype *idb
END

DEFINE move_ip_peer_addr
 /*
  * Moves IP address from one interface to another.  Always succeeds
  */
	STUB
	void
	tt_soc *src_tty, tt_soc *dst_tty
END

DEFINE ip_add_pooling_mechanism
 /*
  * Add an address pooling mechanism to the default set.  Always succeeds.
  */
	STUB
	void
	ip_addresspool_type *ippool
END

DEFINE ip_flow_command_parse
/*
 * IP flow cache global configuration command
 */
	STUB
	boolean
	parseinfo *csb
END	

DEFINE ip_turbo_idb_capable
/*
 * Is IP flow cache and rsp cache an option on this platform and interface?
 */
	STUB
	boolean
	hwidbtype *hwidb
END

DEFINE ip_platform_default
/*
 * Support platform specific IP initialization defaults
 */
	LIST
	void
	hwidbtype *hwidb, boolean ip_on
END

DEFINE egp_neighbor_lost
/*
 * Notifies interested parties that an EGP neighbor for whom the sending
 * protocol entity was an EGP peer has been marked down and the peer
 * relationship no longer exists
 */
	LIST
	void
	ipaddrtype egpNeighAddr
END

DEFINE ip_route_cache_cmd
/*
 * NV generation of ip route-cache interface command
 */
	RETVAL
	boolean
	parseinfo *csb
	0
	uint bits
END

DEFINE	ip_tftp_ERROR
/*
 * Transmits a TFTP error packet
 */
	STUB
	void
	ipsocktype *soc, short code, char *errmsg
END

DEFINE ip_enable_disable_dfs_ipc
/*
 * Send IPC message from RSP to VIP to enable DFS for an interface
 */
        STUB
        void
        hwidbtype *hwidb
END

DEFINE ip_send_acl_change_ipc
/*
 * Send IPC message from RSP to VIP to change access lists.
 */
      	STUB
      	void
      	ushort add_notdelete, acl_headertype *number, void *fh_p, void *fi_p, void *si_p  
END
 
DEFINE ip_isis_redistribute
/*
 * Process a "redistribute" command for IS-IS.
 */
	STUB
	void
	pdbtype *pdb, pdbtype *dist, boolean sense
END

DEFINE ip_isis_redistribute_command_exception
/*
 * Kludge to overcome IS-IS overload of "redistribute" command.
 */
	STUB
	void
	parseinfo *csb
END

DEFINE ip_isis_show_interfaces
/*
 * Display interfaces running ISIS-IP for "show ip protocols"
 */
	STUB
	void
	pdbtype *pdb
END

DEFINE ip_isis_pdb_init
/*
 * Initialize a PDB for IS-IS.
 */
	STUB
	clns_pdbtype *
	char *router_name
END

DEFINE ip_isis_get_pdb
/*
 * Get/create an IP ISIS PDB.
 */
	STUB
	pdbtype *
	clns_pdbtype *cpdb
END

DEFINE ip_isis_command_parse
/*
 * Process "summary-address" router subcommand for ISIS
 */
	STUB
	void
	parseinfo *csb
END

DEFINE	ip_rsvp_classify
/*
 * classify a message for fair queuing
 */
	RETVAL
	ushort
	paktype *pak
	0
	ulong proctype
END

DEFINE	http_parser
/*
 * Parse command from http server
 */
	STUB
	void
	httpstate *state, parser_mode *mode, boolean print_title
END

DEFINE	http_get_uri_token
/*
 * Get next uri token in http request
 */
	STUB
	char *
	httpstate *state
END

DEFINE	http_get_form_variable
/*
 * Get value of variable in http form
 */
	STUB
	char *
	httpstate *state, const char *name
END

DEFINE	http_send_not_found
/*
 * Print error message for bad http request
 */
	STUB
	void
	httpstate *state, const char *reqson
END

DEFINE	http_strcasecmp
/*
 * Case insensitive string match, while being mindful of http escapes
 */
	STUB
	int
	const char *string, const char *http_string
END

DEFINE	http_setup_startup
/*
 * Add to router's Setup home page
 */
	LIST
	void
	httpstate *state
END

DEFINE	http_root
/*
 * Add to router's home page
 */
	LIST
	void
	httpstate *state
END

DEFINE	http_get
/*
 * Try to match http get request
 */
	LOOP
	boolean
	httpstate *state, const char *token
END

DEFINE	http_post
/*
 * Try to match http post request
 */
	LOOP
	boolean
	httpstate *state
END

DEFINE	http_ezsetup_init
/*
 * Initialize variables for http ezsetup
 */
	LIST
	void
	httpstate *state
END

DEFINE	http_ezsetup_send
/*
 * Display form variables for http ezsetup
 */
	LIST
	void
	httpstate *state
END

DEFINE	http_ezsetup_post
/*
 * Parse form variables for http ezsetup
 */
	LIST
	void
	httpstate *state, setup_struct *sp, boolean *error
END

DEFINE	http_ezsetup_page_send
/*
 * Send ezsetup page
 */
	LOOP
	boolean
	httpstate *state
END

DEFINE	http_ezsetup_page_post
/*
 * Parse a posted ezsetup page
 */
	LOOP
	boolean
	httpstate *state
END

DEFINE	platform_http_page_send
/*
 * Send platform page
 */
	LOOP
	boolean
	httpstate *state
END
 
DEFINE ipmulticast_fs_setup_interface
/*
 * Multicast route-cache should reflect unicast route-cache polarity.
 */
        STUB
        void
        hwidbtype *idb
END
 
DEFINE ip_bgp_trap
/*
 * Sends a BGP state change trap
 */
	STUB
	void
	int instance, ipaddrtype neighbor, uchar *last_error, int newstate
END

DEFINE ip_webinstall_forus
/*
 * Is this a packet which we may want to accept for autoinstall
 * purposes even though it doesn't otherwise seem like it is for us?
 */
	STUB
	boolean
	void *ip
END
  
 
DEFINE ip_mhelper_forward
/*
 * Allow IP multicast helper map for broadcast/multicast conversion.
 */
        STUB
        boolean
        paktype *pak
END
 
DEFINE ip_atm_mapping_find
/*
 * Walks the ARP Server tables to find the ATM Address associated with the
 * passed ip address.  If no idb is passed, all ARP Server tables are
 * searched.  This is useful if you happen to be NHRP and you want to be
 * able to use RFC1577 established mappings.
 */
    STUB
    hwaddrtype *
    idbtype *idb, ipaddrtype ipaddr
END

DEFINE ip_atm_mapping_invalid
/*
 * Called to notify any interested parties (NHRP) that a particular mapping
 * between IP and ATM addresses is no longer valid.
 */
    LIST
    void
    idbtype *idb, ipaddrtype ipaddr, hwaddrtype *hwaddr
END

DEFINE ip_atm_map_request_vc
/*
 * Try to get a VC for the passed in map table.
 * This really belongs in a public atm registry, (the atm registry is
 * private).
 * Return TRUE if a VC is not associated with the map table entry.
 */
    STUB
    boolean
    idbtype *idb, staticmap_type *map
END

DEFINE ip_atm_staticmap_connect
/*
 * Notify any interested parties (NHRP) when a SVC setup
 * is complete.
 */
    LIST
    void
    staticmap_type *map
END


DEFINE ip_rarp_send_request
/*
 * Sends a RARP request
 */
	STUB
	void
	idbtype *idb, idbtype *unknown
END

DEFINE ip_gdpclient_enqueue
/*
 * Pass this packet to the GDP client.
 */
	STUB
	void
	paktype *pak
END

DEFINE ip_gdpclient_enable
/*
 * Is the GDP client enabled?
 */
	STUB
	boolean
	-
END

DEFINE ip_gdpclient_show
/*
 * Show GDP client specific information
 */
	STUB
	void
	-
END

DEFINE ip_gdpclient_pick_defaultgw
/*
 * Let GDP select the default gateway
 */
	STUB
	ipaddrtype
	ipaddrtype address
END

DEFINE ipalias_data
/*
 * Fetch the opaque data associated with an IP alias
 */
	STUB
	void *
	ipaddrtype dhost
END

DEFINE ipalias_port
/*
 * Map an IP address/port combo to the logical port # associated with
 * the IP alias.
 */
	STUB
	ulong
	ipaddrtype dhost, ushort dport
END

DEFINE ipalias_check
/*
 * Check whether the given alias is legal.
 */
	STUB
	boolean
	ipaddrtype target, boolean check_dynamic, boolean send_arp
END

DEFINE ipalias_insert
/*
 * Add an IP alias from outside the subsystem.
 */
	STUB
	boolean
	ipaddrtype addr, ulong port, void *data
END

DEFINE ipalias_insert_dynamic
/*
 * Add a dynamic IP alias from outside the subsystem.
 */
	STUB
	boolean
	ipaddrtype addr, void *data, boolean sendarp
END

DEFINE ipalias_delete
/*
 * Remove an IP alias from outside the subsystem.
 */
	STUB
	void
	ipaddrtype addr
END

DEFINE ipalias_delete_dynamic
/*
 * Remove a dynamic IP alias from outside the subsystem.
 */
	STUB
	void
	ipaddrtype addr
END

DEFINE ip_address_lookup
/*
 * Map an IP address to host name, using the DNS.
 * See also the name_lookup_number registry.
 */
	STUB
	nametype *
	ipaddrtype address
END

DEFINE ip_icmp_rcvunreach
/*
 * Pass IP unreachable to correct protocol.
 */
	CASE
	void
	void *ip_embed, ipaddrtype source, void *icmpstart
	MAX_PROT
	int protocol
END

DEFINE ip_icmp_rcvquench
/*
 * Pass IP source quench to correct protocol.
 */
	CASE
	void
	void *ip, ipaddrtype source
	MAX_PROT
	int protocol
END

DEFINE ip_trace_sendprobe
/*
 * Send a ip trace-route request packet
 */
        STUB
        void
        ipaddrtype source, ipaddrtype destination, tracetype *data
END

DEFINE ip_trace_rcvexceed
/*
 * Pass IP TTL exceeded to traceroute processing code.
 */
	STUB
	void
	paktype *pak, void *icmpstart
END

DEFINE ip_tftp_server_init
/*
 * Start up a TFTP server process, if necessary
 */
	STUB
	ipsocktype *
	addrtype *newsrc, addrtype *faddr, ushort dport, ushort sport
END

DEFINE	ip_pak_toobig
/*
 * Notify transport protocol of packet to send being too big
 */
	CASE
	void
	idbtype *idb
	MAX_PROT
	int protocol
END
 
DEFINE	ip_autoaddr_load 
/*
 * Invoke IP specific automatic address determination functions.
 * Since this is a list registry service, callees should fork if they
 * intend to run for some time.
 */
	LIST
	void
	-
END

DEFINE ip_adjust_martian
/*
 * Adjust the Martian table for IP
 */
        STUB
        boolean
        ipaddrtype old_address, ipaddrtype old_mask, boolean valid

END

DEFINE ip_pool_exists
/*
 * Return true if pool name is defined
 */
	STUB
	boolean
	char *val
END

END REGISTRY
