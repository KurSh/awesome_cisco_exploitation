# $Id: makeimages,v 3.31.4.81 1996/09/14 05:23:14 mvenugop Exp $
# $Source: /release/112/cvs/Xsys/makeimages,v $
#------------------------------------------------------------------
# makeimages -- Make rules for all production images
#
# October 13, 1991, Kevin Paul Herbert
#
# Copyright (c) 1991-1997 by cisco Systems, Inc.
# All rights reserved.
#------------------------------------------------------------------
# $Log: makeimages,v $
# Revision 3.31.4.81  1996/09/14  05:23:14  mvenugop
# CSCdi69188:  Updating Gaia changes
# Branch: California_branch
#
# Revision 3.31.4.80  1996/09/14  01:02:32  ppearce
# CSCdi68885:  SRB subblock not setup properly for VIP interfaces
# Branch: California_branch
#   Previous commit breaks build for c7200- images
#     Backout previous changes
#     Create SRB_SB subsystem to init SRB vector table
#       rather than init in VIP reset routines
#
# Revision 3.31.4.79  1996/09/13  19:47:16  ppearce
# CSCdi68885:  SRB subblock not setup properly for VIP interfaces
# Branch: California_branch
#   - Add SRB subblock object to VIP ucode (needs to be its own subsys)
#   - Create SRB subblock at same time tokenRing/FDDI swidb created
#   - Init SRB vector table when interface is reset
#
# Revision 3.31.4.78  1996/09/11  05:26:15  bew
# CSCdi68697:  rsp-is45-mz doesnt have full crypto content
# Branch: California_branch
# Add the crypto engine RSP-specific files to the PLUS40 and PLUS56
# images.
#
# Revision 3.31.4.77  1996/09/11  02:01:25  skalahas
# CSCdi68627:  miscellaneous makefile cleanup
# Branch: California_branch
#
# Revision 3.31.4.76  1996/09/10  02:56:14  cheilek
# CSCdi61961:  need to add crypto target to svip makefile
# Branch: California_branch
# Bundle crypto VIP microcode with crypto images.
#
# Revision 3.31.4.75  1996/09/10  02:21:34  jpfeifer
# CSCdi68544:  J images should contain IBM
# Branch: California_branch
#
# Revision 3.31.4.74  1996/09/09  23:32:59  ralls
# CSCdi68544:  J images had IBM where they shouldnt
# Branch: California_branch
#
# Revision 3.31.4.73  1996/09/09  22:16:01  ralls
# CSCdi68493:  Problems building c1000-boot image
# Branch: California_branch
#
# Revision 3.31.4.72  1996/09/06  23:09:23  skalahas
# CSCdi68384:  fixed -p- image content
# Branch: California_branch
# Added FAST_P to SUBSET_P variable
#
# Revision 3.31.4.71  1996/09/06  18:38:56  skalahas
# CSCdi68340:  fixed -bnsy40- and -bnsy56- image definitions
# Branch: California_branch
#
# Revision 3.31.4.70  1996/09/05  22:33:56  skalahas
# CSCdi68227:  miscellaneous makefile cleanup
# Branch: California_branch
#
# Revision 3.31.4.69  1996/09/04  22:50:09  skalahas
# CSCdi68099:  FLAGS variable added for jsv56 and jsv40
# Branch: California_branch
#
# Revision 3.31.4.68  1996/09/03  18:47:27  richl
# CSCdi67863:  commit gaia stuff, and crypto top-level
#
# Revision 3.31.4.67  1996/09/03  15:51:24  richl
# CSCdi67850:  rename images
#
# Revision 3.31.4.66  1996/08/27  07:09:44  ahh
# CSCdi67269:  RIP not available in -fin- images
# Add KEYMAN to FIN_OPTIONS so RIP can start up.
# Branch: California_branch
#
# Revision 3.31.4.65  1996/08/23  22:58:50  etrehus
# CSCdi52243:  Ethernet not found when -p-l image run from flash
# Branch: California_branch
# Add SWFLAGS_rbx, was in 11.0 somehow not here.
#
# Revision 3.31.4.64  1996/08/22  18:43:21  dignacio
# CSCdi65782:  Need changes for C/LAN-FRAD images
# Branch: California_branch
#
# Revision 3.31.4.63  1996/08/22  00:48:35  dignacio
# CSCdi65782:  Need changes for C/LAN-FRAD images
# Branch: California_branch
#
# Revision 3.31.4.62  1996/08/21  20:27:15  dignacio
# CSCdi65782:  Need changes for C/LAN-FRAD images
# Branch: California_branch
#
# Revision 3.31.4.61  1996/08/19  19:05:00  dkatz
# CSCdi65483:  NTP needs modularity cleanup
# Branch: California_branch
# Break up NTP into separate subsystems.  Significantly reduce image size
# and stack usage.  Clean up refclock interface.  Make all modules
# compile cleanly with all error checking enabled (DUSTY is clean!)
#
# Revision 3.31.4.60  1996/08/16  18:31:38  lmetzger
# CSCdi66255:  Add Modularity of RTR for DSPU/SNANM
# Branch: California_branch
#
# Revision 3.31.4.59  1996/08/15  22:31:15  ptran
# CSCdi66137:  Add oddball image for ESA diag.
# Branch: California_branch
#
# Revision 3.31.4.58  1996/08/12  17:12:34  sdatta
# CSCdi65734:  Remove FRAME_RELAY_SVC from all images except enterprise
# Branch: California_branch
#
# Revision 3.31.4.57  1996/08/10  23:44:13  irfan
# CSCdi64746:  DHCP proxy client included in BOOT
# Branch: California_branch
# rename DHCP to DHCP_CLIENT. boot it out of BOOT.
#
# Revision 3.31.4.56  1996/08/06  18:10:33  skalahas
# CSCdi65242:  GAIA makefile enhancements
# Branch: California_branch
#
# Revision 3.31.4.55  1996/08/02  20:09:24  snijsure
# CSCdi64981:  make crypto snmp modular so images can be built without
# snmp.
# Branch: California_branch
# Separate out the snmp objects from main crypto objects.
#
# Revision 3.31.4.54  1996/07/25  00:02:12  bew
# CSCdi63511:  -56- has 40-bit-des only, -40- has des and 40-bit-des
# Branch: California_branch
# Reversed a cut-and-paste typo where two -xy40- and -xy56- variables had
# the wrong content.
#
# Revision 3.31.4.53  1996/07/22  23:50:21  ralls
# CSCdi63726:  Fix problems with CHAT muliple defines
# Branch: California_branch
#
# Revision 3.31.4.52  1996/07/19  18:30:43  ralls
# CSCdi63520:  Make -k- image compile again
# Branch: California_branch
#
# Revision 3.31.4.51  1996/07/17  23:12:37  irfan
# CSCdi62510:  PPP modularity break-requires chat
# Branch: California_branch
# Now that chat is modular, remove it from core_xtra, boot and tli images.
#
# Revision 3.31.4.50  1996/07/15  12:40:26  bchan
# CSCdi50608:  makefile for mib incorrect
# Branch: California_branch
#
# Revision 3.31.4.49  1996/07/15  02:10:57  bchan
# CSCdi50608:  makefile for mib incorrect
# Branch: California_branch
#
# Revision 3.31.4.48  1996/07/14  07:11:05  hampton
# Eliminate all redundant dependencies for any given file.  Split out
# platform specific dependencies and put them in the appropriate obj-xxx
# directory.  [CSCdi62810]
# Branch: California_branch
#
# Revision 3.31.4.47  1996/07/12  03:37:47  ralls
# CSCdi62676:  Fix problems with SRS image
# Branch: California_branch
#
# Revision 3.31.4.46  1996/07/10  18:30:36  ppearce
# CSCdi62426:  CSCdi59527 breaks build of -tli- images
# Branch: California_branch
#
# Revision 3.31.4.45  1996/07/09  20:15:33  ralls
# CSCdi62324:  Remove PLATFORM_SUPPORT_V from 7000 and RSP
# Branch: California_branch
#
# Revision 3.31.4.44  1996/07/09  05:36:25  ppearce
# CSCdi59527:  inlines wastes code space
# Branch: California_branch
#   Just say "no" to inline abuse - SRB subblock inlines removed
#
# Revision 3.31.4.43  1996/07/02  18:15:42  ralls
# CSCdi61900:  Update make.features
# Branch: California_branch
#
# Revision 3.31.4.42  1996/07/02  00:46:15  jpfeifer
# CSCdi61850:  adding support for gaia based production images
# Branch: California_branch
#
# Revision 3.31.4.41  1996/06/26  04:49:27  sdatta
# CSCdi61331:  Removal of FRAME_RELAY for 1000 platform
# Branch: California_branch
#
# Revision 3.31.4.40  1996/06/26  00:34:42  sdatta
# CSCdi61306:  Added New image definitions to makeimages
# Branch: California_branch
#
# Revision 3.31.4.39  1996/06/23  18:22:46  dkatz
# CSCdi61119:  Commit SNTP Code
# Branch: California_branch
# Code review comments.
#
# Revision 3.31.4.38  1996/06/18  20:47:42  hampton
# CiscoPro images don't compile.  Pull IPCDP from the CiscoPro images
# since they don't contain the required CDP code.  [CSCdi60703]
# Branch: California_branch
#
# Revision 3.31.4.37  1996/06/18  18:09:52  hampton
# Make -tli- images compile again.  [CSCdi60703]
# Branch: California_branch
#
# Revision 3.31.4.36  1996/06/17  22:24:35  gstovall
# CSCdi58553:  Need new images for new product
# Branch: California_branch
# Add new *-inu-* image type for the c7200.
#
# Revision 3.31.4.35  1996/06/16  21:24:52  vnguyen
# Finally committing Brasil to California_branch
#
# Revision 3.31.4.34  1996/06/13  18:42:38  etrehus
# Commit boa to California Branch
#
# Revision 3.31.4.33  1996/06/12  19:55:24  jng
# CSCdi60260:  Async catwoman commit
# Branch: California_branch
# Async Catwoman commit into California
#
# Revision 3.31.4.32  1996/06/04  23:27:03  ralls
# CSCdi57580:  Update gaia features, onec more
# Branch: California_branch
#
# Revision 3.31.4.31  1996/06/04  00:40:39  ddecapit
# CSCdi59346:  Makefile changes reqd. to move TRLANE to non-production
# images
# Branch: California_branch
#
# Revision 3.31.4.30  1996/05/30  20:26:38  bew
# CSCdi58950:  Need to make exportable crypto images
# Branch: California_branch
# Add exportable crypto subsystem.
#
# Revision 3.31.4.29  1996/05/26  00:27:38  jjohnson
# CSCdi58740:  unable to build modular-fr-svc
# move KERNEL out of FR_SVC_ONLY and FR_AND_SVC_ONLY (again)
#
# Revision 3.31.4.28  1996/05/23  14:15:29  gcox
# CSCdi58521:  tatalk and tddr images fail nightly build
# Branch: California_branch
#
# Revision 3.31.4.27  1996/05/21  06:14:55  mordock
# Branch: California_branch
# Improve snmp modularity via creating services to register interfaces
# and chassis cards.
# Add syslog mib.
#
# Revision 3.31.4.26  1996/05/17  10:26:40  ppearce
# Merge IbuMod into Calif
#
# Revision 3.21.2.15  1996/05/13  07:03:19  bchan
# CSCdi50608:  makefile for mib incorrect
# Branch: IbuMod_Calif_branch
#
# Revision 3.21.2.14  1996/05/05  22:39:45  ppearce
# Sync to IbuMod_Calif_baseline_960504
#
# Revision 3.21.2.13  1996/05/02  09:16:51  dstine
# Branch: IbuMod_Calif_branch
# - tweek modularity linking for IBU cleanups
#
# Revision 3.21.2.12  1996/05/01  16:16:57  ppearce
# CSCdi56329:  igs-fin-l does not build in IbuMod_Calif_branch
# Branch: IbuMod_Calif_branch
#   Integrate CSCdi51345 - use IPROUTE_MIN in igs-fin-l image
#
# Revision 3.21.2.11  1996/05/01  14:49:39  ppearce
# CSCdi56329:  igs-fin-l does not build in IbuMod_Calif_branch
# Branch: IbuMod_Calif_branch
#
# Revision 3.21.2.10  1996/05/01  07:29:36  bchan
# CSCdi50608:  makefile for mib incorrect
# Branch: IbuMod_Calif_branch
# put APPNMIB in SUBSET_P for tn3270 server to compile
#
# Revision 3.21.2.9  1996/04/26  08:03:55  dstine
# Branch: IbuMod_Calif_branch
# - commit of IBU modularity work, phase 1.
#
# Revision 3.21.2.8  1996/04/11  04:09:48  jbalestr
# CSCdi53189:  trim bsc test image to minimum ip + bsc + bstun
# Branch: IbuMod_Calif_branch
#
# Revision 3.21.2.7  1996/04/05  06:04:38  schiang
# Branch: IbuMod_Calif_branch
# merge ncia server code
#
# Revision 3.21.2.6  1996/04/03  13:15:58  ppearce
# Sync to IbuMod_Calif_baseline_960402
#
# Revision 3.21.2.5  1996/04/02  06:00:32  ppearce
# CSCdi53223:  Add DSPU feature into IBM base images
# Branch: IbuMod_Calif_branch
#
# Revision 3.21.2.4  1996/03/28  08:21:19  pmorton
# Merge VDLC fixes to IbuMod_Calif_branch
#
# Revision 3.21.2.3  1996/03/27  01:33:19  bchan
# CSCdi50608:  makefile for mib incorrect
# Branch: IbuMod_Calif_branch
#
# Revision 3.21.2.2  1996/03/22  18:38:28  lmetzger
# Initial Version of Response Time Reporter
#
# Revision 3.21.2.1  1996/03/17  17:28:05  ppearce
# Sync IbuMod_Calif_branch to V111_1_3
#
# Revision 3.31.4.25  1996/05/15  04:29:16  fowler
# Frame relay VC queuing & rate enforcement
# Branch: California_branch
#
# Revision 3.31.4.24  1996/05/13  22:03:59  rbadri
# CSCdi57412:  Token Ring lane subsystem should be only int 4500/RSP J
# images
# Branch: California_branch
# Include TR-LANE only on select RSP/4500 images
#
# Revision 3.31.4.23  1996/05/11  06:09:21  fox
# CSCdi55358:  PPP subsystem needs to be more modular
# Branch: California_branch
# Attach lex_ncp subsystem to lex subsystem as lex requires PPP.
# Add registry calls to eliminate PPP's dependancy on CCP/Compress.
#
# Revision 3.31.4.22  1996/05/10  23:25:05  gstovall
# CSCdi56792:  Need to remove unused files
# Branch: California_branch
# Nuke support for the Irix image, also stamp out the last of the CS500.
#
# Revision 3.31.4.21  1996/05/09  14:09:52  rbadri
# Branch: California_branch
# LANE, UNI3.1 features
#
# Revision 3.31.4.20  1996/05/08  03:57:51  ralls
# CSCdi57036:  Ole man river he just keeps rollin along
# Branch: California_branch
#
# Revision 3.31.4.19  1996/05/04  00:27:39  wilber
# Branch: California_branch
#
# Integrated Routing and Bridging
# - Add tbridge_bvi.o to the tbridge subsystem.
#
# Constrained Multicast Flooding
# - Define the CMF subsystem for Transparent Bridging.
# - Add the CMF subsystem to -j images.
# - Add the tbridge monitor to the tbridge subsystem,
#   and add the rules for building the CMF subsystem.
#
# Name Access List
#
# Revision 3.31.4.18  1996/05/03  01:56:58  sluong
# Branch: California_branch
# IPX ACL Violation Logging, Plaining English Filters, Display SAP by
# name,
# NLSP MIBS, Scaleable RIP/SAP, Modularity, and SAP query by name.
#
# Revision 3.31.4.17  1996/05/02  07:21:53  dwong
# Branch: California_branch
# Commit SMRP-7kFastSwitch, Load Balancing, and AURP Modularity
#
# Revision 3.31.4.16  1996/05/01  14:20:57  fox
# CSCdi55358:  PPP subsystem needs to be more modular
# Branch: California_branch
# Make PPP NCPs into real subsystems.  Add them to all images where
# PPP and the related network protocol are located.  NCPs are dependant
# on PPP and the related network protocol subsystem but not vice versa.
# Removed $(KERNEL) from FR_SVC_ONLY in order to avoid massive errors
# in modularity builds.
#
# Revision 3.31.4.15  1996/05/01  05:56:12  bew
# CSCdi56301:  Crypto should not be in -tli- images
# Branch: California_branch
# Remove $(CRYPTO) from $(TLI_OPTIONS).
#
# Revision 3.31.4.14  1996/04/30  20:08:00  ralls
# CSCdi56220:  Update Gaia features
# Branch: California_branch
#
# Revision 3.31.4.13  1996/04/29  22:45:16  syiu
# CSCdi55980:  timer_calibrate undefines in 11.2 California_branch
# Branch: California_branch
#
# Revision 3.31.4.12  1996/04/27  15:11:51  tkolar
# Branch: California_branch
# Complete Dial1_branch merge.
#
# Revision 3.31.4.11.2.1  1996/04/27  06:32:13  cakyol
# non sync sync from V112_0_2 to ....
# Branch: LE_Cal_ATM_FR_California_Postsync_960425_branch
#
# Revision 3.31.4.11  1996/04/25  22:56:03  ronnie
# CSCdi55766:  Hey!  This ATM and Frame Relay is no different than in 11.1
# Feature commit for ATM and Frame Relay into 11.2
# Branch: California_branch
#
# Revision 3.31.4.10  1996/04/23  19:25:38  ralls
# CSCdi55428:  Update the gaia packaging data
# Branch: California_branch
#
# Revision 3.31.4.9  1996/04/19  20:18:38  etrehus
# CSCdi52243:  Ethernet not found when -p-l image run from flash
# Add flag that allows it to run from flash properly.
#
# Revision 3.18.8.8  1996/04/25  23:17:00  syiu
# Branch: Dial1_branch
# Sync Dial1_branch to IosSec_postmerge_960419
#
# Revision 3.18.8.7  1996/04/16  20:14:17  syiu
# Branch: Dial1_branch
# Sync Dial1_branch to V111_1_3
#
# Revision 3.18.8.6  1996/03/21  23:48:56  tkolar
# Branch: Dial1_branch
# Add support for multiple incoming tunnels, fix a crash in the resend
# code, and add the beginnings of true authentication.
#
# Revision 3.18.8.5  1996/02/08  21:05:57  perryl
# Branch: Dial1_branch
# Make Virtual Access Interface services available for all images
# that PPP is in.
#
# Revision 3.18.8.4  1996/01/31  18:30:29  tkolar
# Branch: Dial1_branch
# Get all of the VPN code into the repository, with the right names
# and in the right places.
#
# Revision 3.18.8.3  1996/01/26  20:30:43  agh
# Branch: Dial1_branch
# Initial Code Commit for MLPVT.
#
# Revision 3.18.8.2  1996/01/22  18:51:44  syiu
# Branch: Dial1_branch
# Makefile support for L2F
#
# Revision 3.18.8.1  1996/01/18  05:24:42  perryl
# Branch: Dial1_branch
# Virtual Access interface services
#
# Revision 3.31.4.8  1996/04/19  14:30:03  che
# CSCdi55138:  IosSec_branch feature commit
# Branch: California_branch
# IosSecurity feature commits
#
# Revision 3.31.4.7  1996/04/17  13:34:23  fred
# CSCdi54910:  commit rsvp, traffic shaping, and RED
# Branch: California_branch
#
# Revision 3.31.4.6  1996/04/16  18:48:11  rchandra
# CSCdi54830:  IP feature commit
# Branch: California_branch
#
# Revision 3.31.4.5  1996/04/15  21:11:09  bcole
# CSCdi54649:  IP Host Modularity, IP Automatic Stub Routing feature
# commit
# Branch: California_branch
#
# Revision 3.31.4.4  1996/04/13  01:18:15  sgannu
# CSCdi52380:  New OSPF/PIM image for catwoman
# Branch: California_branch
# Create a new image c1005-xy2-mz which has Catwoman IP only + OSPF +PIM.
#
# Revision 3.31.4.3  1996/04/09  08:36:21  jbalestr
# CSCdi53189:  trim bsc test image to minimum ip + bsc + bstun
# Branch: California_branch
#
# Revision 3.31.4.2.4.3  1996/04/21  01:16:41  rbadri
# Branch: LE_Cal_V112_0_2_branch
# Create a new sub-system for TRLANE.
#
# Revision 3.31.4.2.4.2  1996/04/16  18:52:06  cyoung
# Take VTP out of the production images and make it an oddball
# Branch: LE_Cal_V112_0_2_branch
#
# Revision 3.31.4.2.4.1  1996/04/08  02:10:29  bbenson
# Branch: LE_Cal_V112_0_2_branch
# Sync of LE_Cal to new V112_0_2 sync point (post Port Ready).
#
# Revision 3.31.4.2  1996/03/29  07:57:38  dcoli
# CSCdi44879: Create new subset images for 1000s and change some image
# names
# Branch: California_branch
# CiscoPro images need to be sub-setted for 11.1/11.2
#
# Revision 3.31.4.1  1996/03/18  18:45:25  gstovall
# Branch: California_branch
# Elvis has left the building.  He headed out to California, and took the
# port ready changes with him.
#
# Revision 3.31.6.1  1996/03/22  09:32:09  rlowe
# Non-sync Synalc3_LE_Cal_V111_1_0_3_merge_branch to V111_1_3
# yielding LE_Syn_Cal_V111_1_3_branch.
# Branch: LE_Syn_Cal_V111_1_3_branch
#
# Revision 3.31  1996/03/11  07:27:00  jwelder
#         Pull the VIP microcode out of normal c7000 images, add the
#         following images: gs7-kv-mz, gs7-akv-mz, gs7-jv-mz, gs7-ajv-mz,
#         gs7-pv-mz
#
# CSCdi48845:  must restrict VIP ucode to specific GS7 subsets
#
# Revision 3.30  1996/03/10  07:45:40  ahh
# CSCdi50817:  TCP: add ttcp to some images
# (Patch 2 of 2)
#
# Revision 3.29  1996/03/09  00:47:10  nitin
# CSCdi50416:  Move the non supported images to oddball
# Changed the default image for rsp & gs7 to be -j-. Moved the -k- images
# to oddballs. Removed AGS+ images from production rule as not
# supported for 11.1.
#
# Revision 3.28  1996/03/07  21:50:02  rchiao
# CSCdi50987:  take out the RCS magic word
# Replace the magic word with "last comment".
#
# Revision 3.27  1996/03/07  20:49:26  rchiao
# CSCdi50983:  need an empty line after last comment in makfiles
# add an empty line in makefiles right after the last comment. 
#
# Revision 3.26  1996/03/07  08:01:03  irfan
# CSCdi50944:  NASI and Netbios_AS support not in enterprise image
# copy these in -j- image.
#
# Revision 3.25  1996/03/06  11:51:51  mdb
# finish CSCdi50821 fixup.
#
# Revision 3.24  1996/03/06  05:58:21  hampton
# Restore decent build times.  [CSCdi50821]
#
# Revision 3.23  1996/03/01  11:30:54  mdb
# Add a new shl_%.a construct for libraries in platform directories as a
# symlink to the lib%.a file in the generic processor directories. This
# uses the same general mechanism as the shr_%.o construct for sub_%.o
# files. This fix (CSCdi45329) will ensure that libraries such as
# libutil.a need only be built once for each processor type.
#
# Revision 3.22  1996/03/01  02:07:43  jack
# Added the images that include the "v" stuff for VIP support.
# rsp-jv-mz rsp-ajv-mz rsp-pv-mz.
#
# CSCdi48618:  7500 makefiles need to be updated to make rspv-* images
#
# Revision 3.21  1996/02/23  04:19:07  tkolar
# CSCdi49483:  Modem Autoconfig needs to be in a lot more commserver
# images
# Do my fair share to promote image bloat.  Remember, we can't make a
# 4 meg IP-only image without *your* support!
#
# Revision 3.20  1996/02/17  09:07:24  rchiao
# CSCdi49271:  makefile changes for ClearCase
# adding sysroot definition for atria. For obj-* changes, please see
# obj-4k/makefile or obj-68/makefile for example.
#
# Revision 3.19.16.1  1996/03/05  05:41:59  rlowe
# Apply LANE content to merge branch.
# Branch: Synalc3_LE_Cal_V111_1_0_3_merge_branch
#
# Revision 3.19.12.1  1996/02/27  20:39:39  cakyol
# non sync sync of LE_Cal_V111_0_16_branch to V111_1_0_3 yielding
# LE_Cal_V111_1_0_3_branch
# Branch: LE_Cal_V111_1_0_3_branch
#
# Revision 3.19  1996/01/16  09:36:18  billw
# CSCdi46950:  igs-c-l too big.  Remove decnet and advanced routing
# protocols
#
# Revision 3.18.2.2  1996/01/24  01:33:28  cyoung
# VTP MIB support and dependant auto-config base. Part I
# Branch: LE_Cal_V111_0_16_branch
#
# Revision 3.18.2.1  1996/01/11  01:44:05  cakyol
# non sync sync of LE_Calif_branch to V111_0_16 yielding
#     LE_Cal_V111_0_16_branch
#
# Branch: LE_Cal_V111_0_16_branch
#
# Revision 3.18  1996/01/04  00:36:02  gwynne
# CSCdi46366:  Media-specific images required for igs-in-l image
#              feature set
# Also:   - Change copyright end date to 1996
#         - Add save of uncompressed binary size of disk file for
#           self-decompressing images (-mz).
#
# Revision 3.17  1996/01/03  03:31:52  ahh
# CSCdi45528:  Move key manager out of core
#
# Revision 3.16  1995/12/22  05:38:00  ralls
# CSCdi45995:  Make the Heisenberg and null images build
#
# Revision 3.15  1995/12/14  19:37:53  ralls
# CSCdi45537:  Add null and nonbooting images to makefile
#
# Revision 3.14  1995/12/14  08:21:55  jjohnson
# CSCdi44148:  rationalize snmp library services
#
# Revision 3.13  1995/12/12  01:00:56  thille
# CSCdi45397:  Marketing initially unclear about what images they want
# RMON in.
# Create the images they want this week.
#
# Revision 3.12  1995/12/11  23:17:06  billw
# CSCdi42614:  RADIUS is in all images
# include in -j-, -p-, and all 25xx commserver images.
#
# Revision 3.11  1995/12/06  21:51:05  foster
# CSCdi44432:  rsp slave image dependenices are broken
#
# Revision 3.10.2.1  1995/12/23  03:57:28  dcheng
# Branch: LE_Calif_branch
#
# Revision 3.10  1995/12/05  20:58:05  mregan
# CSCdi45029:  xx-ak-m images do not build anymore
# readded a space that was dropped.
#
# Revision 3.9  1995/12/05  01:57:32  sgannu
# CSCdi44879:  Create new subset images for 1000s and change some image
# names
# Fix my previous commit
#
# Revision 3.8  1995/12/04  05:41:29  sgannu
# CSCdi44879:   Create new subset images for 1000s and change some old
# 1000 image names according to the new conventions.
#
# Revision 3.7  1995/12/03  20:40:06  sdurham
# CSCdi44362:  envmon is non-modular w.r.t envmon mib
#     OOPH! forgot to remove sub_envmib.o from rsp-boot-m image!
#
# Revision 3.6  1995/12/03  17:55:47  thille
# CSCdi44905:  ciscopro targets not in 11.1
# Put them in.
#
# Revision 3.5  1995/11/28  11:00:44  tli
# CSCdi43711:  SP subset dropped X.25
#
# Revision 3.4  1995/11/22  05:41:03  eschaffe
# CSCdi42241:  PROTOCONVERT is TRUE for images that don't include the PT
# option.
# Obsolete PROTOCONVERT flag in makefiles.  The control for defining
# protocolconversion for an image is now platform_specific.
#
# Revision 3.3  1995/11/18  07:56:47  tkolar
# CSCdi42613:  Ident should not be in all images
# Shuffle poor Ident off to small feature Siberia (-j image)
#
# Revision 3.2  1995/11/17  08:32:34  hampton
# Remove old entries from the RCS header logs.
#
# Revision 3.1  1995/11/09  10:48:30  shaker
# Bump version numbers from 2.x to 3.x.
#
# Revision 2.22  1995/11/08  20:47:22  shaker
# Merge Arkansas_branch into 11.1 mainline.
#
# Revision 2.21  1995/10/11  00:45:15  sroach
# CSCdi41879:  Add BSC test command support
#
# Revision 2.20  1995/10/10  17:39:01  gwynne
# CSCdi41859:  Desktop image igs-d-l > 4MB. Need smaller desktop image.
# Add makefile variables required to subset a desktop image < 4MB. Add
# the
# image to the oddballs for nightly build and limited availability.
# (gwynne)
#
# Revision 2.19  1995/09/25  08:35:06  tli
# CSCdi40960:  ISP jumbo patch 2
#
# Revision 2.18  1995/09/23  23:43:17  tli
# CSCdi40952:  tli needs a diet
# Remove more unnecessary code.
#
# Revision 2.17  1995/09/23  21:24:27  dkatz
# CSCdi38306:  ISIS shouldnt run SPF on leaf route changes
# Rework subsystems for ISIS.
#
# Revision 2.16  1995/09/18  00:31:30  richl
# CSCdi40521:  ATM_DXI typo breaks nightly build
#
# Revision 2.15  1995/09/17  23:01:07  richl
# CSCdi40518:  Add BiSync to LES -ir- images
#
# Revision 2.14  1995/09/15  02:12:30  dcoli
# CSCdi39433:  Bad Encapulation Error
# Break frame_relay and atm_dxi into separate object modules.
#
# Revision 2.13  1995/09/13  23:31:20  gchristy
# CSCdi40315:  Add test subset back into -p image
# - Remove bridging dependencies from cbus_test.c.
#
# Revision 2.12  1995/09/04  01:00:50  richl
# CSCdi39767:  Add BiSync to -r- images on low end
#
# Revision 2.11  1995/09/03  23:53:55  richl
# CSCdi39765:  Modularity: modular-ip broken in nightly build
# Change makefile variables so routing mibs aren't always included
# with routing protocols.
#
# Revision 2.10  1995/09/02  00:13:03  richl
# CSCdi39729:  QLLC should be part of IBM base.
#
# Revision 2.9  1995/08/25  00:47:00  biren
# Move the TCL-based LANE/ATM signalling test tool to a seperate subsytem
# (atmtest).
#
# CSCdi39304:  Move TCL-based LANE/ATM test tool to separate subsystem
#
# Revision 2.8  1995/08/24  23:18:01  gchristy
# CSCdi39294:  NTP missing from service provider image
#
# Revision 2.7  1995/08/24  22:58:48  gchristy
# CSCdi39210:  Remove bridging from service provider images
#
# Revision 2.6  1995/08/17  18:38:52  jjohnson
# CSCdi38712:  dont build modular_notyet in everything target
# modular_dlsw was mistakenly promoted to the modular category.
# it is still broken
#
# Revision 2.5  1995/08/14  14:50:14  richl
# CSCdi38712:  dont build modular_notyet in everything target
#              move fixed targets from modular_notyet to modular
#
# Revision 2.4  1995/08/10  12:33:38  richl
# CSCdi38543:  modular-dialer includes dialer twice
#
# Revision 2.3  1995/08/08  22:41:06  richl
# CSCdi38432:  dspu subsystem causing confusion, rename it
#
# Revision 2.2  1995/08/07  05:27:02  richl
# CSCdi38315:  makefile rework
#
# Revision 2.1  1995/06/07  19:58:58  hampton
# Bump version numbers from 1.x to 2.x.
#
#------------------------------------------------------------------
# $Endlog$
#
ifeq ($(origin SYSROOT), undefined)
SYSROOT :=     $(shell ../scripts/sysroot)
endif
#
# "External" references which should be defined before including
# this file are:
#      LIBRARY=	(eg. gcclib.o for unix targets)
#      PLATFORM= (C2500, C4000, AGS, etc..., the PLATFORM dependent code)

#######################################################################
#
# Subsystem group labels
#
#######################################################################

# Each of the following FAST_SWITCH modules are define in the platform 
# makefile

FASTSWITCH =	$(FAST_MEDIA) \
		$(FAST_ATALK) \
		$(FAST_ATSMRP) \
		$(FAST_CLNS) \
		$(FAST_DECNET) \
		$(FAST_IP) \
		$(FAST_TUNNEL) \
		$(FAST_IPMCAST) \
		$(FAST_IPX) \
		$(FAST_TBRIDGE) \
		$(FAST_VINES) \
		$(FAST_XNS) 

#######################################################################
#
# Group definitions 
#
#######################################################################
#
# Dependent LU Requester requires/uses APPN protocols
#
APPN_DLUR=      $(APPN) $(DLUR) $(APPNMIB) $(APPNMIB_SHARE) $(APPNUTIL)

ATALK =		$(ATALK_CORE) $(ATALK_MIB) $(ATALK_AURP) $(ATALK_IP) $(ATALK_EIGRP) \
		$(ATALK_TEST)
ATALK_NOAURP =  $(ATALK_CORE) $(ATALK_MIB) $(ATALK_IP) $(ATALK_EIGRP) \
		$(ATALK_TEST)
BRIDGE_SMALL =	$(BRIDGE_T)
CLNS =		$(CLNS_CORE) $(ISIS_IP) $(ISIS_CLNS) $(ISIS_NLSP_CORE) \
		$(ISIS_NLSP_DEBUG) $(EON)

#
# Various IP option sets 
#
CORE_IP =	$(IPUDPTCP) $(IPCORE) $(IPBOOT) $(TACACS) \
		$(IPAPPS) $(IPDIAG) $(IPGDP) $(HPPROBE) \
		$(IPRARP) $(IPBOOTP) $(IPDNS) $(IPACCOUNT) $(IPALIAS) \
		$(IPCOMPRS) $(IPHTTP) $(PLATFORM_HTTP)
CORE_IP_C1000=  $(IPUDPTCP) $(IPCORE) $(IPBOOT) $(TACACS) \
		$(IPAPPS) $(IPDIAG) \
		$(IPRARP) $(IPBOOTP) $(IPDNS) $(IPACCOUNT) $(IPALIAS) \
		$(IPCOMPRS) $(IPHTTP) $(PLATFORM_HTTP)
CORE_IP_RBOOT=  $(IPUDPTCP) $(IPCORE) $(IPBOOT) \
		$(IPAPPS) $(IPDIAG) \
		$(IPRARP) $(IPBOOTP) $(IPDNS) $(IPACCOUNT) $(IPALIAS) \
		$(IPCOMPRS) $(IPHTTP) $(PLATFORM_HTTP)
CORE_IPROUTE =	$(IPROUTE_STATIC) $(IPFAST) $(IPSERVICES1) $(IPCDP)
CORE_IPROUTE_MIN = $(IPROUTE_STATIC) $(IPFAST) $(IPSERVICES1)

#
# CORE_XLITE is core for null image
# CORE_LITE is minimal boot nucleus.
# CORE represents minimal router nucleus.  
# CORE_SRS is the same as core, but it has a different platform section
# CORE_XTRA are the non-modular pieces required for linking CORE 
#		IPCP is added here because IPCORE is in CORE* (thru CORE_IP)
#		CCP is added here because COMPRESS is in CORE_XTRA
#		CDP_NCP is added here because CDP exists in most CORE images
# 
CORE_XLITE =    $(KERNEL) $(PLATFORM_SUPPORT_LITE)
CORE_LITE =	$(KERNEL) $(PLATFORM_SUPPORT) $(FASTSWITCH_CORE) $(ARP) \
		$(TRAFFIC_SHAPE)
CORE =		$(CORE_LITE) $(ROUTING) $(IBM_CORE) $(CORE_IP) \
		$(CORE_IPROUTE) $(CDP)
CORE_C1000 = 	$(CORE_LITE) $(ROUTING) $(TCPIP) $(COMPRESS) $(DIALER) \
	        $(DHCP)  $(IPROUTE_MIN) $(BRIDGE_T) $(EIGRP) \
		$(KEYMAN) $(CORE_IP_C1000) $(CORE_IPROUTE) $(CDP) $(SNTP)
CORE_MIN = 	$(CORE_LITE) $(ROUTING) $(IBM_CORE) $(CORE_IP) \
                $(CORE_IPROUTE_MIN)
CORE_SRS =	$(KERNEL) $(PLATFORM_SUPPORT_SRS) $(FASTSWITCH_CORE) \
		$(ROUTING) $(IBM_CORE) $(CORE_IP) $(CORE_IPROUTE) $(ARP) $(CDP)
CORE_XTRA =     $(PPP) $(IPCP) $(COMPRESS) $(CCP) $(DIALER) \
                $(VTEMPLATE) $(CDP_NCP)

DECNET =	$(DECNET_IV) $(DECNET_MIB) $(DECNET_CNV)
#
# ibm_srs is for the source-route-switch  
# ibm_base is for all but the enterprise
# ibm_base_mibs are the mib components for the base
# ibm_xtras are for enterprise j and enterprise k images
#
IBM_DSW  = 	$(SRBCORE) $(SRB_SB)
IBM_CORE = 	$(SRBCORE)
IBM_BASE =	$(IBM_NETMAN) $(LANMGR) $(LANMGRREGSITRY) $(NETBIOS) $(SNA_PRIORITY) \
		$(STUN) $(SDLC) $(OPT_SERIAL) $(BRIDGE_SR) $(OPT_RSRB) \
		$(SDLLC) $(LACK) $(CLS) $(VDLC) $(DLSW) $(DLC_SW) \
		$(SNA_PU) $(PCBUS_LNM) $(SNANM)  $(RTTMON) $(NCIA) \
		$(RTT_DSPU) $(RTT_SNANM)
IBM_BASE_MIBS = $(RSRBMIB) $(STUNMIB) $(SDLLCMIB) $(CDLSWMIB) \
		$(BRIDGE_SR_MIB) $(RTTMONMIB)
IBM_FIN_OPTIONS= $(IBM_NETMAN) $(LANMGR) $(LANMGRREGSITRY) $(NETBIOS) $(SNA_PRIORITY) \
                $(STUN) $(SDLC) $(OPT_SERIAL) $(BRIDGE_SR) $(OPT_RSRB) \
                $(SDLLC) $(LACK) $(CLS) $(VDLC) $(DLSW) $(DLC_SW) \
                $(SNA_PU) $(PCBUS_LNM) $(SNANM) \
                $(RSRBMIB) $(STUNMIB) $(SDLLCMIB) $(CDLSWMIB) \
		$(BRIDGE_SR_MIB) $(BSC) $(BSTUN) $(BSTUNMIB)
IBM_FIN_OPTIONS_MINUS_LANMGR = $(NETBIOS) $(SNA_PRIORITY) \
		$(STUN) $(SDLC) $(OPT_SERIAL) $(BRIDGE_SR) $(OPT_RSRB) \
                $(SDLLC) $(LACK) $(CLS) $(VDLC) $(DLSW) $(DLC_SW) \
                $(SNA_PU) $(SNANM) \
                $(RSRBMIB) $(STUNMIB) $(SDLLCMIB) $(CDLSWMIB) \
		$(BRIDGE_SR_MIB) $(BSC) $(BSTUN) $(BSTUNMIB)
IBM_R_OPTIONS=	$(IBM_BASE) $(IBM_BASE_MIBS) $(QLLC) $(BSC) $(BSTUN) \
		$(BSTUNMIB) $(OPT_DSPU) $(DSPUMIB) 

#
# iproute_min  - does not contain ospf, bgp, egp, multicast etc...
# iproute - has it all, including ip multicast
# note: move EIGRP from CORE_XTRA, once it has been modularized
#
IPROUTING_PROTOCOLS = $(BGP) $(EGP) $(IGRP) $(RIP) $(OSPF) $(IPEIGRP)
IPROUTE_MIN =   $(RIP) $(IGRP) $(IPSERVICES) $(IPEIGRP)
IPROUTE_MIN_PLUS_OSPF = $(RIP) $(IPSERVICES) $(OSPF)
IPROUTE_STRIPPED =   $(RIP) $(IGRP) $(IPSERVICES)
IPROUTE_LITE =  $(IPROUTING_PROTOCOLS) $(IPSERVICES) 
IPROUTE_LITE_MIBS = $(BGP_MIB) $(EGP_MIB) $(OSPF_MIB) 
IPROUTE =	$(IPROUTE_LITE) $(IPMULTICAST) $(IPPOLICY) \
		$(NHRP) $(IPNHRP) $(RSVP)
IPROUTE_ISP =	$(IGRP) $(RIP) $(OSPF) $(IPEIGRP) $(IPSERVICES) $(IPMULTICAST) \
		$(IPPOLICY) $(NHRP) $(IPNHRP) $(RSVP)
IPROUTE_MIBS =	$(IPROUTE_LITE_MIBS) $(IPMULTICAST_MIBS) $(RSVP_MIB)
IPROUTE_ISP_MIBS = $(OSPF_MIB) $(IPMULTICAST_MIBS) $(RSVP_MIB)
IPROUTE_NAS =	$(IPROUTE_MIN) $(IPMULTICAST) $(IPPOLICY)
IPROUTE_NAS_MIBS = $(IPMULTICAST_MIBS)
IPROUTE_SUPPORT =	$(IPFAST) $(IPSERVICES1)
#
IPX = 		$(IPX_LITE) $(IPX_MIBS) $(IPX_COMPRESSION) $(IPX_EIGRP) \
		$(IPXWAN)
IPX_MINUS_EIGRP = $(IPX_LITE) $(IPX_MIBS) $(IPX_COMPRESSION) \
		$(IPXWAN)
IPX_FULL =	$(IPX) $(IPX_NLSP) $(IPX_NLSP_MIBS) $(IPXNHRP)
ISIS_NLSP_CORE =$(CLNS_ADJ) $(ISIS)
NTP =		$(NTP_CORE) $(NTP_REFCLOCK) $(NTP_REFCLOCK_MASTER) \
		$(NTP_REFCLOCK_PPS) $(NTP_REFCLOCK_TELSOL)
NTP_BASIC =	$(NTP_CORE) $(NTP_REFCLOCK) $(NTP_REFCLOCK_MASTER)
NTP_MINIMAL =	$(NTP_CORE)
#
# pt_proto_min - base protocol translator software
# pt_proto     - base pt + pad
#
PT_PROTO_MIN =	$(PT) $(PT_LAT) $(PT_TCP) $(PT_SLIP_PPP)\
		$(PT_TCPLAT) $(PT_LATSLIP) $(PT_TCPSLIP) 
PT_PROTO =	$(PT_PROTO_MIN) $(PT_PAD) $(PT_LATPAD) $(PT_PADTCP) $(PT_AUTO)
PT_PROTO_FULL =	$(PT_PROTO) $(PT_TCPAUTO) $(PT_LATAUTO) $(PT_PADAUTO) \
	        $(PT_PADSLIP)
SMRP =		$(SMRP_CORE) $(SMRP_TEST)
TS =		$(COMMSERVER) $(TN3270) $(XREMOTE) $(MENUS) \
		$(LPD) $(MODEMCAP) $(CHAT)
VINES =  	$(VINES_CORE) $(VINES_MIB) $(VINES_TEST)
#
# PPP is in everything via CORE_XTRA due to serial modularity problems
# DIALER is on everything via CORE_XTRA due to PPP.
# ISDN defined within platform makefiles' DRIVERS definition since it is not
# supported on all platforms
#
WAN_SMALL =	$(SNAPSHOT)  $(SNAPSHOTMIB) $(QUEUEMIB)
WAN_C1000 =	$(PPP) $(IPCP) $(CCP) $(CDP_NCP) $(CHAT) $(WAN_SMALL) \
	        $(VTEMPLATE)
WAN_REDUCED =	$(WAN_SMALL) $(FRAME_RELAY) $(FRAME_RELAY_MIB) $(ATM_DXI) \
		$(FRAME_RELAY_ARP) $(FRAME_RELAY_TRAFFIC)
WAN_BIG = 	$(WAN_REDUCED) $(SMDS) $(FRAME_RELAY_SVC) $(FRAME_RELAY_TUNNEL)
WAN =		$(WAN_REDUCED) $(SMDS)
WAN_ISP =	$(WAN_SMALL) $(FRAME_RELAY) $(FRAME_RELAY_MIB) \
		$(FRAME_RELAY_ARP) $(FRAME_RELAY_TRAFFIC) $(SMDS)
	
#
XNS =		$(XNS_CORE) $(XNS_MIB) $(GRIPROUTE)

###############################################################################
#
# Production Images
#
###############################################################################

#
# Boot images.  (igs-boot-r, xx-boot-r, c4500-boot-m, rsp-boot-m)
#
BOOT_OPTIONS =	$(CORE_XTRA) \
		$(LLC2) $(DLC_BASE) $(X25) $(PAD) $(FRAME_RELAY) $(SMDS) \
		$(ATM_DXI)

BOOT_BOPTIONS = $(FRAME_RELAY) $(SMDS) $(PPP) $(COMPRESS) $(DIALER) \
                $(X25) $(PAD) $(LLC2) $(DLC_BASE)

SUBSET_BOOT =	$(DRIVERS_BOOT) $(CORE) $(PLATFORM_PARTS) \
		$(BOOT_OPTIONS) 

SUBSET_BBOOT =  $(DRIVERS_BOOT) $(CORE_LITE) $(PLATFORM_PARTS) $(IBM_CORE) $(CORE_IP) $(BOOT_BOPTIONS)

SUBSET_RBOOT =	$(DRIVERS_RBOOT) $(CORE_LITE) $(CORE_IP_RBOOT) $(IBM_CORE)


#         
# Distributed switching image (VIP stle IP's running IOS in c7k/rsp)
# 
SUBSET_DSW =    $(KERNEL) $(ETHER) $(SERIAL) $(TRING) $(IBM_DSW) \
        $(DRIVERS_DSW) $(PLATFORM_SUPPORT_DSW) $(IPC) $(TEST) $(TRAFFIC_SHAPE)


#
# Network Access Server (Enterprise Commserver, igs-c-l)
#
FAST_NAS = 	$(FAST_MEDIA) $(FAST_IP) $(FAST_TUNNEL) \
		$(FAST_IPMCAST) $(FAST_TBRIDGE) \
		$(FAST_ATALK) $(FAST_IPX)
NAS_C_OPTIONS= 	$(CORE_XTRA) $(DHCP_CLIENT) \
		$(COMMSERVER) $(MENUS) $(LPD) $(ARAP) $(XREMOTE) $(TN3270) \
		$(LAT) $(PT_PROTO_FULL) $(MOP) \
		$(IPROUTE_NAS) $(EIGRP) $(IPROUTE_NAS_MIBS) \
		$(IPX) $(SNMP) $(ATALK) $(WAN_REDUCED) $(CHAT) $(LLC2) $(DLC_BASE) \
		$(NTP) $(TEST) $(NETBIOS_ACL) $(BRIDGE_T) $(BRIDGE_T_MIB) \
		$(X25) $(X25MIBS) \
		$(PAD) $(ISIS_NLSP_DEBUG) $(DES) $(NETBIOS_AS) $(IPX_NASI) \
		$(MODEMCAP) $(KEYMAN) $(VPN) $(MLPVT) \
		$(ATCP) $(IPXCP) $(NBFCP) $(IBM_INTERFACE) \
		$(SYSLOG_HISTORY)
SUBSET_NAS_C=	$(DRIVERS_NAS) $(FAST_NAS) $(CORE) $(DRIVERS_NAS_MIBS) \
		$(PLATFORM_PARTS) $(MIBS) $(NAS_C_OPTIONS) $(RADIUS)

#
# Y = IP image for the 1000 platform 
#
FAST_Y = $(FAST_IP) $(FAST_TBRIDGE)
OPTIONS_Y = $(WAN_C1000) $(X25) $(LLC2) $(PAD) $(DLC_BASE) \
		$(X25MIBS)
SUBSET_Y = $(DRIVERS) $(FAST_Y) $(CORE_C1000) $(DRIVER_MIBS) $(MIBS) \
	   $(PLATFORM_PARTS) $(SNMP) $(OPTIONS_Y)
#
# BY = IP/ATALK image for the 1000 platform 
#
FAST_BY = $(FAST_ATALK) $(FAST_IP) $(FAST_TBRIDGE)
OPTIONS_BY = $(OPTIONS_Y) $(ATALK_CORE) $(ATALK_EIGRP) $(ATCP)
SUBSET_BY = $(DRIVERS) $(FAST_BY) $(CORE_C1000) $(DRIVER_MIBS) $(MIBS) \
	   $(PLATFORM_PARTS) $(SNMP) $(OPTIONS_BY)
#
# BNY = IP/ATALK/IPX image for the 1000 platform 
#
FAST_BNY = $(FAST_ATALK) $(FAST_IP) $(FAST_IPX) $(FAST_TBRIDGE)
OPTIONS_BNY = $(OPTIONS_BY) $(IPXCP) $(IPX) $(NETBIOS_ACL) $(ISIS_NLSP_DEBUG)\
	      $(IBM_INTERFACE)
SUBSET_BNY = $(DRIVERS) $(FAST_BNY) $(CORE_C1000) $(DRIVER_MIBS) \
	     $(PLATFORM_PARTS) $(MIBS) $(SNMP) $(OPTIONS_BNY)
#
# NY = IP/IPX image for the 1000 platform 
#
FAST_NY = $(FAST_IP) $(FAST_IPX) $(FAST_TBRIDGE)
OPTIONS_NY = $(OPTIONS_Y) $(IPXCP) $(IPX) $(NETBIOS_ACL) $(ISIS_NLSP_DEBUG)
SUBSET_NY = $(DRIVERS) $(FAST_NY) $(CORE_C1000) $(DRIVER_MIBS) \
	    $(PLATFORM_PARTS) $(MIBS) $(SNMP) $(OPTIONS_NY) $(IBM_INTERFACE) 

#
# NQY = IP Ansync
#
FAST_NQY = $(FAST_IP) $(FAST_TBRIDGE) $(FAST_IPX)
OPTIONS_NQY = $(ASYNC_SERIAL_HTTP) $(COMMSERVER) $(IPXCP) $(IPX) \
	      $(NETBIOS_ACL) $(ISIS_NLSP_DEBUG) $(WAN_C1000) $(IBM_INTERFACE)
SUBSET_NQY = $(DRIVERS_ASYNC) $(FAST_NQY) $(CORE_C1000) $(DRIVER_MIBS) \
	     $(PLATFORM_PARTS) $(MIBS) $(SNMP) $(OPTIONS_NQY)
#
# QY = IP Ansync
#
FAST_QY = $(FAST_IP) $(FAST_TBRIDGE)
OPTIONS_QY = $(ASYNC_SERIAL_HTTP) $(COMSERVER) $(WAN_C1000)
SUBSET_QY = $(DRIVERS_ASYNC) $(FAST_QY) $(CORE_C1000) $(DRIVER_MIBS) \
	    $(PLATFORM_PARTS) $(MIBS) $(SNMP) $(OPTIONS_QY) $(IBM_INTERFACE)
#
# Y2 = IP/OSPF/PIM
#
FAST_Y2 = $(FAST_IP) $(FAST_TBRIDGE) $(FAST_IPMCAST)
OPTIONS_Y2 = $(COMSERVER) $(WAN_C1000) \
	     $(OSPF) $(PIM_OSPF_MIBS) $(IPMULTICAST) \
		$(X25) $(PAD) $(LLC2) $(DLC_BASE) $(X25MIBS)
SUBSET_Y2 =  $(DRIVERS) $(FAST_Y2) $(CORE_C1000) $(DRIVER_MIBS) \
	    $(PLATFORM_PARTS) $(MIBS) $(SNMP) $(OPTIONS_Y2)

#
# ISDN subset.  
#
FAST_G = 	$(FAST_IP) $(FAST_TUNNEL) $(FAST_IPMCAST) \
		$(FAST_TBRIDGE) $(FAST_IPX) $(FAST_ATALK)
G_OPTIONS =	$(CORE_XTRA) $(DHCP_CLIENT) \
		$(IPROUTE) $(EIGRP) $(IPROUTE_MIBS) \
		$(BRIDGE_T) $(BRIDGE_T_MIB) \
		$(WAN_SMALL) $(CHAT) $(SNMP) \
		$(ATALK_CORE) $(ATALK_MIB) \
		$(IPX) $(ISIS_NLSP_DEBUG) $(NETBIOS_ACL) $(KEYMAN) \
		$(ATCP) $(IPXCP) $(IBM_INTERFACE) $(RADIUS)
SUBSET_G =	$(DRIVERS_G) $(FAST_G) $(CORE) $(DRIVERS_G_MIBS) \
		$(PLATFORM_PARTS) $(MIBS) $(G_OPTIONS)

#
# Frame Relay Access Device
# fastsrb_les.o should not be a part of this image, needs work!
#
FAST_F =	$(FAST_MEDIA) $(FAST_IP) $(FAST_TBRIDGE) \
		fastsrb_les.o
F_OPTIONS =  	$(CORE_XTRA) \
		$(IPROUTE_LITE) $(EIGRP) $(IPROUTE_LITE_MIBS) \
		$(FRAME_RELAY) $(FRAME_RELAY_MIB) $(ATM_DXI) \
		$(FRAME_RELAY_ARP) $(FRAME_RELAY_TRAFFIC) \
	  	$(BRIDGE_T) $(BRIDGE_T_MIB) \
		$(DLC_BASE) $(LLC2) $(NETBIOS_ACL) \
		$(IBM_FIN_OPTIONS) $(SNMP) \
		$(KEYMAN) $(IBM_INTERFACE) $(RADIUS)
SUBSET_F =	$(DRIVERS_F) $(FAST_F) $(CORE) $(DRIVERS_F_MIBS) \
		$(PLATFORM_PARTS) $(MIBS) $(F_OPTIONS) $(SYSLOG_HISTORY)

#
# LAN-Frame Relay Access Device
#
FAST_FIN =    $(FAST_MEDIA) $(FAST_IP) $(FAST_TBRIDGE) \
              $(FAST_IBM) $(FAST_IPX)
FIN_OPTIONS = $(CORE_XTRA) \
              $(IPROUTE_MIN) $(EIGRP) $(WAN_REDUCED) $(CHAT) \
              $(BRIDGE_T) $(DLC_BASE) $(LLC2) $(NETBIOS_ACL) $(KEYMAN) \
	      $(IBM_INTERFACE) $(SNMP) $(IBM_FIN_OPTIONS) $(IPX) \
	      $(ISIS_NLSP_DEBUG) $(RADIUS)
SUBSET_FIN =  $(DRIVERS_FIN) $(FAST_FIN) $(CORE) $(DRIVERS_FIN_MIBS) \
              $(PLATFORM_PARTS) $(MIBS) $(FIN_OPTIONS) $(SYSLOG_HISTORY)

FINO_OPTIONS = $(CORE_XTRA) \
              $(IPROUTE_MIN_PLUS_OSPF) $(WAN_REDUCED) $(CHAT) \
              $(BRIDGE_T) $(DLC_BASE) $(LLC2) $(NETBIOS_ACL) $(KEYMAN) \
	      $(IBM_INTERFACE) $(SNMP) $(IBM_FIN_OPTIONS_MINUS_LANMGR) $(IPX_MINUS_EIGRP) \
	      $(ISIS_NLSP_DEBUG)
SUBSET_FINO =  $(DRIVERS_FINO) $(FAST_FIN) $(CORE) $(DRIVERS_FIN_MIBS) \
              $(PLATFORM_PARTS) $(MIBS) $(FINO_OPTIONS) $(SYSLOG_HISTORY)

#
# Service Provider subset
#
FAST_P =  	$(FAST_MEDIA) $(FAST_IP) $(FAST_TUNNEL) \
		$(FAST_IPMCAST) $(FAST_CLNS) 
P_OPTIONS =	$(CORE_XTRA) $(DHCP_CLIENT) $(NAS_P_OPTIONS) $(IPROUTE) $(EIGRP) \
	  	$(IPROUTE_MIBS) $(CLNS) $(SNMP) $(WAN) $(CHAT) $(NTP) $(TEST) \
		$(FTP) $(LLC2) $(DLC_BASE) $(X25) $(X25MIBS) $(PAD) $(KEYMAN) \
		$(IPTTCP) $(IPNACL) \
		$(SYSLOG_HISTORY) $(RADIUS)
SUBSET_P = 	$(DRIVERS) $(FAST_P) $(CORE) $(DRIVER_MIBS) \
		$(PLATFORM_PARTS) $(MIBS) $(P_OPTIONS)

#
# IP Routing images
#
FAST_SW_IP=	$(FAST_MEDIA) $(FAST_IP) $(FAST_TUNNEL) \
		$(FAST_IPMCAST) $(FAST_TBRIDGE) 
IP_OPTIONS=	$(CORE_XTRA) $(DHCP_CLIENT) \
		$(NAS_I_OPTIONS) $(IPROUTE) $(EIGRP) $(IPROUTE_MIBS) $(SNMP) $(WAN) $(CHAT) \
		$(NTP) $(TEST) $(LLC2) $(DLC_BASE) $(X25) $(X25MIBS) $(PAD) \
		$(NETBIOS_ACL) $(BRIDGE_T) $(BRIDGE_T_MIB) $(FTP) $(KEYMAN) \
		$(MODEMCAP) $(IPNACL) $(IBM_INTERFACE) $(RADIUS)
IP_NO_X25=	$(CORE_XTRA) $(DHCP_CLIENT) \
		$(NAS_I_OPTIONS) $(IPROUTE) $(EIGRP) $(IPROUTE_MIBS) $(SNMP) $(WAN) $(CHAT) \
		$(NTP) $(TEST) $(LLC2) $(DLC_BASE) \
		$(NETBIOS_ACL) $(BRIDGE_T) $(BRIDGE_T_MIB) $(FTP) $(KEYMAN) \
		$(MODEMCAP) $(IBM_INTERFACE)
SUBSET_IP=      $(DRIVERS) $(FAST_SW_IP) $(CORE) $(DRIVER_MIBS) \
		$(PLATFORM_PARTS) $(MIBS) $(IP_OPTIONS)  \
		$(SYSLOG_HISTORY)
#
# ISP images
#
FAST_SW_ISP=	$(FAST_MEDIA) $(FAST_IP) $(FAST_TUNNEL) \
		$(FAST_IPMCAST)
ISP_OPTIONS=	$(CORE_XTRA) $(DHCP_CLIENT) \
		$(NAS_P_OPTIONS) $(IPROUTE_ISP) $(EIGRP) $(IPROUTE_ISP_MIBS) $(SNMP) $(WAN_ISP) $(CHAT) \
		$(NTP) $(TEST) $(LLC2) $(DLC_BASE) $(X25) $(X25MIBS) $(PAD) \
		$(FTP) $(KEYMAN) $(IPTTCP) \
		$(MODEMCAP) $(IPNACL) $(RADIUS)
SUBSET_ISP=	$(DRIVERS_ISP) $(FAST_SW_ISP) $(CORE) $(DRIVER_MIBS) \
		$(PLATFORM_PARTS) $(MIBS) $(ISP_OPTIONS)  \
		$(SYSLOG_HISTORY) \
		$(MLPVT) $(VPN)
#
# IP/IPX images
#
FAST_IPIPX=	$(FAST_MEDIA) $(FAST_IP) $(FAST_TUNNEL) \
		$(FAST_IPMCAST) $(FAST_IPX) $(FAST_TBRIDGE)
IPIPX_OPTIONS=	$(CORE_XTRA) $(DHCP_CLIENT) \
		$(NAS_I_OPTIONS) $(IPROUTE) $(EIGRP) $(IPROUTE_MIBS) $(SNMP) $(WAN) $(CHAT) \
		$(NTP) $(TEST) $(LLC2) $(DLC_BASE) $(X25) $(X25MIBS) $(PAD) \
		$(BRIDGE_T) $(BRIDGE_T_MIB) $(IPX_FULL) $(ISIS_NLSP_CORE) \
		$(ISIS_NLSP_DEBUG) $(NETBIOS_ACL) $(KEYMAN) $(MODEMCAP) \
		$(IPXCP) $(IBM_INTERFACE) $(RADIUS)
IPIPX_NO_X25=	$(CORE_XTRA) $(DHCP_CLIENT) \
		$(NAS_I_OPTIONS) $(IPROUTE) $(EIGRP) $(IPROUTE_MIBS) $(SNMP) $(WAN) $(CHAT) \
		$(NTP) $(TEST) $(LLC2) $(DLC_BASE) \
		$(BRIDGE_T) $(BRIDGE_T_MIB) $(IPX_FULL) $(ISIS_NLSP_CORE) \
		$(ISIS_NLSP_DEBUG) $(NETBIOS_ACL) $(KEYMAN) $(MODEMCAP) \
		$(IPXCP) $(IBM_INTERFACE)

SUBSET_IPIPX=   $(DRIVERS) $(FAST_IPIPX) $(CORE) $(DRIVER_MIBS) \
		$(PLATFORM_PARTS) $(MIBS) $(IPIPX_OPTIONS) \
		$(SYSLOG_HISTORY)
SUBSET_IPIPX_IBM= $(SUBSET_IPIPX) $(FAST_IBM) $(IBM_R_OPTIONS)
SUBSET_AINR=	$(SUBSET_IPIPX_IBM) $(APPN_DLUR)

#
# VLAN image based on IPIPX and VLAN
#
SUBSET_INU= $(SUBSET_IPIPX) $(VLANS) $(IBM_NETMAN) \
	    $(LANMGR) $(LANMGRREGSITRY) $(NETBIOS) $(SNA_PRIORITY) \
	    $(BRIDGE_SR) $(LACK) $(CLS) $(FAST_IBM_SRB_ONLY) \
	    $(IPNAT) $(FAST_IPNAT)

#
# Desktop images
#
FAST_DT=	$(FAST_MEDIA) $(FAST_IP) $(FAST_TUNNEL) \
		$(FAST_IPMCAST) $(FAST_TBRIDGE) \
		$(FAST_DECNET) $(FAST_ATALK) $(FAST_ATSMRP) $(FAST_IPX) 
DT_OPTIONS=	$(CORE_XTRA) $(DHCP_CLIENT) \
		$(NAS_D_OPTIONS) $(DECNET_IV) $(DECNET_MIB) $(MOP) \
		$(IPROUTE) $(EIGRP) $(IPROUTE_MIBS) \
		$(IPX_FULL) $(SNMP) $(ATALK) $(WAN)  $(CHAT) $(NTP) $(LLC2) \
		$(DLC_BASE) $(TEST) $(BRIDGE_T) $(BRIDGE_T_MIB) \
		$(X25) $(X25MIBS) $(PAD) \
		$(ISIS_NLSP_DEBUG) $(ISIS_NLSP_CORE) \
		$(NETBIOS_ACL) $(SMRP) $(KEYMAN) $(MODEMCAP) \
		$(ATCP) $(IPXCP) $(IBM_INTERFACE) $(IPNACL) $(RADIUS) $(FTP)
SUBSET_DT=	$(DRIVERS) $(FAST_DT) $(CORE) $(DRIVER_MIBS) \
		$(PLATFORM_PARTS) $(MIBS) $(DT_OPTIONS) \
		$(SYSLOG_HISTORY)

SUBSET_ADT=	$(SUBSET_DT) $(APPN_DLUR)

#
# Enterprise back to a single flavor
# J == with NAS (Note: extent of NAS support depends on platform)
# AJ == J image plus APPN/DLUR
# JMZ == J image plus RMON
J_OPTIONS=      $(CORE_XTRA) $(DHCP_CLIENT) \
		$(MOP) $(IPROUTE) $(EIGRP) $(IPROUTE_MIBS) $(SNMP) $(NTP) $(TEST) \
		$(VINES) $(APOLLO) $(DECNET) $(IPX_FULL) $(XNS) $(ATALK)  \
		$(WAN_BIG) $(CHAT) $(CLNS) $(LLC2) $(NETBIOS_ACL) $(X25) \
		$(X25MIBS) $(PAD) $(DLC_BASE) $(BRIDGE_T) $(BRIDGE_T_MIB) \
		$(IBM_INTERFACE) $(SMRP) $(FTP) $(TARP) $(KEYMAN) \
		$(IPTTCP) $(IPNACL) $(ATCP) $(IPXCP) $(COMMSERVER) $(MENUS) \
		$(NBFCP) $(XREMOTE) $(TN3270) $(LAT) \
		$(PT_PROTO_FULL) $(NAS_J_OPTIONS) $(MODEMCAP) $(IPAUTHSVCS) \
		$(IDENT) $(RADIUS) $(NETBIOS_AS) $(IPX_NASI) \
		$(BRIDGE_T_CMF) $(SYSLOGMIB) $(SYSLOG_HISTORY) 
SUBSET_J=	$(DRIVERS) $(FASTSWITCH) $(CORE) $(DRIVER_MIBS) \
		$(PLATFORM_PARTS) $(MIBS) $(J_OPTIONS)  
SUBSET_AJ=	$(SUBSET_J) $(APPN_DLUR) 
#
# Redefine the enterprise now with additional parts which are redundant
# with the PLUS. 
#
SUBSET_JR=	$(SUBSET_J) $(FAST_IBM) $(IBM_R_OPTIONS) $(VLANS) $(MLPVT) \
		$(VPN)
SUBSET_AJR=	$(SUBSET_AJ) $(FAST_IBM) $(IBM_R_OPTIONS) $(VLANS) $(MLPVT) \
		$(VPN)

#
# PLUS options definition
#
PLUS = $(PLATFORM_PLUS) $(FAST_IBM) $(IBM_R_OPTIONS) $(MLPVT) $(VPN)

#
# 40bit and 56bit Encryption
#

PLUS40 = $(PLUS) $(EXPORT_CRYPTO) $(CRYPTO_RSP_OPTION) $(CRYPTO_MIB)  
PLUS56 = $(PLUS) $(CRYPTO) $(CRYPTO_RSP_OPTION) $(CRYPTO_MIB)

###############################################################################
#
# Oddball Images
#
###############################################################################
#
# Appletalk test image
# Notes: Gateway server IP, ATALK, WAN, PPP, ISDN, FLASH, DIALER
#
FAST_TATALK=	$(FAST_MEDIA) $(FAST_TBRIDGE) $(FAST_IP) \
		$(FAST_TUNNEL) $(FAST_IPMCAST) $(FAST_ATALK) 
TATALK_OPTIONS=	$(CORE_XTRA) \
		$(IPROUTE) $(EIGRP) $(IPROUTE_MIBS) $(BRIDGE_T) $(BRIDGE_T_MIB) \
		$(WAN) $(CHAT) $(X25) $(X25MIBS) $(PAD) \
		$(LLC2) $(DLC_BASE) $(SNMP) $(TEST) $(ATALK_CORE) $(ATALK_MIB) \
		$(ATCP) $(IBM_INTERFACE)
SUBSET_TATALK=	$(DRIVERS) $(DRIVER_MIBS) $(FAST_TATALK) $(CORE) \
		$(PLATFORM_PARTS) $(MIBS) $(TATALK_OPTIONS) 
#
# BSC/BSTUN test image
#
FAST_TBSC = 	$(FAST_IP) $(BSC_TST) $(BSTUN_TST) $(BSTUNMIB)
TBSC_OPTIONS = 	$(CORE_XTRA) $(IPROUTE) $(EIGRP) $(IPROUTE_MIBS) $(FAST_TBSC) \
	        $(SNMP)
SUBSET_TBSC =	$(DRIVERS) $(DRIVER_MIBS) $(CORE) $(PLATFORM_PARTS) $(MIBS) \
		$(TBSC_OPTIONS)

#
# Tony Li's engineering special image
# Notes: COMPRESS and EIGRP are not used, and could go away if things 
# were modularlized correctly.  They are included in CORE_XTRA.
#
TLI_OPTIONS=	$(CORE_XTRA)
SUBSET_TLI=	$(DRIVERS) $(CORE_MIN) $(PLATFORM_PARTS) $(TLI_OPTIONS)

#
# Bruce Cole's engineering special test image
#
BCOLE_OPTIONS= $(IPCORE) $(IPACCOUNT)
SUBSET_BCOLE=   $(PLATFORM_SUPPORT) $(KERNEL) $(FASTSWITCH_CORE) $(ROUTING) \
	$(ARP) $(ETHER) $(SERIAL) $(PLATFORM_NONMODULAR) $(UCODE) \
	$(BCOLE_OPTIONS)

#
# Andy Heffernan's engineering special image
# absolute minimal IP/NAT/MULTICAST for 100x
#
FAST_TYAHH = $(FAST_IP) $(FAST_IPNAT) $(FAST_IPMCAST)
OPTIONS_TYAHH = $(PPP) $(IPCP) $(CCP) $(CDP_NCP) $(CHAT) \
	$(IPNAT) $(IPMULTICAST)
SUBSET_TYAHH = $(DRIVERS) $(FAST_TYAHH) $(CORE_C1000) $(ISDN) $(BRI) \
	$(OPTIONS_TYAHH)

# Just null image, no media, no console, no network management, no netboot
SUBSET_NULL = $(CORE_XLITE) 
SUBSET_HEISENBERG = $(KERNEL) $(PLATFORM_REQ)

#
# DDR test image
# Notes: Gateway server IP, ATALK, IPX, PPP, ISDN, FLASH, DIALER
#        This image contains everything needed to test ddr.
#
TDDR_OPTIONS =  $(CORE_XTRA) $(DHCP_CLIENT) \
		$(ATALK) $(IPX) $(NETBIOS_ACL) $(ISIS_NLSP_DEBUG) \
		$(IPROUTE) $(EIGRP) $(IPROUTE_MIBS) $(WAN_SMALL) $(CHAT) $(SNMP) \
		$(ATCP) $(IPXCP) $(IBM_INTERFACE)
SUBSET_TDDR =	$(DRIVERS) $(DRIVER_MIBS) $(CORE) $(PLATFORM_PARTS) $(MIBS) \
		$(TDDR_OPTIONS)

#
# IP + CLNS test image
#
FAST_TIC = 	$(FAST_IP) $(FAST_TUNNEL) $(FAST_IPMCAST) $(FAST_CLNS)
TIC_OPTIONS =  	$(CORE_XTRA) $(DHCP_CLIENT) $(CLNS) $(IPROUTE) $(EIGRP) $(KEYMAN)
SUBSET_TIC =	$(DRIVERS) $(FAST_TIC) $(CORE) $(PLATFORM_PARTS) \
		$(TIC_OPTIONS)

#
# IP test image
# Notes: Includes IP everything, but little else. 
#
FAST_TIP = 	$(FAST_IP)
TIP_OPTIONS =  	$(CORE_XTRA) $(DHCP_CLIENT) $(IPROUTE) $(EIGRP) $(IPROUTE_MIBS) $(SNMP)
SUBSET_TIP =	$(DRIVERS) $(DRIVER_MIBS) $(CORE) $(PLATFORM_PARTS) $(MIBS) \
		$(TIP_OPTIONS)

#
# IP + VINES test image
#
FAST_TIV = 	$(FAST_IP) $(FAST_TUNNEL) $(FAST_IPMCAST) $(FAST_VINES) 
TIV_OPTIONS =  	$(CORE_XTRA) $(DHCP_CLIENT) $(VINES) $(IPROUTE) $(EIGRP) $(IPROUTE_MIBS) \
	        $(SNMP)
SUBSET_TIV =	$(DRIVERS) $(DRIVER_MIBS) $(CORE) $(PLATFORM_PARTS) $(MIBS) \
	        $(TIV_OPTIONS)

# GAIA stuff
include $(SYSROOT)/make.bom
include $(SYSROOT)/make.bom.oddballs
include $(SYSROOT)/make.linkorder
include $(SYSROOT)/make.gaiarules

#	mv $@ $@.$(PLATFORM_IMAGE_PREFIX)
###############################################################################
#
# Modularity test builds
#
###############################################################################
NONMODULAR_STUFF = $(SERIAL) $(ETHER) $(TRING) $(ARP) $(CORE_XTRA) \
                   $(IBM_CORE) $(CORE_IP) $(IPROUTE_STATIC) $(TRAFFIC_SHAPE)
		   
		 
NUCLEUS = $(PLATFORM_SUPPORT) $(KERNEL) $(FASTSWITCH_CORE) $(ROUTING)
NUCLEUS := $(NUCLEUS) $(NONMODULAR_STUFF) $(PLATFORM_NONMODULAR) $(UCODE)

APOLLO_ONLY=	$(APOLLO) $(GRIPROUTE)
APPN_ONLY=	$(APPN)
ATAURP_ONLY =	$(ATALK_CORE) $(ATALK_AURP) $(IPROUTE_MIN) $(EIGRP)
ATIP_ONLY =	$(ATALK_CORE) $(ATALK_IP) $(ISIS_NLSP_DEBUG) \
		$(IPROUTE_STRIPPED) $(ATCP)
AT_ONLY =	$(ATALK_CORE) $(ATCP)
CLNS_ONLY=	$(CLNS) $(IPSERVICES)
# for now, dialer included in DIALER_ONLY via CORE_XTRA via NONMODULAR_STUFF.  
DIALER_ONLY=	
DLSW_ONLY=	$(DLSW) $(CLS) $(DLC_BASE)
DN_ONLY=	$(DECNET_IV)

FR_ONLY=  	$(FRAME_RELAY) $(ATM_DXI) $(FRAME_RELAY_ARP) \
		$(FRAME_RELAY_TRAFFIC)
FR_AND_ARP_ONLY=$(FRAME_RELAY) $(FRAME_RELAY_TRAFFIC) $(FRAME_RELAY_ARP)
FR_SVC_ONLY=    $(FRAME_RELAY_SVC)
FR_AND_SVC_ONLY=$(FRAME_RELAY) $(FRAME_RELAY_SVC)

IP_ONLY=	$(IPROUTE) $(EIGRP) $(IPROUTE_SUPPORT)
IPX_ONLY =	$(IPX_LITE) $(NETBIOS_ACL) $(ISIS_NLSP_DEBUG) $(IBM_INTERFACE)
IPXEIGRP_ONLY =	$(IPX_ONLY) $(IPX_EIGRP) $(EIGRP)
IPXWAN_ONLY =   $(IPX_ONLY) $(IPXWAN)
NLSP_ONLY =	$(IPX_ONLY) $(IPX_NLSP) $(ISIS_NLSP_CORE)
MOP_ONLY=	$(MOP)
SMDS_ONLY=	$(SMDS)
SNAPSHOT_ONLY=	$(SNAPSHOT)
SNTP_ONLY=	$(IP_ONLY) $(SNTP)
TB_ONLY=	$(BRIDGE_T)
VAX_ONLY=	$(DECNET_IV) $(DECNET_CNV) $(CLNS) $(IPROUTE_STRIPPED)
VINES_ONLY=	$(VINES_CORE)
VLANS_ONLY=	$(VLANS) 
XNS_ONLY=	$(XNS_CORE) $(GRIPROUTE)
X25_ONLY =	$(X25) $(PAD) $(LLC2) $(DLC_BASE)

#
# Released image object lists.
#
# Note the image-<partial object> naming. This is used to build the
# rule dynamically, so adhere to it.
#

#
# c1000 specific image
#
image-gs-by	= $(SUBSET_BY)		 	  $(UTIL) 
image-gs-bny	= $(SUBSET_BNY)			  $(UTIL) 
image-gs-bnsy	= $(SUBSET_BNY)	$(PLATFORM_PLUS)  $(UTIL) 
image-gs-y	= $(SUBSET_Y)			  $(UTIL) 
image-gs-y2	= $(SUBSET_Y2)			  $(UTIL) 
image-gs-ny	= $(SUBSET_NY)			  $(UTIL) 
image-gs-nqy    = $(SUBSET_NQY)			  $(UTIL)
image-gs-qy     = $(SUBSET_QY)           	  $(UTIL)
image-gs-bnsy56	= $(SUBSET_BNY) $(PLATFORM_PLUS) \
		  $(CRYPTO) $(CRYPTO_MIB)	  $(UTIL)
image-gs-bnsy40	= $(SUBSET_BNY) $(PLATFORM_PLUS) \
		  $(EXPORT_CRYPTO) $(CRYPTO_MIB)  $(UTIL)
image-gs-tyahh	= $(SUBSET_TYAHH)		  $(UTIL) 

# 
# c2500 specific images
#
image-gs-fin	= $(SUBSET_FIN)		$(UTIL)
image-gs-f2in	= $(SUBSET_FINO)	$(UTIL)
image-gs-f	= $(SUBSET_F)		$(UTIL)
image-gs-g	= $(SUBSET_G)		$(UTIL)
image-gs-c	= $(SUBSET_NAS_C)	$(UTIL) 

#
# c5200 specific image
#
image-gs-p3	= $(SUBSET_ISP)	$(UTIL) $(UCODE)

#
# c7200 specific image
#
image-gs-inu	= $(SUBSET_INU)	$(UTIL) $(UCODE)

#
# Standard cross-platform images 
#
image-gs-ainr	= $(SUBSET_AINR) $(UTIL) $(UCODE)
image-gs-p	= $(SUBSET_P)	 $(UTIL) $(UCODE)
image-gs-pv	= $(SUBSET_P)	 $(UTIL) $(UCODEV)

#
# Standard crosss-platform images which also have option sets
#
image-gs-i	= $(SUBSET_IP)	$(UTIL) $(UCODE)
image-gs-d	= $(SUBSET_DT)	$(UTIL) $(UCODE)
image-gs-j	= $(SUBSET_JR)	$(UTIL) $(UCODE)
image-gs-jv	= $(SUBSET_JR)	$(UTIL) $(UCODEV)
image-gs-aj	= $(SUBSET_AJR)	$(UTIL) $(UCODE)
image-gs-ajv	= $(SUBSET_AJR)	$(UTIL) $(UCODEV)
# plus
image-gs-ajs	= $(SUBSET_AJ)	$(PLUS) $(UTIL) $(UCODE)
image-gs-ajsv	= $(SUBSET_AJ)	$(PLUS) $(UTIL) $(UCODEV)
image-gs-is	= $(SUBSET_IP)	$(PLUS) $(UTIL) $(UCODE)
image-gs-isv	= $(SUBSET_IP)	$(PLUS) $(UTIL) $(UCODEV)
image-gs-ads	= $(SUBSET_ADT)	$(PLUS) $(UTIL) $(UCODE)
image-gs-adsv	= $(SUBSET_ADT)	$(PLUS) $(UTIL) $(UCODEV)
image-gs-ds	= $(SUBSET_DT)	$(PLUS) $(UTIL) $(UCODE)
image-gs-dsv	= $(SUBSET_DT)	$(PLUS) $(UTIL) $(UCODEV)
image-gs-js	= $(SUBSET_J)	$(PLUS) $(UTIL) $(UCODE)
image-gs-jsv	= $(SUBSET_J)	$(PLUS) $(UTIL) $(UCODEV)
# plus-40
image-gs-ajs40	= $(SUBSET_AJ)	$(PLUS40) $(UTIL) $(UCODE)
image-gs-ajsv40	= $(SUBSET_AJ)	$(PLUS40) $(UTIL) $(UCODECV)
image-gs-is40	= $(SUBSET_IP)	$(PLUS40) $(UTIL) $(UCODE)
image-gs-isv40	= $(SUBSET_IP)	$(PLUS40) $(UTIL) $(UCODECV)
image-gs-ds40	= $(SUBSET_DT)	$(PLUS40) $(UTIL) $(UCODE)
image-gs-dsv40	= $(SUBSET_DT)	$(PLUS40) $(UTIL) $(UCODECV)
image-gs-js40	= $(SUBSET_J)	$(PLUS40) $(UTIL) $(UCODE)
image-gs-jsv40	= $(SUBSET_J)	$(PLUS40) $(UTIL) $(UCODECV)
# plus-56
image-gs-ajs56	= $(SUBSET_AJ)	$(PLUS56) $(UTIL) $(UCODE)
image-gs-ajsv56	= $(SUBSET_AJ)	$(PLUS56) $(UTIL) $(UCODECV)
image-gs-is56	= $(SUBSET_IP)	$(PLUS56) $(UTIL) $(UCODE)
image-gs-isv56	= $(SUBSET_IP)	$(PLUS56) $(UTIL) $(UCODECV)
image-gs-ds56	= $(SUBSET_DT)	$(PLUS56) $(UTIL) $(UCODE)
image-gs-dsv56	= $(SUBSET_DT)	$(PLUS56) $(UTIL) $(UCODECV)
image-gs-js56	= $(SUBSET_J)	$(PLUS56) $(UTIL) $(UCODE)
image-gs-jsv56	= $(SUBSET_J)	$(PLUS56) $(UTIL) $(UCODECV)

#
# boot image (igs, c5200, xx, 4500, 7200, rsp)
#

image-gs-boot	= $(SUBSET_BBOOT)      	$(UTIL)

# 
# boot image (1000)
#
image-gs-rboot	= $(SUBSET_RBOOT)      	$(UTIL)

image-gs-dw	= $(SUBSET_DSW)		$(UTIL)

#
# "Unofficial", curious and oddball images.  Described below.
#
# gs-ic -- Gateway server IP and CLNS routing only image
# gs-iv -- Gateway server IP and VINES routing only image
# gs-jtrlane -- Token Ring LANE special
# gs-tjsvtp -- enterprise gateway server with VTP for development purposes
# gs-kpgen -- kitchen sink gateway server with packet generator
# gs-ktcl -- kitchen sink gateway server with tcl as a shell
# gs-manu -- special manufacturing version with kitchen sink gateway server
# gs-rem -- kitchen sink gateway server with remote interfaces
# gs-tli -- tli's subset
#
image-gs-tatalk = $(SUBSET_TATALK) 	  $(UTIL) $(UCODE)
image-gs-tbsc   = $(SUBSET_TBSC)          $(UTIL) $(UCODE)
image-gs-tddr   = $(SUBSET_TDDR)	  $(UTIL) $(UCODE)
image-gs-tic    = $(SUBSET_TIC)		  $(UTIL) $(UCODE)
image-gs-tip    = $(SUBSET_TIP)		  $(UTIL) $(UCODE)
image-gs-tiv    = $(SUBSET_TIV)		  $(UTIL) $(UCODE)
image-gs-jtrlane = $(SUBSET_J) $(OPT_TRLANE) $(UTIL) $(UCODE)
image-gs-tjsvtp  = $(SUBSET_J) $(PLUS) $(VTP) $(VTPPRUNE) $(VTPMIB) \
                   $(UTIL) $(UCODEV) 
image-gs-tjmanu = $(SUBSET_J) $(MANU)	  $(UTIL) $(UCODE)
image-gs-tjpgen = $(SUBSET_J) $(PGEN)	  $(UTIL) $(UCODE)
image-gs-tjrem  = $(SUBSET_J) $(REM)	  $(UTIL) $(UCODE)
image-gs-tjtcl  = $(SUBSET_J) $(TCL)	  $(UTIL) $(UCODE)
image-gs-tjatm  = $(SUBSET_J) $(ATM_TEST) $(UTIL) $(UCODE)
image-gs-tli    = $(SUBSET_TLI)           $(UTIL) $(UCODE)
image-gs-cdw	= $(SUBSET_DSW) $(CRYPTO_VIP) $(UTIL)
image-gs-cddw	= $(SUBSET_DSW) $(CRYPTO_VIP) $(PAS_DIAG) $(UTIL)
image-gs-tbcole = $(SUBSET_BCOLE)         $(UTIL)

#
#Null and minimal images for engineering base
#
image-gs-tnull = $(SUBSET_NULL)      $(NUTIL) 
image-gs-tmin  = $(SUBSET_HEISENBERG)    $(NUTIL) 

#
# Modular linking image list
#
# Note the image-<partial object> naming. This is used to build the
# rule dynamically, so adhere to it.
#
image-modular-apollo	 = $(NUCLEUS) $(APOLLO_ONLY)	  $(UTIL)
image-modular-appn	 = $(NUCLEUS) $(APPN_ONLY)	  $(UTIL)
image-modular-at	 = $(NUCLEUS) $(AT_ONLY)	  $(UTIL)
image-modular-ataurp	 = $(NUCLEUS) $(ATAURP_ONLY)	  $(UTIL)
image-modular-atip	 = $(NUCLEUS) $(ATIP_ONLY)	  $(UTIL)
image-modular-clns	 = $(NUCLEUS) $(CLNS_ONLY)	  $(UTIL)
image-modular-dialer	 = $(NUCLEUS) $(DIALER_ONLY)	  $(UTIL)
image-modular-dlsw	 = $(NUCLEUS) $(DLSW_ONLY)	  $(UTIL)
image-modular-dn	 = $(NUCLEUS) $(DN_ONLY)	  $(UTIL)
image-modular-fr	 = $(NUCLEUS) $(FR_ONLY)	  $(UTIL)
image-modular-fr-svc     = $(NUCLEUS) $(FR_SVC_ONLY)      $(UTIL)
image-modular-ip	 = $(NUCLEUS) $(IP_ONLY)	  $(UTIL)
image-modular-ipx	 = $(NUCLEUS) $(IPX_ONLY)	  $(UTIL)
image-modular-ipxeigrp	 = $(NUCLEUS) $(IPXEIGRP_ONLY)	  $(UTIL)
image-modular-ipxwan	 = $(NUCLEUS) $(IPXWAN_ONLY)	  $(UTIL)
image-modular-mop	 = $(NUCLEUS) $(MOP_ONLY)	  $(UTIL)
image-modular-nlsp	 = $(NUCLEUS) $(NLSP_ONLY)	  $(UTIL)
image-modular-smds	 = $(NUCLEUS) $(SMDS_ONLY)	  $(UTIL)
image-modular-snapshot   = $(NUCLEUS) $(SNAPSHOT_ONLY)    $(UTIL)
image-modular-snmp	 = $(NUCLEUS) $(SNMP_ONLY)	  $(UTIL)
image-modular-sntp	 = $(NUCLEUS) $(SNTP_ONLY)	  $(UTIL)
image-modular-tb	 = $(NUCLEUS) $(TB_ONLY)	  $(UTIL)
image-modular-tiny 	 = $(NUCLEUS)  	  		  $(UTIL)
image-modular-ukernel	 = $(OS_UKERNEL) ukernel_tmpstubs.o $(UTIL) $(POSTLIBS)
image-modular-vax	 = $(NUCLEUS) $(VAX_ONLY)	  $(UTIL)
image-modular-vines	 = $(NUCLEUS) $(VINES_ONLY)	  $(UTIL)
image-modular-vlans	 = $(NUCLEUS) $(VLANS_ONLY)	  $(UTIL)
image-modular-x25	 = $(NUCLEUS) $(X25_ONLY)	  $(UTIL)
image-modular-xns	 = $(NUCLEUS) $(XNS_ONLY)	  $(UTIL)
  
# Babylon

image-gs-special	= $(SUBSET_SPECIAL) 	$(UTIL)



#############################################################################
#
# Rules for build procedures
#
#############################################################################

#
# Sequences for builds
#
# Finished gagging yet? They're fun, aren't they? You'll find documentation
# on this particular feature in the make Info documentation under the title
# of Sequences. They're basically macros for Makefiles, without any
# parameter passing (which is why I go the whole hog and use the
# dynamically built variable name image-$* to pass the object list)
#
# The blank line between the sequence and the endef is intentional. Leave
# it alone...
#

#
# Make_Common_Objects
#
# This takes the $(image-$*) definition, strips everything but the shr_foo.o
# subsystem names out of it and converts them to sub_foo.o. It then kicks
# a build off in the common directory with those names. When that's
# finished, it relinks all the softlinks from the local directory to
# common one.
#

define Make_Common_Objects
$(QUIET_COM)echo Building Common Objects...
$(QUIET_CMD)$(MAKE) $(MAKEFLAG-J) FROMLEGO=1 --no-print -C ../$(OBJECTS) \
  $(patsubst shl_%.a,lib%.a,$(filter shl_%.a,$(image-$*))) \
  $(patsubst shr_%.o,sub_%.o,$(filter shr_%.o,$(image-$*)))
$(QUIET_CMD)$(foreach subsys,$(filter shr_%.o,$(image-$*)),$(Relink_Common_Objects))
$(QUIET_CMD)$(foreach subsys,$(filter shl_%.a,$(image-$*)),$(Relink_Common_Libraries))

endef
#
# Make_Platform_Objects
#
# This is quite simple. It takes $(image-$*), strips all of the shr_foo.o
# subsystem names out and builds the rest of the objects
#
define Make_Platform_Objects
$(QUIET_COM)echo Building Platform Objects...
$(QUIET_CMD)$(MAKE) $(MAKEFLAG-J) FROMLEGO=1 --no-print \
  $(filter-out shr_%.o, $(filter-out shl_%.a, $(image-$*)))

endef

#
# Relink_Common_Objects
#
# This is used by Make_Common_Objects to do the ln -s relinking
#

define Relink_Common_Objects
$(QUIET_CMD)rm -f $(subsys)
$(QUIET_CMD)ln -s ../$(OBJECTS)/$(patsubst shr_%.o,sub_%.o,$(subsys)) $(subsys)

endef

define Relink_Common_Libraries
$(QUIET_CMD)rm -f $(subsys)
$(QUIET_CMD)ln -s ../$(OBJECTS)/$(patsubst shl_%.a,lib%.a,$(subsys)) $(subsys)

endef

#############################################################################
#
# Rules for building partial images
#
#############################################################################

ifeq ($(OBJECTS),)

# %.lego  -- Vanilla implicit rule for building the partial image from
#            various assorted building block objects without Common Objects
#
%.lego:	
	$(QUIET_COM)echo Building $@...
	$(MAKE) -C $(SYSROOT) all_derived_source
	$(QUIET_CMD)$(MAKE) $(MAKEFLAG-J) FROMLEGO=1 --no-print $(image-$*)

else

# %.lego  -- Implicit rule for building the partial image from various
#            assorted building block objects with Common Objects
#
%.lego:
	$(QUIET_COM)echo Building $@...
	$(MAKE) -C $(SYSROOT) all_derived_source
	$(Make_Platform_Objects)
	$(Make_Common_Objects)

endif

#########################################################################
#                                  NOTICE
#Please do not change the form or content of the version string without
#coordinating such changes with others dependent upon the content.
#
#The following dependencies are known:
#
#rsym          - for automatically generating symbols from stack traces.
#                uses the image name and the version to locate symbol
#                files. 
#autons        - parses show version output.
#CiscoWorks    - depends upon sh version output to identify
#                version and image names.
#Manufacturing - parses show version output to verify images loaded.
#########################################################################

#############################################################################
#
# Adding a new image:
#
#       0)      Make sure that you have added an entry to the 
#               image objects list above (for example: image-gs-d).
#
#       1)      Find the group that your image belongs in, and
#               add the FLAGS_<image_name> appropriate to it. 
#
#               The groups are: ROM (image name ends in "-r", RAM (netbootable,
#               image name ends in "-m", Relocatable (image name ends in "-l")
#               Flash (image name ends in "-f"), Bootstrap (image name
#               contains "boot"), Oddball/Engineering Special (image name
#               is virtually anything.)
#               
#       2)      Make sure that any new Compile flag variable (SWFLAGS_<flag>)
#               or Hardware flag variables (HWFLAGS_<flag>) you need
#               are defined.
#
#       3)      Example: Add new production image xx-dx-m
#               o Add image-gs-dx to the image objects list
#               o Add FLAGS_gs-dx-m to the RAM image variables list below.
#               o Verify that the HWFLAGS_ and SWFLAGS_ used are defined
#                 in the "Compile flag variables for main-% targets", below.
#
#############################################################################

#############################################################################
#
# Compile flag variables for the main-% targets
#
#############################################################################

SWFLAGS_b               = b
SWFLAGS_bc3             = bc3
SWFLAGS_bs              = bs
SWFLAGS_bx              = bx
SWFLAGS_bxBOOT          = bxBOOT
SWFLAGS_bxc3            = bxc3
SWFLAGS_bxl             = bxl
SWFLAGS_bxlc2           = bxlc2
SWFLAGS_bxlPGEN         = bxlPGEN
SWFLAGS_NONE            = NONE
SWFLAGS_rb              = rb
SWFLAGS_rbl             = rbl
SWFLAGS_rbx             = rbx
SWFLAGS_rbxBOOT         = rbxBOOT
SWFLAGS_rbxl            = rbxl
SWFLAGS_rbxlc1          = rbxlc1
SWFLAGS_rbxlc2          = rbxlc2

HWFLAGS_bt              = bt

#############################################################################
#
# Platform image identification (platform image prefix values for cisco.sh):
#
#############################################################################

STD_PREFIX          = PLATFORM_PREFIX=$(PLATFORM_IMAGE_PREFIX)

#############################################################################
#
# ROM image compile flags:
#
#############################################################################

FLAGS_gs-d-r    = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-dmr-r  = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-dr-r   = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-f-r    = SWFLAGS=$(SWFLAGS_rb) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-g-r    = SWFLAGS=$(SWFLAGS_rb) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-i-r    = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-im-r   = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-imr-r  = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-in-r   = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-inr-r  = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-ir-r   = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-j-r    = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-jm-r   = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)


#############################################################################
#
# RAM image (netbootable) compile flags:
#
#############################################################################

FLAGS_gs-ads-m   = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-adsv-m   = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-ainr-m = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-aj-m   = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-ajv-m   = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-ajs-m   = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-ajs40-m   = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-ajs56-m   = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-ajsv-m   = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-ajsv56-m   = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-jsv56-m   = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-jsv40-m   = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-ajsv40-m   = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-by-m   = SWFLAGS=$(SWFLAGS_bx) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-bny-m  = SWFLAGS=$(SWFLAGS_bx) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-bnsy-m  = SWFLAGS=$(SWFLAGS_bx) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-bnsy56-m  = SWFLAGS=$(SWFLAGS_bx) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-bnsy40-m  = SWFLAGS=$(SWFLAGS_bx) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-c-m    = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-d-m    = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-ds-m    = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-dsv-m    = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-ds40-m    = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-dsv40-m    = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-ds56-m    = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-dsv56-m    = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-dw-m   = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-cdw-m	= SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-cddw-m	= SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-i-m    = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-il-m    = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-is-m    = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-isv-m    = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-isv40-m    = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-is40-m    = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-isv56-m    = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-is56-m    = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-inu-m  = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-j-m    = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-jv-m    = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-js-m    = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-jsv-m    = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-js40-m    = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-js40v-m    = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-js56-m    = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-js56v-m    = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-ny-m   = SWFLAGS=$(SWFLAGS_bx) HWFLAGS=$(HWFLAGS)   $(STD_PREFIX)
FLAGS_gs-ny40-m   = SWFLAGS=$(SWFLAGS_bx) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-ny56-m   = SWFLAGS=$(SWFLAGS_bx) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-nqy-m	= SWFLAGS=$(SWFLAGS_bx) HWFLAGS=$(HWFLAGS)   $(STD_PREFIX)
FLAGS_gs-p-m    = SWFLAGS=$(SWFLAGS_bx) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-pv-m    = SWFLAGS=$(SWFLAGS_bx) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-qy-m	= SWFLAGS=$(SWFLAGS_bx) HWFLAGS=$(HWFLAGS)   $(STD_PREFIX)
FLAGS_gs-y-m    = SWFLAGS=$(SWFLAGS_bx) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-y2-m    = SWFLAGS=$(SWFLAGS_bx) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-y56-m    = SWFLAGS=$(SWFLAGS_bx) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-y40-m    = SWFLAGS=$(SWFLAGS_bx) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-tyahh-m  = SWFLAGS=$(SWFLAGS_b) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)


#############################################################################
#
# Relocatable image compile flags :
#
#############################################################################

FLAGS_gs-ads-l   = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-ainr-l = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-aj-l   = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-ajs-l   = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-ajs40-l   = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-ajs56-l   = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-c-l    = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-d-l    = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-ds-l    = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-ds40-l    = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-ds56-l    = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-f-l    = SWFLAGS=$(SWFLAGS_rb)   HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-fin-l  = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-f2in-l  = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-g-l    = SWFLAGS=$(SWFLAGS_rb)   HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-i-l    = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-is-l    = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-is40-l    = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-is56-l    = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-j-l    = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-js-l	= SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-js40-l	= SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-js56-l	= SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-p-l    = SWFLAGS=$(SWFLAGS_rbx) HWFLAGS=$(HWFLAGS) $(STD_PREFIX) 
FLAGS_gs-p3-l   = SWFLAGS=$(SWFLAGS_rbx) HWFLAGS=$(HWFLAGS) $(STD_PREFIX) 

#############################################################################
#
# Flash image compile flags:
#
#############################################################################

FLAGS_gs-c-f    = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-d-f    = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-dmr-f  = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-dr-f   = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-f-f    = SWFLAGS=$(SWFLAGS_rb)   HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-fin-f  = SWFLAGS=$(SWFLAGS_rbl)  HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-f2in-f  = SWFLAGS=$(SWFLAGS_rbl)  HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-g-f    = SWFLAGS=$(SWFLAGS_rb)   HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-i-f    = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-im-f   = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-imr-f  = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-in-f   = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-inr-f  = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-ir-f   = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-j-f    = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-jm-f   = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)

#############################################################################
#
# Bootstrap image compile flags:
#
#############################################################################

FLAGS_gs-boot-r = SWFLAGS=$(SWFLAGS_rbxBOOT) HWFLAGS=$(HWFLAGS_bt) $(STD_PREFIX)
FLAGS_gs-rboot-r= SWFLAGS=$(SWFLAGS_rbxBOOT) HWFLAGS=$(HWFLAGS_bt) $(STD_PREFIX)
FLAGS_gs-boot-c = SWFLAGS=$(SWFLAGS_rbxBOOT) HWFLAGS=$(HWFLAGS_bt) $(STD_PREFIX)
FLAGS_gs-boot-m = SWFLAGS=$(SWFLAGS_bxBOOT) HWFLAGS=$(HWFLAGS_bt) $(STD_PREFIX)
FLAGS_gs-boot-l = SWFLAGS=$(SWFLAGS_rbxBOOT) HWFLAGS=$(HWFLAGS_bt) $(STD_PREFIX)

#############################################################################
#
# Engineering special images
#
# "Unofficial", curious and oddball images
#
#############################################################################

FLAGS_gs-tatalk-m = SWFLAGS=$(SWFLAGS_NONE) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-tddr-m   = SWFLAGS=$(SWFLAGS_NONE) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-tic-m    = SWFLAGS=$(SWFLAGS_NONE) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-tip-m    = SWFLAGS=$(SWFLAGS_NONE) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-tiv-m    = SWFLAGS=$(SWFLAGS_NONE) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-jtrlane-m   = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-tjsvtp-m  = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-tjmanu-m = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-tjpgen-m = SWFLAGS=$(SWFLAGS_bxlPGEN) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-tjrem-m  = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-tjtcl-m  = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-tjatm-m  = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-tli-m    = SWFLAGS=$(SWFLAGS_NONE) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-crypto-m    = SWFLAGS=$(SWFLAGS_NONE) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-crypto-l    = SWFLAGS=$(SWFLAGS_NONE) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-ecrypto-m   = SWFLAGS=$(SWFLAGS_NONE) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-ecrypto-l   = SWFLAGS=$(SWFLAGS_NONE) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-tbsc-m   = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-tbcole-m = SWFLAGS=$(SWFLAGS_NONE) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)

                
# 4MB Desktop images - RAM image (netbootable) compile flags:

FLAGS_gs-td4-m    = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)

# 4MB Desktop images - Relocatable image compile flags :

FLAGS_gs-td4-l    = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)

#
#engineering block images - RAM image (netbootable) compile flags:
#
FLAGS_gs-tnull-m    = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-tmin-m = SWFLAGS=$(SWFLAGS_bxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
 
#
#engineering block images - Relocatable image compile flags :
#
FLAGS_gs-tnull-l    = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
FLAGS_gs-tmin-l = SWFLAGS=$(SWFLAGS_rbxl) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)
#
#rsp-monlib-m
FLAGS_gs-monlib-m = SWFLAGS=$(SWFLAGS_NONE) HWFLAGS=$(HWFLAGS) $(STD_PREFIX)

#############################################################################
#
# Engineering image target rules
#
#############################################################################

main-%:
	$(REMAKE) $(FLAGS_$*) OBJNAME=$@ main
	@PLATFORM_IMAGE_SUFFIX=`echo $* | tr '[a-z]' '[A-Z]' | \
	sed 's/-/ /1' | awk '{print $$2}'`; \
	$(FLAGS_$*) ; \
	HWSWNAME=$* COMP="$(CC) $(CFLAGS)" \
	flock $(SYSROOT)/version $(SYSROOT)/cisco.sh \
	"$(PLATFORM_IMAGE_GROUP) Software ($$PLATFORM_PREFIX-$$PLATFORM_IMAGE_SUFFIX)" \
	$(SYSTEM_LABEL) $(PLATFORM) "$(CC) $(CFLAGS)" TRUE
	

###########################################################################
#
#                        Modular Test Images
#
# These are images built to ensure that at least the obvious modular coding
# practices are maintained.  These images should always compile and link
# properly, but are not intended for field use.  They are typically created
# by the nightly build task.
#
###########################################################################
# $(PLATFORM) is the string that causes the version script to select 
# the correct compiler.  The target "modular" creates the version of 
# main.o to be used.
#
############################################################################

#
# These test images compile and link cleanly
#
MODULAR = modular-apollo modular-at modular-ataurp modular-atip modular-clns modular-dialer \
	modular-dn modular-fr modular-fr-svc modular-ip \
	modular-ipx modular-ipxeigrp modular-ipxwan modular-mop \
	modular-nlsp modular-smds modular-snapshot modular-snmp modular-sntp\
	modular-tb modular-tiny modular-ukernel modular-vax modular-vines \
	modular-x25 modular-xns

#
# The modular image definitions are also used for the modularity-check-% 
# target.
#
MODULARITY_CHECK = $(MODULAR:modular-%=modularity-check-%)

#
# These ones need work!
#
MODULAR_NOTYET= modular-dlsw 

#
# The main for the MODULAR builds
# 
main-modular:
	$(REMAKE) SWFLAGS=bxl HWFLAGS=$(HWFLAGS) OBJNAME=$@ main

modular-%: main-modular $(SYS_START_FILE) modular-%.lego
	@HWSWNAME=modular-$* COMP="$(CC) $(CFLAGS)" \
	flock $(SYSROOT)/version $(SYSROOT)/cisco.sh \
	"cisco Software" "Test " $(PLATFORM) "$(CC) $(CFLAGS)" TRUE
	$(QUIET_CC)$(LD) $(RAM_LDFLAGS) -o modular-$* \
	$(SYS_START_FILE) \
	Main_main-modular.o cisco-modular-$*.o $(image-modular-$*)
	rm -f $@

#
# The modularity-check-% targets are designed to give a quick
# indication of modularity breaks in the modularity image list.
# 
# Note that the modularity check target assumes that all object 
# files for a given modular image are present. It does not use 
# modular-%.lego as a requirement in order to speed up the check.
#

modularity-check-init: main-modular
	@HWSWNAME=modular COMP="$(CC) $(CFLAGS)" \
	flock $(SYSROOT)/version $(SYSROOT)/cisco.sh \
	"cisco Software" "Test " $(PLATFORM) "$(CC) $(CFLAGS)" TRUE
	
modularity-check-%: modularity-check-init
	@echo "Checking $* modularity"; \
	ls Main_main-modular.o cisco-modular.o $(image-modular-$*) \
	| ../scripts/connect -u -n `which $(NM)`

# Babylon


main-gs-special-m:
	$(REMAKE) SWFLAGS=b HWFLAGS=$(HWFLAGS) OBJNAME=$@ main
	@HWSWNAME=gs-special-m COMP="$(CC) $(CFLAGS)" \
	flock ../version ../cisco.sh \
	"$(PLATFORM_IMAGE_GROUP) Software ($(PLATFORM_IMAGE_PREFIX)-$(SPECIAL_NUM)-M)" \
	"$(SPECIAL_LABEL)" $(PLATFORM) "$(CC) $(CFLAGS)" TRUE

main-gs-special-l:
	$(REMAKE) SWFLAGS=rbxl HWFLAGS=$(HWFLAGS) OBJNAME=$@ main
	@HWSWNAME=gs-special-l COMP="$(CC) $(CFLAGS)" \
	flock ../version ../cisco.sh \
	"$(PLATFORM_IMAGE_GROUP) Software ($(PLATFORM_IMAGE_PREFIX)-$(SPECIAL_NUM)-L)" \
	"$(SPECIAL_LABEL)" $(PLATFORM) "$(CC) $(CFLAGS)" TRUE
