/* $Id: rvip.link,v 3.2 1995/11/17 17:52:15 hampton Exp $
 * $Source: /swtal/cherf.111/ios/sys/obj-4k-rvip/rvip.link,v $
 *------------------------------------------------------------------
 * rvip.link - Checkers loader command script
 *
 * January 1995, Michael Beesley
 *
 * Copyright (c) 1993-1995 by cisco Systems, Inc.
 * All rights reserved.
 *------------------------------------------------------------------
 * $Log: rvip.link,v $
 * Revision 3.2  1995/11/17  17:52:15  hampton
 * Remove old entries from the RCS header logs.
 *
 * Revision 3.1  1995/11/09  12:42:17  shaker
 * Bump version numbers from 2.x to 3.x.
 *
 * Revision 2.2  1995/11/08  21:17:01  shaker
 * Merge Arkansas_branch into 11.1 mainline.
 *
 * Revision 2.1  1995/06/07  21:51:20  hampton
 * Bump version numbers from 1.x to 2.x.
 *
 *------------------------------------------------------------------
 * $Endlog$
 */

/*
 * Checkers linker command script
 *
 * The Checkers memory map is not exactly compatible with platforms
 * that run IOS, but this is not a problem for the "port ready" code
 * base. However it does warrant an explaination.
 *
 * DRAM - 
 *
 * There is 8 Mbytes of DRAM on checkers. The top 2 Mbytes
 * will be reserved as PCI memory (which will be broken into two
 * areas, one being a heap and the other being full of carved mini-buffers).
 *
 * The lower 6 Mbytes will be for most of the IOS code, data and bss sections
 * as well as the general purpose heap etc.
 *
 * SRAM - (checkers rev 1 only)
 *
 * There is 512 Kbytes of SRAM on checkers. This will be broken into
 * two parts. At the lowest address there will be a 128 kbyte area
 * that is usable by the rom monitor, exception handling code etc.
 * 
 * The second section will be a pool of memory that is
 * available for small fast data structures via smalloc.
 */

/*
 * Define the sections of the executable
 */

SECTIONS {

	.text . : {
	    	*(.text)
		etext = .;
		_etext = .;
	}

	.rodata ALIGN(0x2000) : {
		_fdata = .;
	    	*(.rodata)
	}

	.data . : {
	    	*(.data)
	}

	_gp = (. + 0x8000);

	.sdata . : {
		*(.sdata)
		edata = .;
		_edata = .;
	}

	.sbss . : {
		__bss_start = .;
		_fbss = .;
		*(.sbss) *(.scommon)
	}

	.bss . : {
		*(.bss)
		*(COMMON)
		_end = .;
		end = .;
	}

	.mdebug 0 : { *(.mdebug) } =0
	.reginfo 0 : { *(.reginfo) } =0
}
