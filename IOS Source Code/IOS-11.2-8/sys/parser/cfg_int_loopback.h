/* $Id: cfg_int_loopback.h,v 3.3.44.4 1996/08/12 16:05:42 widmer Exp $
 * $Source: /release/112/cvs/Xsys/parser/cfg_int_loopback.h,v $
 *------------------------------------------------------------------
 * C F G _ I N T _ L O O P B A C K . H
 *
 * Copyright (c) 1992-1996 by cisco Systems, Inc.
 * All Rights Reserved
 *------------------------------------------------------------------
 * $Log: cfg_int_loopback.h,v $
 * Revision 3.3.44.4  1996/08/12  16:05:42  widmer
 * CSCdi65725:  Create Eolns macro that defaults csb->which to 0
 * Branch: California_branch
 * Add Eolns and Nvgenns macro that default csb->which to 0
 * Remove hidden keyword help strings
 *
 * Revision 3.3.44.3  1996/07/08  22:39:43  mwu
 * CSCdi60922:  11.2 Core Features Commit
 * Branch: California_branch
 *
 * Revision 3.3.44.2  1996/06/13  19:08:47  etrehus
 * Commit boa to California Branch
 *
 * Revision 3.3.44.1  1996/03/18  21:33:24  gstovall
 * Branch: California_branch
 * Elvis has left the building.  He headed out to California, and took the
 * port ready changes with him.
 *
 * Revision 3.3.16.2  1996/03/13  01:51:31  dstine
 * Branch: DeadKingOnAThrone_branch
 *         - commit IDB cleanups
 *
 * Revision 3.3.16.1  1996/02/20  16:43:42  dstine
 * Branch: DeadKingOnAThrone_branch
 *           Sync from DeadKingOnAThrone_baseline_960122 to
 *                     DeadKingOnAThrone_baseline_960213
 *
 * Revision 3.3  1995/12/07  17:45:24  widmer
 * CSCdi45134:  Replace occurences of Ifelse with appropriate Test* macros
 *
 * Revision 3.2  1995/11/17  18:43:34  hampton
 * Remove old entries from the RCS header logs.
 *
 * Revision 3.1  1995/11/09  12:50:38  shaker
 * Bump version numbers from 2.x to 3.x.
 *
 * Revision 2.6  1995/09/20  16:06:10  kramling
 * CSCdi38143:  Hide Commands that do *special* Loopbacks with FastEther
 * PAs
 *
 * Revision 2.5  1995/08/10  23:31:20  wfried
 * CSCdi37608:  oam f5 cells generated by 4500 are not recognized by
 * analyzer
 * Changed ATM code to pass VC pointer for OAM cells and other related
 * changes
 *
 * Revision 2.4  1995/06/27  00:30:33  wfried
 * CSCdi36069:  Performance tuning and changes on controller screen for
 * new interfac
 * Included more interface status in the show controller output,
 * forced ATM receiving packets to start at 16 byte boundaries for
 * better DBUS utilization, and made some fastswitching optimizations.
 * Created new ATM interface loopback command options and renamed E3
 * framing modes to reflect current terminology
 *
 * Revision 2.3  1995/06/21  07:18:54  jchlin
 * CSCdi35650 (transmit delay bug) and CSCdi35651 (remote loopback bug)
 * are fixed in this commit. Now, the hdlc flags will be used to
 * implement the transmit delay. The interface remote loopback will
 * send out the DDS CSU loopback patterns to activate and deactivate
 * CSU remote loopback.
 * CSCdi35650:  The interface transmit delay for T1/E1/PRI doesnt work
 *
 * Revision 2.2  1995/06/21  03:12:45  gstovall
 * CSCdi35731:  Cleanup unused cruft in idb
 * Nuke some unused vectors and variables from the hwidb.
 *
 * Revision 2.1  1995/06/07  22:06:27  hampton
 * Bump version numbers from 1.x to 2.x.
 *
 *------------------------------------------------------------------
 * $Endlog$
 */

/**********************************************************************
 * 	Service module specific command
 * T1	no loopback remote {full | payload | smart-jack}
 *			   {<cr> | qrw | lin8 | 3in24 | 1in2 | 1in1 | 0in1 | 1in5 |
 *                          [user-pattern [length] (24 bits binary))]}
 * 56K  no loopback remote {<cr> | 2047 | 511 | [stress-pattern <1-4>]}
 *
 *	OBJ(int,1) = CSU_DSU_LOOPBACK_REMOTE
 *   	OBJ(int,2) = <cr>/full		= 1
 *		     fractional  	= 2
 *		     smart-jack  	= 3
 *	OBJ(int,3) = <cr>  		= 0 
 *		     qrw 		= 1
 *		     lin8  		= 2
 *		     3in24 		= 3
 *		     1in2  		= 4
 *		     1in1  		= 5
 *		     0in1 		= 6
 *		     1in3 		= 7  (NOT SUPPORTED)
 *		     1in5 		= 8
 *		     user-pattern 	= 9
 *                   2047               = 10
 *                   511                = 11
 *                   stress-pattern     = 12
 *	OBJ(string,4) = user-pattern string
 *	OBJ(int,5) = user-pattern bitmap (24 bits binary) or
 *                        0 or 1 | 2 | 3 | 4  for stress-pattern value
 */
EOLS (ci_loopback_remote_csu_dsu_eol, reg_invoke_csu_dsu_loopback_command,
      CSU_DSU_LOOPBACK_REMOTE);

NUMBER (ci_loopback_csu_dsu_remote_str_pat_num, ci_loopback_remote_csu_dsu_eol,
	no_alt,
        OBJ(int,5), 1, 4, "Stress pattern number");

KEYWORD_ID(ci_loopback_csu_dsu_remote_str_pat,
	   ci_loopback_csu_dsu_remote_str_pat_num,
	   ci_loopback_remote_csu_dsu_eol,
	   OBJ(int,3), CSU_DSU_LPBACK_PAT_STR_PAT,
            "stress-pattern", "Stress Pattern 1 - 4", PRIV_CONF);

IFELSE (ci_loopback_csu_dsu_remote_4w_chk, ci_loopback_csu_dsu_remote_str_pat,
        ci_loopback_remote_csu_dsu_eol,
        reg_invoke_csu_dsu_installed(CHK_SW56_4W_CSU_DSU, csb->interface->hwptr));

KEYWORD_ID (ci_loopback_csu_dsu_remote_511, ci_loopback_remote_csu_dsu_eol,
            ci_loopback_csu_dsu_remote_4w_chk, OBJ(int,3), CSU_DSU_LPBACK_PAT_511,
            "511", "Pattern 511", PRIV_CONF);

KEYWORD_ID (ci_loopback_csu_dsu_remote_2047, ci_loopback_remote_csu_dsu_eol,
            ci_loopback_csu_dsu_remote_511, OBJ(int,3), CSU_DSU_LPBACK_PAT_2047,
            "2047", "Pattern 2047", PRIV_CONF);

SET (ci_loopback_csu_dsu_remote_56k_set_def2, ci_loopback_csu_dsu_remote_2047,
     OBJ(int,5), 0);

SET (ci_loopback_csu_dsu_remote_56k_set_def1, ci_loopback_csu_dsu_remote_56k_set_def2,
     OBJ(int,3), CSU_DSU_LPBACK_PAT_NOSEL);

EVAL (ci_loopback_remote_csu_dsu_chk_up, ci_loopback_remote_csu_dsu_eol, 
      SETOBJ(int,5) = reg_invoke_csu_dsu_validate_usr_pat(GETOBJ(string,4)));

STRING (ci_loopback_csu_dsu_remote_up_str, ci_loopback_remote_csu_dsu_chk_up, 
 	no_alt, OBJ(string,4), "User define binary pattern (up to 24 bits)");

KEYWORD_ID (ci_loopback_csu_dsu_remote_user_pat, ci_loopback_csu_dsu_remote_up_str,
            ci_loopback_remote_csu_dsu_eol,
	    OBJ(int,3), CSU_DSU_LPBACK_PAT_UP,
	    "user-pattern", "User defined loopback pattern", PRIV_CONF);

KEYWORD_ID (ci_loopback_csu_dsu_remote_1in5, ci_loopback_remote_csu_dsu_eol,
            ci_loopback_csu_dsu_remote_user_pat,
	    OBJ(int,3), CSU_DSU_LPBACK_PAT_1IN5,
	    "1in5", "1-in-5 loopback mode", PRIV_CONF);

KEYWORD_ID (ci_loopback_csu_dsu_remote_0in1, ci_loopback_remote_csu_dsu_eol,
            ci_loopback_csu_dsu_remote_1in5,
	    OBJ(int,3), CSU_DSU_LPBACK_PAT_0IN1,
	    "0in1", "0-in-1 loopback mode", PRIV_CONF);

KEYWORD_ID (ci_loopback_csu_dsu_remote_1in1, ci_loopback_remote_csu_dsu_eol,
            ci_loopback_csu_dsu_remote_0in1,
	    OBJ(int,3), CSU_DSU_LPBACK_PAT_1IN1,
	    "1in1", "1-in-1 loopback mode", PRIV_CONF);

KEYWORD_ID (ci_loopback_csu_dsu_remote_1in2, ci_loopback_remote_csu_dsu_eol,
            ci_loopback_csu_dsu_remote_1in1,
	    OBJ(int,3), CSU_DSU_LPBACK_PAT_1IN2,
	    "1in2", "1-in-2 loopback mode", PRIV_CONF);

KEYWORD_ID (ci_loopback_csu_dsu_remote_3in24, ci_loopback_remote_csu_dsu_eol,
            ci_loopback_csu_dsu_remote_1in2,
	    OBJ(int,3), CSU_DSU_LPBACK_PAT_3in24,
	    "3in24", "3-in-24 loopback mode", PRIV_CONF);

KEYWORD_ID (ci_loopback_csu_dsu_remote_1in8, ci_loopback_remote_csu_dsu_eol,
            ci_loopback_csu_dsu_remote_3in24,
	    OBJ(int,3), CSU_DSU_LPBACK_PAT_1IN8,
	    "1in8", "1-in-8 loopback mode", PRIV_CONF);

KEYWORD_ID (ci_loopback_csu_dsu_remote_qrw, ci_loopback_remote_csu_dsu_eol,
            ci_loopback_csu_dsu_remote_1in8,
	    OBJ(int,3), CSU_DSU_LPBACK_PAT_QRW,
	    "qrw", "QRW loopback mode", PRIV_CONF);

SET (ci_loopback_csu_dsu_remote_t1_set_def, ci_loopback_csu_dsu_remote_qrw,
     OBJ(int,3), CSU_DSU_LPBACK_PAT_NOSEL);

KEYWORD_ID (ci_loopback_csu_dsu_remote_sj, ci_loopback_csu_dsu_remote_t1_set_def,
            no_alt, OBJ(int,2), CSU_DSU_LPBACK_TYPE_SJ, "smart-jack",
            "Smart Jack T1", PRIV_CONF);

KEYWORD_ID (ci_loopback_csu_dsu_remote_payload, ci_loopback_csu_dsu_remote_t1_set_def,
            ci_loopback_csu_dsu_remote_sj,
	    OBJ(int,2), CSU_DSU_LPBACK_TYPE_FR,
	    "payload", "Loop T1 fraction from remote", PRIV_CONF);

KEYWORD_ID (ci_loopback_csu_dsu_remote_full, ci_loopback_csu_dsu_remote_t1_set_def,
            ci_loopback_csu_dsu_remote_payload,
	    OBJ(int,2), CSU_DSU_LPBACK_TYPE_DEF,
	    "full", "Full T1", PRIV_CONF);

IFELSE (ci_loopback_csu_dsu_remote_t1_chk, ci_loopback_csu_dsu_remote_full, 
  	ci_loopback_csu_dsu_remote_56k_set_def1,
        reg_invoke_csu_dsu_installed(CHK_FT1_CSU_DSU, csb->interface->hwptr));

SET (ci_loopback_csu_dsu_remote_set_def, ci_loopback_csu_dsu_remote_t1_chk,
     OBJ(int,2), CSU_DSU_LPBACK_TYPE_DEF);

NOPREFIX (ci_loopback_csu_dsu_remote_no_chk, ci_loopback_csu_dsu_remote_set_def,
          ci_loopback_remote_csu_dsu_eol);

NVGENS (ci_loopback_csu_dsu_remote_nvgen_tst, ci_loopback_csu_dsu_remote_no_chk,
        reg_invoke_csu_dsu_loopback_command, CSU_DSU_LOOPBACK_REMOTE);

KEYWORD_ID (ci_loopback_csu_dsu_remote, ci_loopback_csu_dsu_remote_nvgen_tst, 
	    no_alt, OBJ(int,1), CSU_DSU_LOOPBACK_REMOTE,
	    "remote", "Loopback on the remote side of the CSU/DSU", PRIV_CONF);

/**********************************************************************
 * 	Service module specific command
 *      no loopback line {<cr> | payload}
 *
 *	OBJ(int,1) = CSU_DSU_LOOPBACK_LINE
 *	OBJ(int,2) = <cr> 	= 1
 *		     payload = 2
 */
EOLS (ci_loopback_line_csu_dsu_eol, reg_invoke_csu_dsu_loopback_command,
      CSU_DSU_LOOPBACK_LINE);

KEYWORD_ID (ci_loopback_csu_dsu_line_frac, ci_loopback_line_csu_dsu_eol, 
	    ci_loopback_line_csu_dsu_eol, OBJ(int,2), CSU_DSU_LPBACK_TYPE_FR,
            "payload", "DSU payload loopback", PRIV_CONF);

SET (ci_loopback_csu_dsu_line_set_def, ci_loopback_csu_dsu_line_frac,
     OBJ(int,2), CSU_DSU_LPBACK_TYPE_DEF);

NOPREFIX (ci_loopback_csu_dsu_line_no_chk, ci_loopback_csu_dsu_line_set_def,
          ci_loopback_line_csu_dsu_eol);

NVGENS (ci_loopback_csu_dsu_line_nvgen_tst, ci_loopback_csu_dsu_line_no_chk,
        reg_invoke_csu_dsu_loopback_command, CSU_DSU_LOOPBACK_LINE);

KEYWORD_ID (ci_loopback_csu_dsu_line, ci_loopback_csu_dsu_line_nvgen_tst, 
	    ci_loopback_csu_dsu_remote, OBJ(int,1), CSU_DSU_LOOPBACK_LINE,
	    "line", "Loopback on the line side of the CSU/DSU", PRIV_CONF);

/**********************************************************************
 * 	Service module specific command
 * T1   no loopback dte 
 * 56K  no loopback dte 
 *
 *	OBJ(int,1) = CSU_DSU_LOOPBACK_DTE
 *	OBJ(int,2) = CSU_DSU_LPBACK_TYPE_DEF
 *	OBJ(int,3) = <cr> 	    = 0
 */
EOLS (ci_loopback_dte_csu_dsu_eol, reg_invoke_csu_dsu_loopback_command,
      CSU_DSU_LOOPBACK_DTE);

SET (ci_loopback_csu_dsu_dte_set_def2, ci_loopback_dte_csu_dsu_eol,
     OBJ(int,3), CSU_DSU_LPBACK_PAT_NOSEL);

SET (ci_loopback_csu_dsu_dte_set_def1, ci_loopback_csu_dsu_dte_set_def2,
     OBJ(int,2), CSU_DSU_LPBACK_TYPE_DEF);

NOPREFIX (ci_loopback_csu_dsu_dte_no_chk, ci_loopback_csu_dsu_dte_set_def1,
          ci_loopback_dte_csu_dsu_eol);

NVGENS (ci_loopback_csu_dsu_dte_nvgen_tst, ci_loopback_csu_dsu_dte_no_chk,
        reg_invoke_csu_dsu_loopback_command, CSU_DSU_LOOPBACK_DTE);

KEYWORD_ID (ci_loopback_csu_dsu_dte, ci_loopback_csu_dsu_dte_nvgen_tst, 
	    ci_loopback_csu_dsu_line, OBJ(int,1), CSU_DSU_LOOPBACK_DTE,
	    "dte", "Loopback on the router side of the CSU/DSU", PRIV_CONF);

/**********************************************************************
 *	loopback [{ applique | dte | line | remote | local }]
 *	no loopback [{ applique | dte | line | remote | local }]
 *
 * Only valid for SERIAL and ETHERNET interfaces.
 * The optional parameters are only for HSSI.
 */

EOLNS	(ci_loopback_eol, loopback_command);

SET	(ci_loopback_default, ci_loopback_eol,
	 OBJ(int,1), LOOPBACK_DEFAULT);

/* If we are doing NV generation, we don't want to do the default */
TESTVAR(ci_loopback_nvgen_test, ci_loopback_default, NONE,
	NONE, NONE, no_alt, sense, FALSE);

KEYWORD_ID (ci_loopback_atm_e3ds3_diag, ci_loopback_eol,
	ci_loopback_default, OBJ(int,1), LOOPBACK_APPLIQUE,
	"diagnostic", "Internal diagnostic loopback at the PLIM", PRIV_CONF);

KEYWORD_ID (ci_loopback_atm_e3ds3_test, ci_loopback_eol,
	ci_loopback_atm_e3ds3_diag, OBJ(int,1), LOOPBACK_TEST,
	"test", NULL /*"External special test loopback"*/,
	    PRIV_CONF|PRIV_HIDDEN);

KEYWORD_ID (ci_loopback_atm_e3ds3_cell, ci_loopback_eol,
	ci_loopback_atm_e3ds3_test, OBJ(int,1), LOOPBACK_CELL,
	"cell", "External loopback at the cell level", PRIV_CONF);

KEYWORD_ID (ci_loopback_atm_e3ds3_payl, ci_loopback_eol,
	ci_loopback_atm_e3ds3_cell, OBJ(int,1), LOOPBACK_PAYLOAD,
	"payload", "External loopback at the payload level", PRIV_CONF);

KEYWORD_ID (ci_loopback_atm_e3ds3_line, ci_loopback_eol,
	ci_loopback_atm_e3ds3_payl, OBJ(int,1), LOOPBACK_LINE,
	"line", "External loopback at the line", PRIV_CONF);

IFELSE	(ci_loopback_atm_e3ds3, ci_loopback_atm_e3ds3_line,
	 ci_loopback_default,
	 (csb->interface->hwptr->type == IDBTYPE_ATMZR) &&
	 (is_atm_e3(csb->interface->hwptr) || is_atm_ds3(csb->interface->hwptr)));

KEYWORD_ID (ci_loopback_atm_sonet_line, ci_loopback_eol,
	ci_loopback_nvgen_test, OBJ(int,1), LOOPBACK_LINE,
	"line", "External loopback at the line", PRIV_CONF);

KEYWORD_ID (ci_loopback_atm_sonet_diag, ci_loopback_eol,
	ci_loopback_atm_sonet_line, OBJ(int,1), LOOPBACK_APPLIQUE,
	"diagnostic", "Internal diagnostic loopback at the PLIM", PRIV_CONF);

IFELSE	(ci_loopback_atm_sonet, ci_loopback_atm_sonet_diag,
	 ci_loopback_atm_e3ds3,
	 (csb->interface->hwptr->type == IDBTYPE_ATMZR) &&
	 is_atm_sonet(csb->interface->hwptr));

KEYWORD_ID (ci_loopback_aip_sonet_diag, ci_loopback_eol,
	ci_loopback_nvgen_test, OBJ(int,1), LOOPBACK_APPLIQUE,
	"diagnostic", "Internal diagnostic loopback at the PLIM", PRIV_CONF);

IFELSE	(ci_loopback_aip_sonet, ci_loopback_aip_sonet_diag,
	 ci_loopback_atm_sonet,
	 (csb->interface->hwptr->type == IDBTYPE_AIP));

KEYWORD_ID (ci_loopback_dec, ci_loopback_eol, ci_loopback_default,
	    OBJ(int,1), LOOPBACK_DEC, "dec",
	    NULL /*"Loopback at the DEC controller"*/, PRIV_CONF|PRIV_HIDDEN);

KEYWORD_ID (ci_loopback_micro, ci_loopback_eol, ci_loopback_dec,
	    OBJ(int,1), LOOPBACK_MICRO_LINEAR,
	    "micro-linear", NULL /*"Loopback at the Micro Linear device"*/,
	    PRIV_CONF|PRIV_HIDDEN);

KEYWORD_ID (ci_loopback_motorola, ci_loopback_eol, ci_loopback_micro,
	    OBJ(int,1), LOOPBACK_MOTOROLA,
	    "motorola", NULL /*"Loopback at the Motorola device"*/,
	    PRIV_CONF|PRIV_HIDDEN); 

IFELSE	(ci_loopback_feip, ci_loopback_motorola, ci_loopback_aip_sonet,
	 csb->interface->hwptr->type == IDBTYPE_FEIP);
	 
KEYWORD_ID (ci_loopback_g703_line, ci_loopback_eol, ci_loopback_default,
	    OBJ(int,1), LOOPBACK_LINE,
	    "line", "Loopback on the line side of the CSU/DSU", PRIV_CONF);

IFELSE	(ci_loopback_g703, ci_loopback_g703_line, ci_loopback_feip,
	 (csb->interface->hwptr->type == IDBTYPE_HD64570) && 
	 is_g703(csb->interface->hwptr)); 
	 
KEYWORD_ID (ci_loopback_remote, ci_loopback_eol, ci_loopback_nvgen_test,
	    OBJ(int,1), LOOPBACK_REMOTE,
	    "remote", "Loopback at the remote CSU/DSU", PRIV_CONF);

KEYWORD_ID (ci_loopback_line, ci_loopback_eol, ci_loopback_remote,
	    OBJ(int,1), LOOPBACK_LINE,
	    "line", "Loopback on the line side of the CSU/DSU", PRIV_CONF);

KEYWORD_ID (ci_loopback_dte, ci_loopback_eol, ci_loopback_line,
	    OBJ(int,1), LOOPBACK_DTE,
	    "dte", "Loopback on the router side of the CSU/DSU", PRIV_CONF);

KEYWORD_ID (ci_loopback_applique, ci_loopback_eol, ci_loopback_dte,
	    OBJ(int,1), LOOPBACK_APPLIQUE,
	    "applique", "Loopback at the applique", PRIV_CONF);

TEST_IDBSTATUS(ci_loopback_type2, ci_loopback_applique, ci_loopback_g703,
	       NONE, IDB_HSSI);

KEYWORD_ID (ci_loop_external, ci_loopback_eol, ci_loopback_nvgen_test,
	    OBJ(int,1), LOOPBACK_EXTERNAL, "line",
	    "line", PRIV_CONF);

KEYWORD_ID (ci_loopback_internal, ci_loopback_eol, ci_loop_external,
	    OBJ(int,1), LOOPBACK_INTERNAL, "internal",
	    "internal", PRIV_CONF);

TEST_IDBSTATUS(ci_loopback_type1, ci_loopback_internal, ci_loopback_type2,
	       NONE, IDB_POS);

KEYWORD_ID (ci_loop_remote, ci_loopback_eol, ci_loopback_nvgen_test,
	    OBJ(int,1), LOOPBACK_REMOTE, "remote",
	    "Loopback at the remote CSU/DSU", PRIV_CONF);

KEYWORD_ID (ci_loop_t1, ci_loopback_eol, ci_loopback_remote, OBJ(int,1),
	    LOOPBACK_LOCAL, "local", "Loopback at the applique", PRIV_CONF);

IFELSE	(ci_loopback_type, ci_loop_t1, ci_loopback_type1,
         (csb->interface->hwptr->type == IDBTYPE_T1) ||
          (csb->interface->hwptr->type == IDBTYPE_E1));

IFELSE (ci_loopback_csu_dsu_chk, ci_loopback_csu_dsu_dte, ci_loopback_type,
        reg_invoke_csu_dsu_installed(CHK_ANY_CSU_DSU, csb->interface->hwptr));

KEYWORD (ci_loopback_start, ci_loopback_csu_dsu_chk, NONE,
	 "loopback", "Configure internal loopback on an interface", PRIV_CONF);

TEST_IDBSTATUS(ci_loopback, ci_loopback_start, NONE, ALTERNATE,
	       (IDB_SERIAL|IDB_ETHER|IDB_ATM));

#undef	ALTERNATE
#define	ALTERNATE	ci_loopback
