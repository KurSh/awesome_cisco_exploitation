# $Id: partner_registry.reg,v 3.3 1996/03/08 23:57:30 ljiang Exp $
# $Source: /release/111/cvs/Xsys/partner/partner_registry.reg,v $
#------------------------------------------------------------------
# partner_registry.reg- Service points for Partner Registry
#
# February 1995, Cheng-Lee Nee
#
# Copyright (c) 1995-1996 by cisco Systems, Inc.
# All rights reserved.
#------------------------------------------------------------------
# $Log: partner_registry.reg,v $
# Revision 3.3  1996/03/08  23:57:30  ljiang
# CSCdi50986:  Add mailbox support for Microcom Terminator(c2511
# derivative)
#
# Revision 3.2  1995/11/17  18:53:21  hampton
# Remove old entries from the RCS header logs.
#
# Revision 3.1  1995/11/09  12:57:10  shaker
# Bump version numbers from 2.x to 3.x.
#
# Revision 2.1  1995/06/07  22:32:36  hampton
# Bump version numbers from 1.x to 2.x.
#
#------------------------------------------------------------------
# $Endlog$
#
# Syntax for defining a registry
#
# Each item must begin a line of its own.
# Lines may be continued by ending with a \
#
# BEGIN REGISTRY <name of registry>
#
# DEFINE <name of service point>
# /* <comment lines in standard C format describing the
#     registry. These will be reformatted unless they are
#     in the comment bar format> */
# DATA
#    <Lines of text to be copied from the input to the
#     between the comment and the function declaration>
# END DATA
#    <type of service> := LIST | LOOP | STUB | CASE | RETVAL | VALUE
#    <type declaration of value returned by called function>
#              must be void for LIST and CASE, boolean
#              for LOOP, and ulong for VALUE.
#    <prototype list for called function>
#    <number of cases for case service>
#    <type for case statement>
# END
#
# END REGISTRY
#
#
 
BEGIN REGISTRY PARTNER

DEFINE mailbox_v2_start_output
/*
 * Called to invoke vendor specific procdure to do the first step of
 * initializing the mail box by doing a dummy read of the data register.
 */
      STUB
        void
        ushort cout
END

DEFINE mailbox_v2_fill_personality_PDU
/*
 * Called to fill personality PDU for Terminator 
 * 
 */
DATA
      typedef struct mbox_personality_PDU mbox_personality_PDU_type;
END DATA

      STUB
        uchar *
      mbox_personality_PDU_type *p, ushort flags
END

DEFINE mailbox_v2_is_complex_port
/*
 * Called to decide if a port is complex port
 * 
 */
      STUB
      boolean
      hwidbtype *idb
END

DEFINE mailbox_v2_fence_interface
/*
 * Called to decide if a port is complex port
 * 
 */
      STUB
      void
      -
END


DEFINE inc_local_lnm_claim_token_counter
/*
 * Called to increment the local_lnm_claim_ring variable in the station's
 * IDB database
 */
        LIST
        void
        hwidbtype *hwidb
END
 
DEFINE inc_local_lnm_purge_token_counter
/*
 * Called to increment the local_lnm_purge_ring variable in the station's
 * IDB database
 */
        LIST
        void
        hwidbtype *hwidb
END
 
DEFINE local_lnm_disable
/*
 * Called to disable the local_lnm function
 */
        LIST
        void
        hwidbtype *hwidb
END
 
DEFINE local_lnm_reset_count
/*
 * Called to reset the claim and purge counters
 */
        LIST
        void
        hwidbtype *hwidb
END
 
DEFINE local_lnm_link_nmp
/*
 * Called to process the LINK_SMP packet
 */
        LIST
        void
        paktype *pak
END
 
DEFINE local_lnm_set_mac_address
/*
 * Called to set the MAC address of the LNM packet with
 * that of the Token Ring interface
 */
        LIST
        void
        uchar *vec, hwidbtype *idb
END
 
DEFINE local_lnm_slarp
/*
 * Called to set the slarp response packet
 */
        LOOP
        boolean
        uchar *ptr, hwidbtype *hwidb1, hwidbtype *hwidb2
END
 
DEFINE local_lnm_llc2_send
/*
 * Called to send the LNM packet without LLC2
 */
        LOOP
        boolean
        llctype *cookie, paktype *pak
END
 
DEFINE local_lnm_pcbus_send
/*
 * Called to send the LNM packet over PCbus interface
 */
        LOOP
        boolean
        llctype *cookie, paktype *pak
END
 
DEFINE local_lnm_llc2_oqueue_status
/*
 * Called to send the LNM llc2 oqueue status
 */
        LOOP
        boolean
        llctype *cookie
END
 
DEFINE local_lnm_reset_vr_bridge
/*
 * Called to initialize ring number to have local LNM function
 * for the token ring interface
 */
        LIST
        void
        hwidbtype *hwidb
END
 
DEFINE local_lnm_vr_bridge
/*
 * Called to check if the token ring interface is part of the
 * local lnm virtual bridge
 */
        LOOP
        boolean
        hwidbtype *hwidb
END
 
DEFINE local_lnm_llc2_open
/*
 * Called to open up a LLC2 session for local lnm
 */
        LOOP
        boolean
        idbtype *idb, llctype **cookie
END
 
DEFINE local_lnm_llc2_close
/*
 * Called to close up a LLC2 session for local lnm
 */
        LOOP
        boolean
        llctype *cookie
END
 
DEFINE local_lnm_find_802addr
/*
 * Called to find 802 addresses
 */
        LIST
        void
        paktype *pak, uchar *dest, boolean which
END
 
DEFINE local_lnm_ringno
/*
 * Called to check if it is a local lnm ring number
 */
        LOOP
        boolean
        ushort ringno
END
 
END REGISTRY

