# $Id: pt_registry.reg,v 3.2 1995/11/17 19:00:01 hampton Exp $
# $Source: /swtal/cherf.111/ios/sys/pt/pt_registry.reg,v $
#------------------------------------------------------------------
# pt_registry.reg - Service Points for Protocol Translation Registry
#
# November 1993, Eman Schaffer
#
# Copyright (c) 1993-1994 by cisco Systems, Inc.
# All rights reserved.
#
#------------------------------------------------------------------
# $Log: pt_registry.reg,v $
# Revision 3.2  1995/11/17  19:00:01  hampton
# Remove old entries from the RCS header logs.
#
# Revision 3.1  1995/11/09  13:01:42  shaker
# Bump version numbers from 2.x to 3.x.
#
# Revision 2.1  1995/06/07  22:35:18  hampton
# Bump version numbers from 1.x to 2.x.
#
#------------------------------------------------------------------
# $Endlog$
#
#
# Syntax for defining a registry
#
# Each item must begin a line of its own.
# Lines may be continued by ending with a \
#
# BEGIN REGISTRY <name of registry>
#
# DEFINE <name of service point>
# /* <comment lines in standard C format describing the
#     registry. These will be reformatted unless they are
#     in the comment bar format> */
# DATA
#    <Lines of text to be copied from the input to the
#     between the comment and the function declaration>
# END DATA
#    <type of service> := LIST | LOOP | STUB | CASE | RETVAL | VALUE
#    <type declaration of value returned by called function>
#              must be void for LIST and CASE, boolean
#              for LOOP, and ulong for VALUE.
#    <prototype list for called function>
#    <number of cases for case service>
#    <type for case statement>
# END
#
# END REGISTRY
#
#

BEGIN REGISTRY PT


DEFINE 	pt_tcpinput
/*
 * Given translatetype and tt_soc pointers, spawn a process that translates
 * TCP input to the desired output protocol.  We return the PID of the
 * created process or -1 if we failed for some reason.  Our index is
 * the TRANS_xxx code of the desired output protocol.
 */
	RETVAL
	int
	translatetype *trans, tt_soc *tty
	0
	int trancode
END

DEFINE 	pt_latinput
/*
 * Given translatetype and tt_soc pointers, spawn a process that translates
 * LAT input to the desired output protocol.  We return the PID of the
 * created process or -1 if we failed for some reason.  Our index is
 * the TRANS_xxx code of the desired output protocol.
 */
	RETVAL
	int
	translatetype *trans, tt_soc *tty
	0
	int transcode
END

DEFINE 	pt_x25input
/*
 * Given translatetype and tt_soc pointers, spawn a process that translates
 * X25 input to the desired output protocol.  We return the PID of the
 * created process or -1 if we failed for some reason.  Our index is
 * the TRANS_xxx code of the desired output protocol.
 */
	RETVAL
	int
	translatetype *trans, tt_soc *tty
	0
	int transcode
END

DEFINE 	pt_translate_command
/*
 * Invoked by the main translator parser routine. Each protocol
 * binds its parser handler into this point
 */
	RETVAL
	int
	parseinfo *csb, translatetype *translate, int direction
	0
	int translate_protocol
END

DEFINE 	pt_add_alias
/*
 * Invoked by the main translator alias addition routine. Each protocol
 * binds its parser handler into this point
 */
	RETVAL
	boolean
	translatetype *translate
	0
	int translate_protocol
END

DEFINE  pt_compare_entry
/*
 * When passed two translation entries, returns TRUE if they're the same
 */
        RETVAL
        boolean
        translatetype *trans1, translatetype *trans2
        0
        int translate_protocol
END

DEFINE  pt_delete_alias
/*
 * Invoked by the main translator alias delete routine. Each protocol
 * binds its parser handler into this point
 */
        RETVAL
        boolean
        translatetype *translate
        0
        int translate_protocol
END

DEFINE  pt_show_translate
/*
 * Invoked by the main translator show_translate routine.
 */
        CASE
        void
        translatetype *translate, int dir
        0
        int translate_protocol
END

DEFINE  pt_nv_translate_entry
/*
 * Invoked by the main nv_translate() routine for per entry configuration
 */
        CASE
        void
        translatetype *translate, int dir
        0
        int translate_protocol
END

DEFINE pt_translate_string
/*
 * Take an int and return a string of the protocol name
 * Our index is the TRANS_xxx code of the desired output protocol.
 */
	RETVAL
	char *
	int proto
	0
	int translate_protocol
END

END REGISTRY PT
