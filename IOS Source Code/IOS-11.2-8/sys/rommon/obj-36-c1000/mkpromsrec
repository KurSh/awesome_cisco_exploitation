#!/bin/sh
#
# $Id: mkpromsrec,v 3.1 1995/12/01 02:19:03 clev Exp $
# $Source: /swtal/cherf.111/ios/sys/rommon/obj-36-c1000/mkpromsrec,v $
#------------------------------------------------------------------
# mkpromsrec - make a prom srecord file
#
# August 1995,  Rob Clevenger
#
# Copyright (c) 1995 by cisco Systems, Inc.
# All rights reserved.
# 
#------------------------------------------------------------------
# $Log: mkpromsrec,v $
# Revision 3.1  1995/12/01  02:19:03  clev
# CSCdi44652:  mkpromsrec script missing in these releases
#
# Propagate the file to this release.
#
#
#
#------------------------------------------------------------------
# $Endlog$
#


# This shell script "mkpromsrec" must live in the
# sys/rommon/obj-36-c1000 directory.
#
# It is invoked automatically from a "make prom" in that directory.
#
# The -P option tells the script that this is a partner build and
# to take the appropriate action.
#
# The script mkpromsrec can also be invoked from the command line as:
#
# 	mkpromsrec <path/sysimagename>
#
# In this case the script will build the srecord file C1000_BOOTROM.srec
# from the ROM Monitor and uncompress program in the current directory
# and the specified system image.  (The system image name will have the
# path portion removed in the target file system.)  This is to support
# the making of engineering specials.

# initialize defaults
TARGET=C1000_BOOTROM.srec
MONITOR=C1000_RM.srec
CURDIR=
USAGE="usage: $0 [-P] [<path/sysimagename>]"

set -- `getopt P $*`
if [ $? != 0 ]
then
    echo $USAGE
    exit 2
fi

for i in $*
do
    case $i in
    -P) MONITOR=P1000_RM.srec; TARGET=P1000_BOOTROM.srec; shift;;
    --) shift; break;;
    esac
done

if [ $# -gt 1 ]
then
    echo $USAGE
    exit 1
fi

if [ $# = 0 ]
then
    # Key off of the environment variable $DISTBASE to pick up the
    # c1000-rboot-r image.
    if [ x$DISTBASE = x ]
    then
	CURDIR=`/bin/pwd`
	cd ../..
	DISTBASE=`/bin/pwd`
	cd $CURDIR
	echo "$0: DISTBASE is not set, using default of $DISTBASE"
    fi

    if [ ! -d $DISTBASE ]
    then
	echo "$0: DISTBASE directory \"$DISTBASE\" does not exist"
	echo "exiting"
	exit 1
    fi

    BUILDDIR="$DISTBASE/.."

    # Get rboot version numbers from sys/h/master.h
    MAJVER=`grep '^#define SYS_MAJORVERSION' $BUILDDIR/sys/h/master.h | cut -d' ' -f3`
    MINVER=`grep '^#define SYS_MINORVERSION' $BUILDDIR/sys/h/master.h | cut -d' ' -f3`
    # Get monitor version numbers from sys/rommon/src/mon_defs.h
    RMAJVER=`grep 'ROM_MAJORVERSION' $BUILDDIR/sys/rommon/src/mon_defs.h | \
	tr '	' ' ' | cut -d' ' -f3`
    RMINVER=`grep 'ROM_MINORVERSION' $BUILDDIR/sys/rommon/src/mon_defs.h | \
	tr '	' ' ' | cut -d' ' -f3`
    # Get further version info from sys/version
    VER=`cat $BUILDDIR/sys/version`

    # Construct file and image version strings from above info
    FVER="$MAJVER$MINVER-$VER"
    IVER="$MAJVER.$MINVER($VER)"
    # The output file version will bear the Monitor's version number
    OVER="$RMAJVER$RMINVER-$VER"

    if [ x$CURDIR = x ]
    then
        SRCRBOOT=$DISTBASE/bin/c1000-rboot-r.$FVER
    else
        SRCRBOOT=$DISTBASE/obj-36-c1000/c1000-rboot-r.bin
	if [ ! -r $SRCRBOOT ]
	then
            SRCRBOOT=$DISTBASE/obj-36-c1000/c1000-rboot-r
	fi
    fi

    if [ ! -r $SRCRBOOT ]
    then
        echo "$0: file \"$SRCRBOOT\" not readable"
        echo "exiting"
        exit 1
    fi

    # Verify that the version string is right
    VER=`strings $SRCRBOOT | grep CW_VERSION | cut -d$ -f2`
# This code is removed from the 11.* release because
# versions did not match
#   if [ $VER != $IVER ]
#   then
#	echo "$0: rboot image version mismatch"
#	echo "expected $IVER, got $VER"
#	echo "exiting"
#	exit 1
#   fi

    # tack version number string on the end of the
    # rboot name: c1000-rboot-r.<verno>
    RBOOT=c1000-rboot-r.$FVER

    # Prepare the target name
    TARGET=$TARGET.$OVER

else   # not a -R argument

    if [ ! -r $1 ]
    then
	echo "$0: cannot access file \"$1\""
	echo $USAGE
	exit 1
    fi

    SRCRBOOT=$1
    RBOOT=`basename $1 .bin`
fi


# Copy the rboot image to current directory (rename it too).
# Issue a cleanup trap first.
trap 'rm -f $RBOOT pfsi; exit' 0 1 2 15
cp $SRCRBOOT ./$RBOOT

# Using ../utils/mkffsi construct a flash file system image comprised
# of the rboot image and the uncompress program.
echo "building PROM file system with $RBOOT"
../utils/mkffsi $RBOOT uncompress pfsi

# Using ../utils/combpcode, the compiled ROM Monitor in the current
# directory, and output from the last step to construct the final
# srecord file to be downloaded to the PROM programmer and name it
# C1000_BOOTROM.srec[.<verno>]
echo "combining ROM Monitor and PROM file system to file $TARGET"
sh ../utils/combpcode.sh -a 18000 $MONITOR pfsi $TARGET >/dev/null

# The clean up of the temporary files is done automatically on exit
# by the trap command.
exit 0
