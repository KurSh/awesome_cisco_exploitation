# $Id: rtt_registry.reg,v 1.1.4.2 1996/06/04 18:28:53 lmetzger Exp $
# $Source: /release/112/cvs/Xsys/rtt/rtt_registry.reg,v $
#------------------------------------------------------------------
# Round Trip Time Monitor registry file.
#
# Dec 1995, Larry Metzger
#
# Copyright (c) 1995-1997 by cisco Systems, Inc.
# All rights reserved.
# 
#------------------------------------------------------------------
# $Log: rtt_registry.reg,v $
# Revision 1.1.4.2  1996/06/04  18:28:53  lmetzger
# CSCdi59459:  See CSCdi589xx, xx = 29,30,31,32,33,35,36,47
# Branch: California_branch
# - Group of defects that are interdependent and tested.
#
# Revision 1.1.4.1  1996/05/17  11:41:34  ppearce
# Merge IbuMod into Calif
#
# Revision 1.1.2.3  1996/05/14  06:20:47  lmetzger
# Branch: IbuMod_Calif_branch
#
# Response Time Reporter code review updates
#
# Revision 1.1.2.2  1996/04/19  02:41:49  lmetzger
# Branch: IbuMod_Calif_branch
#
# Updating Initial Version of Response Time Reporter
#
# Revision 1.1.2.1  1996/03/22  18:41:45  lmetzger
# Initial Version of Response Time Reporter
#
# Revision 1.1  1996/03/20  17:34:33  lmetzger
# Placeholder for IbuMod_Calif_branch
#
#------------------------------------------------------------------
# $Endlog$

#
# Syntax for defining a registry
#
# Each item must begin a line of its own.
# Lines may be continued by ending with a \
#
# BEGIN REGISTRY <name of registry>
#
# DEFINE <name of service point>
# /* <comment lines in standard C format describing the
#     registry. These will be reformatted unless they are
#     in the comment bar format> */
# DATA
#    <Lines of text to be copied from the input to the
#     between the comment and the function declaration>
# END DATA
#    <type of service> := LIST | LOOP | STUB | CASE | RETVAL | VALUE
#    <type declaration of value returned by called function>
#              must be void for LIST and CASE, boolean
#              for LOOP, and ulong for VALUE.
#    <prototype list for called function>
#    <number of cases for case service>
#    <type for case statement>
# END
#
# END REGISTRY
#
#

BEGIN REGISTRY RTT REG_RTT

DEFINE  rtt_echo_exists
/*
 * check for the existence of this extension
 */
	RETVAL
	boolean
	-
	MAX_RTT_PROTOCOLS
	int rttProtocol
END

DEFINE	rtt_echo_validate
/*
 * validate echo parameters.  possible return values
 * are documented in sys/rtt/rtt_lib.h
 */
	RETVAL
	int
	rttMonCtrlAdminEntry_t *ctrlAdminEntry, \
	void *specificEntry, \
	int rttObject
	MAX_RTT_PROTOCOLS
	int rttProtocol
END


DEFINE rtt_echo_activate
/*
 * initiate a  RTT Echo with the (previously validated) 
 *   echo parameters
 */
	CASE
	void
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem
	MAX_RTT_PROTOCOLS
	int rttProtocol
END

DEFINE rttMonConnectionChangeNotification_activate
/*
 *  initiate the Connection Change Notification
 */
	LIST
	void
	SR_INT32     rttMonCtrlAdminIndex, \
        SR_INT32     rttMonHistoryCollectionLifeIndex, \
        SR_INT32     rttMonHistoryCollectionBucketIndex, \
        SR_INT32     rttMonHistoryCollectionSampleIndex, \
	OctetString *rttMonCtrlAdminTag, \
	OctetString *rttMonHistoryCollectionAddress, \
        SR_INT32     rttMonCtrlOperConnectionLostOccurred
END

DEFINE rttMonTimeoutNotification_activate
/*
 *  initiate the Timeout Notification
 */
	LIST
	void
	SR_INT32     rttMonCtrlAdminIndex, \
        SR_INT32     rttMonHistoryCollectionLifeIndex, \
        SR_INT32     rttMonHistoryCollectionBucketIndex, \
        SR_INT32     rttMonHistoryCollectionSampleIndex, \
 	OctetString *rttMonCtrlAdminTag, \
	OctetString *rttMonHistoryCollectionAddress, \
        SR_INT32     rttMonCtrlOperTimeoutOccurred
END

DEFINE rttMonThresholdNotification_activate
/*
 *  initiate the Threshold  Notification
 */
	LIST
	void
	SR_INT32     rttMonCtrlAdminIndex, \
        SR_INT32     rttMonHistoryCollectionLifeIndex, \
        SR_INT32     rttMonHistoryCollectionBucketIndex, \
        SR_INT32     rttMonHistoryCollectionSampleIndex, \
	OctetString *rttMonCtrlAdminTag, \
	OctetString *rttMonHistoryCollectionAddress, \
        SR_INT32     rttMonCtrlOperOverThresholdOccurred	
END

DEFINE rtt_depend_lu_split_address
/*
 *  Split a Dependant LU Address STUB
 */
	STUB
	void
        OctetString  *target, \
        char        **hostname, \
        long         *hostnameLen, \
        char        **applname, \
        char        **modename, \
        long          rttMonCtrlAdminIndex
END

#
# Probe interface Calls
#
DEFINE dumpRttMonLibReturnCode
/*
 * dumpRttMonLibReturnCode Stub
 */
	STUB
	void
        long rttMonCtrlAdminIndex, \
	long rttMonLibReturnCode
END

DEFINE dumpRttMonProcessHeader
/*
 * dumpRttMonProcessHeader Stub
 */
	STUB
	void
	long rttMonCtrlAdminIndex, \
	long reasonStr
END

DEFINE dumpRttMonErrorReturnCode
/*
 * dumpRttMonErrorReturnCode Stub
 */
	STUB
	void
        long rttMonCtrlAdminIndex, \
	long functionName, \
	long callName
END

DEFINE dumpRttMonCtrlAdminQItem
/*
 * dumpRttMonCtrlAdminQItem Stub
 */
	STUB
	void
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem
END

DEFINE dumpRttMonCtrlAdminRttType
/* 
 * dumpRttMonCtrlAdminRttType Stub
 */
	STUB
	void
        long rttMonCtrlAdminIndex, \
        long rttMonCtrlAdminRttType
END

DEFINE dumpRttMonEchoAdminTargetAddress
/* 
 * dumpRttMonEchoAdminTargetAddress Stub
 */
	STUB
	void
        long rttMonCtrlAdminIndex, \
        OctetString *rttMonEchoAdminTargetAddress
END

DEFINE rttMonStartLife
/*
 * rttMonStartLife Retval
 */
        RETVAL
        long
        rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem
	0
	int no_op
END

DEFINE rttMonConvertAsciiToEbcdic
/*
 * rttMonConvertAsciiToEbcdic Stub
 */
	STUB
	void
	const unsigned char  *ascii, \
	unsigned char        *ebcdic, \
	short                length
END

DEFINE rttMonIPToOctetString
/*
 * rttMonIPToOctetString Stub
 */
	STUB
	void
	unsigned long  ipAddr, \
	OctetString    *OSBuff
END

DEFINE rttMonPreMallocOctetString
/*
 * rttMonPreMallocOctetString Retval
 */
	RETVAL
	OctetString *
	long length
	0
	int no_op
END

DEFINE rttMonFreeOctetStringBuffer
/*
 * rttMonFreeOctetStringBuffer Stub
 */
	STUB
	void
	OctetString *tmpAddressBuff
END

DEFINE rttMonNewAddressBuffer
/*
 * rttMonNewAddressBuffer Retval
 */
	RETVAL
	OctetString *
	-
	0
	int no_op
END

DEFINE getRttMonCtrlAdminRttType
/*
 * getRttMonCtrlAdminRttType Retval
 */
	RETVAL
	long
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem
	0
	int no_op
END

DEFINE getRttMonEchoAdminProtocol
/*
 * getRttMonEchoAdminProtocol Retval
 */
	RETVAL
	long
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem
	0
	int no_op
END

DEFINE getRttMonEchoAdminTargetAddress
/*
 * getRttMonEchoAdminTargetAddress Retval
 */
	RETVAL
	OctetString *
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem, \
	OctetString          *echoAdminTargetAddressBuff
	0
	int no_op
END

DEFINE getRttMonEchoAdminPktDataRequestSize
/*
 * getRttMonEchoAdminPktDataRequestSize Retval
 */
	RETVAL
	long
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem
	0
	int no_op
END

DEFINE getRttMonEchoAdminPktDataResponseSize
/*
 * getRttMonEchoAdminPktDataResponseSize Retval
 */
	RETVAL
	long
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem
	0
	int no_op
END

DEFINE rttMonUpdateResponse
/*
 * rttMonUpdateResponse Retval
 */
	RETVAL
	long
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem, \
	unsigned long         response_time,\
	OctetString          *rttMonAddress, \
	int                   command_code, \
	boolean               initialAttemp
	0
	int no_op
END

DEFINE rttMonCollectPath
/*
 * rttMonCollectPath Retval
 */
	RETVAL
	boolean
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem
	0
	int no_op
END

DEFINE rttMonStartUpdatePath
/*
 * rttMonStartUpdatePath Stub
 */
	STUB
	void
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem
END

DEFINE rttMonUpdatePath
/*
 * rttMonUpdatePath Retval
 */
	RETVAL
	long
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem, \
	OctetString           *rttMonAddress
	0
	int no_op
END

DEFINE rttMonEndUpdatePath
/*
 * rttMonEndUpdatePath Retval
 */
	RETVAL
	long
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem
	0
	int no_op
END

DEFINE rttMonGetFirstStoredHopAddress
/*
 * rttMonGetFirstStoredHopAddress Retval
 */
	RETVAL
	long
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem, \
	OctetString          *rttMonAddressBuff
	0
	int no_op
END

DEFINE rttMonGetNextStoredHopAddress
/*
 * rttMonGetNextStoredHopAddress Retval
 */
	RETVAL
	long
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem, \
	OctetString          *rttMonAddressBuff
	0
	int no_op
END

DEFINE rttMonSetupASCIIDataPortion
/*
 * rttMonSetupASCIIDataPortion Retval
 */
	RETVAL
	long
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem, \
	void                 *data, \
	long                  dataSizeofReceivedBuffer, \
	long                 *dataSizeOfSendBuffer, \
	unsigned short        sequenceNumber, \
	long                  command
	0
	int no_op
END

DEFINE rttMonSetupEBCDICDataPortion
/*
 * rttMonSetupEBCDICDataPortion Retval
 */
	RETVAL
	long
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem, \
	void                 *data, \
	long                  dataSizeofReceivedBuffer, \
	long                 *dataSizeOfSendBuffer, \
	unsigned short        sequenceNumber, \
	long                  command
	0
	int no_op
END

DEFINE rttMonVerifyASCIIDataPortion
/* 
 * rttMonVerifyASCIIDataPortion Retval
 */
	RETVAL
	long
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem, \
	unsigned short        sequenceNumber, \
	void                 *data
	0
	int no_op
END

DEFINE rttMonVerifyEBCDICDataPortion
/* 
 * rttMonVerifyEBCDICDataPortion Retval
 */
	RETVAL
	long
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem, \
	unsigned short        sequenceNumber, \
	void                 *data
	0
	int no_op
END

DEFINE getRttMonCtrlAdminFrequency
/* 
 * getRttMonCtrlAdminFrequency Retval
 */
	RETVAL
	long
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem
	0
	int no_op
END

DEFINE getRttMonCtrlAdminTimeout
/* 
 * getRttMonCtrlAdminTimeout Retval
 */
	RETVAL
	long
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem
	0
	int no_op
END

DEFINE getRttMonOperState
/* 
 * getRttMonOperState Retval
 */
	RETVAL
	long
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem
	0
	int no_op
END

DEFINE rttMonTransitionTransitionState
/* 
 * rttMonTransitionTransitionState Retval
 */
	RETVAL
	long
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem
	0
	int no_op
END

DEFINE rttMonTimeStampEchoStart
/* 
 * rttMonTimeStampEchoStart Retval
 */
	STUB
	void
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem
END

DEFINE rttMonUpdateNumberOfEchosAttempted
/* 
 * rttMonUpdateNumberOfEchosAttempted Stub
 */
	STUB
	void
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem, \
	boolean initialAttempt
END

DEFINE rttMonHopConnected
/* 
 * rttMonHopConnected Retval
 */
	RETVAL
	boolean
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem, \
	OctetString          *rttMonAddress
	0
	int no_op
END

DEFINE rttMonSetHopConnectedState
/*
 * rttMonSetHopConnectedState Retval
 */
	RETVAL
	long
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem, \
	OctetString          *rttMonAddress, \
	boolean               state
	0
	int no_op
END

DEFINE rttMonSetConnectionHandle
/*
 * rttMonSetConnectionHandle Retval
 */
	RETVAL
	long
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem, \
	OctetString          *rttMonAddress, \
	void                 *connHandle
	0
	int no_op
END

DEFINE rttMonGetConnectionHandle
/*
 * rttMonGetConnectionHandle Retval
 */
	RETVAL
	long
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem, \
	OctetString          *rttMonAddress, \
	void                 **connHandle
	0
	int no_op
END

DEFINE rttMonFreeConnectionHandleList
/*
 * rttMonFreeConnectionHandleList Stub
 */
	STUB
	void
        long rttMonCtrlAdminIndex, \
	connectHandleList *connHandleList
END

DEFINE rttMonNewConnectionHandleList
/*
 * rttMonNewConnectionHandleList Retval
 */
	RETVAL
	connectHandleList *
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem
	0
	int no_op
END

DEFINE rttMonGetConnectionHandleList
/*
 * rttMonGetConnectionHandleList Retval
 */
	RETVAL
	long
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem, \
	connectHandleList    *connHandleListBuff
	0
	int no_op
END

DEFINE rttMonSetDiagText
/*
 * rttMonSetDiagText Retval
 */
	RETVAL
	long
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem, \
	OctetString          *diagTextOctetString
	0
	int no_op
END

DEFINE rttMonGetVerifyDataFlag
/*
 * rttMonGetVerifyDataFlag Retval
 */
	RETVAL
	boolean
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem
	0
	int no_op
END

DEFINE rttMonGetPendingBoolean
/*
 * rttMonGetPendingBoolean Retval
 */
	RETVAL
	watched_boolean *
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem
	0
	int no_op
END

DEFINE rttMonCalculateResponseTime
/*
 * rttMonCalculateResponseTime Retval
 */
	RETVAL
	ulong
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem
	0
	int no_op
END

DEFINE rttMonProbePanic
/*
 * rttMonProbePanic Stub
 */
	STUB
	void
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem
END

DEFINE rttMonProbePanicInternal
/*
 * rttMonProbePanicInternal Stub
 */
	STUB
	void
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem
END

DEFINE rttMonSetSelfID
/*
 * rttMonSetSelfID Stub
 */
   	STUB
	void
	long *IDofCaller, \
	rttMonCtrlAdminQItem *inRttMonCtrlAdminQItem
END

END REGISTRY

