: # use perl
eval 'exec perl5 -S $0 ${1+"$@"}'
	if 0;
'di';
'ig00';
# $Id: connect,v 1.13 1997/01/23 21:40:15 gwynne Exp $
# $Source: /users/gwynne/depend/RCS/connect,v $
#############################################################################
#
# connect - Given a list of object files, produces an xref showing
# the link level dependencies between them.
#
# January 1997, Gwynne Stoddart
#
# Copyright (c) 1997 by cisco Systems, Inc.
# All rights reserved.
#
# Note: Use the version of nm appropriate to the object file format.
# You may wish to get the name of the appropriate version of nm
# from the router image makefiles. If no version of nm is
# supplied, connect will terminate with an error and non-zero
# status.
#
# Usage is displayed with "connect -h".
#
# Loosely based on Scott Cherf's ~cherf/src/perl/subset/connect
#
#----------------------------------------------------------------------
# $Log: connect,v $
# Revision 1.13  1997/01/23 21:40:15  gwynne
# Final code review comments (style & commentary)
#
# Revision 1.12  1997/01/23 01:01:11  gwynne
# Remove cisco-specific filtering of errors.
#
# Revision 1.11  1997/01/22 16:33:02  gwynne
# Add man capability
#
# Revision 1.10  1997/01/22 07:33:55  gwynne
# Copyright notice
#
# Revision 1.9  1997/01/22 02:43:26  gwynne
# Code review comment (copyright, curly braces, \) ).
#
# Revision 1.8  1997/01/21 04:16:00  gwynne
# Version for code review.
#
# Revision 1.7  1997/01/16 01:40:40  gwynne
# Terminate with positive value when an object has an unresolved reference in
# -u mode.
#
# Revision 1.6  1997/01/09 02:34:54  gwynne
# More testing.
#
#############################################################################

use Getopt::Std;

sub collectSymbols
{
    local($addr, $line, @lines, @fields, $section, $symbol, $obj, 
	  $obj_file, @objs);

    #   Get the list of files from STDIN.
    #   For each object file given,
    #   collect information on defined and undefined symbols
    #   using the nm program.  The -g option restricts the symbol information to
    #   global externs only so we don't see collisions on static definitions.


    undef $/;
    $_ = <STDIN>;
    # The list of files may be simply
    # blank-seperated - replace whitespace with single newlines for split.
    # Also remove "*" and "@" at line end which may be seen
    # if the input is from ls output. 

    s/(\S*)(\*|\@)\s+/$1\n/g;
    (@objs) = split("\n",$_);

    unless (@objs) { die "$0: No files to analyze - for usage try $0 -h\n"; }

    foreach $obj_file (@objs) {
	chomp $obj_file;
	# Skip everything but existing binaries...
	# Continue with analysis even if some files are not present.
	unless (-B $obj_file) {
	    (-e $obj_file) ? print STDERR "$0: $obj_file not binary\n" : 
		print STDERR "$0: $obj_file not found\n" ; 
	    next;
	}

        if (!open (SYMBOLS, "$NM -g $obj_file|")) {
            print STDERR "$0: couldn't run $NM on $obj_file: $!\n";
	    next;
	}
	undef $/;
	$_ = <SYMBOLS>;
	close (SYMBOLS);

	(@lines) = split("\n",$_);

	# Unless this is an archive library, we now know the 
	# complete object file name
        unless ($obj_file =~ /.*\.a$/) { 
	    $OBJECTS{$obj_file} = $obj_file; 
	    $obj = $obj_file;
	}

	foreach $line (@lines) {
	    chomp $line;
	    # Save the included object names for archive libraries
	    # (which end in ".a"). There may be several objects in 
	    # an archive library, and for informational reasons we
	    # may wish to print them out.
	    if ($line =~ /.*\.o:$/ && $obj_file =~ /.*\.a$/) {
	       $line =~ s/(.*):$/$1/;
	       $obj = "$obj_file\($line\)";
	       $OBJECTS{$obj} = $obj;
	       next;
	    }
	    @fields = split(' ', $line);
	    $symbol = pop @fields;
	    $section = pop @fields;
	    @fields = ();
	    next unless $section;
            if ($section eq 'T') {
               $TEXT{$symbol} = $obj;
            } 
	    elsif ($section eq 'U') {
               $UNDEFINED{$obj} .= "$symbol ";
            } 
	    else {
               $DATA{$symbol} = $obj;
	    }
	}
    }

}

sub references
{
    local(@refs) = @_;
    local(@undefs, $symbol, $def, $key);

    # Calculate the "references" relationships
    foreach $refs (@refs) {
        # Initialize the connection counts for this row:
	foreach $key (keys (%OBJECTS)) {
	    $DEF_TEXT{"$refs $key"} = 0;
	    $DEF_DATA{"$refs $key"} = 0;
	}

	# For each undefined reference, figure out where the
	# definition is, and note who is referencing it.
	@undefs = split (/\s/, $UNDEFINED{$refs});
	foreach $symbol (@undefs) {
	    if ($def = $TEXT{$symbol}) {      # assignment to $def intended
	        $DEF_TEXT{"$refs $def"}++;
	    }
	    elsif ($def = $DATA{$symbol}) {   # assignment to $def intended
		$DEF_DATA{"$refs $def"}++;
            }
            else {
		$DEF_TEXT{"$refs ??"}++;
            }
        }
    }

}


sub printSymbols
{
    local (@symbols) = @_;
    local ($symbol);

    foreach $symbol (@symbols) {
        print "\t\t\t$symbol\t\t\n";
    }
    
}

sub crossrefSymbols
{
    local(@refobjs) = @_;
    local(@undefs, $def, $refobj, $symbol);

    # For each undefined entry in each file, try to locate an 
    # external that satisfies it.  Note number and type (text/data) 
    # of each reference.

    foreach $refobj (@refobjs) {
        @undefs = split (/\s/, $UNDEFINED{$refobj});
	foreach $symbol (@undefs) {
	    if ($def = $TEXT{$symbol}) {    # assignment to $def intended
	        $DEF_TEXT_SYMBOL{"$refobj $def"} .= "$symbol\($def\) ";
	    } 
	    elsif ($def = $DATA{$symbol}) { # assignment to $def intended
	    	$DEF_DATA_SYMBOL{"$refobj $def"} .= "$symbol\($def\) ";
	    } 
	    else {
                # Use an 'undefined' counter for references that 
		# aren't satisfied by any object file we looked at.
		# Filter out the standard references to linker
		# symbols like edata, etext, etc. OK - Hacky kludge
		# time, but let us not deny the reality of the situation.
		unless ( $symbol =~ 
			/^\s*(_)*(data_start|edata|etext|end|fdata|start)\s*$/)
                {
		    $DEF_UNDEF_SYMBOL{"$refobj"} .= "$symbol ";
		}
	    }
	}
    }

}

sub printUnresolved
{

    # Now all the symbols have been collected.  For each object file, lookup
    # its undefined external symbols and try to find other objects that can
    # satisfy them.  When a match is found, throw it away ;-)
    # We only print the unresolved symbols in linker-like error format
    # from this routine. The program exits with a non-zero result if
    # any of the objects has an unresolved reference. This allows a
    # more linker-like behavior when the program is called from within
    # a make file. We count the unresolved references only because we can.

    local(@rows, @symbols, $symbol, $obj, $unresolved_objs);

    @rows = sort keys %OBJECTS;

    # Calculate the reference relationships
    &references (@rows);

    # For unresolved references, always track the symbols
    &crossrefSymbols (@rows);

    # Calculate the unresolved reference dependencies and print them
    $unresolved_objs = 0;
    foreach $obj (@rows) {
        @symbols = split (' ', $DEF_UNDEF_SYMBOL{$obj});
	next unless @symbols;
	$unresolved_objs++;
	foreach $symbol (@symbols) {
               print "$obj: undefined references to \'$symbol\'\n";
	}
    }
    return $unresolved_objs;
	
}

sub printXref
{

    # Now all the symbols have been collected.  For each object file, lookup
    # its undefined external symbols and try to find other objects that can
    # satisfy them.  When a match is found, indicate the interdependency.

    local(@rows, @symbols, $symbol, $obj);

    @rows = sort keys %OBJECTS;

    # Calculate the reference relationships
    &references (@rows);

    # If we are printing symbols, track the symbols
    &crossrefSymbols (@rows) if ($opt_s);

    # Calculate the "references" dependencies and print them
    foreach $obj (@rows) {
        # Print the connection information for each object
        # Judicious application of the format statement would make for
	# a cleaner implementation of the printout.

        print "$obj\n\thas external references to:\n";
        foreach $key (@rows) {
    	    if ($DEF_TEXT{"$obj $key"} || $DEF_DATA{"$obj $key"}) {

                print "\t\ttext:       " , $DEF_TEXT{"$obj $key"} , 
		    "\t\t$OBJECTS{$key}\n"; 
	        if ($opt_s) {
	            @symbols = split (' ', $DEF_TEXT_SYMBOL{"$obj $key"});
		    &printSymbols (@symbols);
	        }
                print "\t\tdata:       " , $DEF_DATA{"$obj $key"} , "\n" ;
	        if ($opt_s) {
	            @symbols = split (' ', $DEF_DATA_SYMBOL{"$obj $key"});
		    &printSymbols (@symbols);
	        }
	    } 
        }

        print "\t\tunresolved: " , $DEF_TEXT{"$obj ??"} , "\t\t??\n";
	if ($opt_s) {
	    @symbols = split (' ', $DEF_UNDEF_SYMBOL{$obj});
	    foreach $symbol (@symbols) {
                print "\t\t\t$symbol\t\t\n";
	    }
	}
	
	print "\tis referenced by:\n";
        foreach $key (@rows) {
    	    if ($DEF_TEXT{"$key $obj"} || $DEF_DATA{"$key $obj"}) {
                print "\t\ttext:       " , $DEF_TEXT{"$key $obj"} , 
		    "\t\t$OBJECTS{$key}\n" ;
	        if ($opt_s) {
	            @symbols = split (' ', $DEF_TEXT_SYMBOL{"$key $obj"});
		    &printSymbols (@symbols);
	        }
                print "\t\tdata:       " , $DEF_DATA{"$key $obj"} , "\n" ;
	        if ($opt_s) {
	            @symbols = split (' ', $DEF_DATA_SYMBOL{"$key $obj"});
		    &printSymbols (@symbols);
	        }
	    } 
        }
    }
}
	

#---------------------------- GLOBAL DATA

# Use the version of nm appropriate to the object file format.
# Use the -n option to set to another version of nm from /router/bin
$NM = '';

#---------------------------- Main

# Parse options 
&getopts('hn:su');

# A request for help takes precedence over all other requests.
if ($opt_h) {
    system("nroff -man $0");
    exit 1;
}

# Check for the option specifying an alternate version of nm 
if ($opt_n) {
    unless (-B $opt_n) {
        (-e $opt_n) ? die "$0: $opt_n (version of nm) not binary\n" : 
   	    die "$0: $opt_n (version of nm) not found\n" ; 
    }
    $NM = $opt_n;
}
else {
    die "$0: Option -n <nm binary> is required - for usage try $0 -h\n";
}

# Run nm on the list of object files presented at STDIN and create
# hashes of symbols, their defining files and referencing files.
&collectSymbols;

# Determine whether to print only unresolved symbols or a complete
# crossreference. Unresolved mode exits with a non-zero result when
# there are any unresolved references for any object file.
if ($opt_u) {
    (&printUnresolved > 0) ? exit 1: exit 0;
}
else {
    &printXref;
}
exit 0;

###############################################################

    # These next few lines are legal in both Perl and nroff.

.00;                       # finish .ig
 
'di           \" finish diversion--previous line must be blank
.nr nl 0-1    \" fake up transition to first page again
.nr % 0         \" start at page 1
'; __END__ ##### From here on it's a standard manual page #####

.TH CONNECT 1 "January 25, 1997"
.SH NAME
connect 
.SH SYNOPSIS
.B connect [-h] [-s | -u] -n 
.I nm_binary
.SH DESCRIPTION
.I connect
takes a list of object files from STDIN and
does simple crossreference analysis on them using 
.I nm.
.IP
example% ls sub_*.o | connect.pl
.IP
example% cat file_of_object_names | connect.pl
.SH OPTIONS
.TP
.B -s	include symbols referenced & their definition site
.LP
.B -u	include only unresolved symbols as linker-like errors
.LP
.B -n	version of nm (required)
.LP
.B -h	this message
.SH ENVIRONMENT
No environment variables are used.
.SH FILES
connect is used in sys/makeimages.
.SH AUTHOR
Gwynne Stoddart
.SH "SEE ALSO"
perl(1), nm(1)
.SH DIAGNOSTICS
none
.SH BUGS
none
.ex

