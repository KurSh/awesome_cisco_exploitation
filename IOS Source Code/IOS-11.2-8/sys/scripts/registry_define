: # use perl -*-Perl-*-
eval 'exec perl5 -S $0 ${1+"$@"}'
    if 0;
#
# $Id: registry_define,v 3.4 1996/02/17 09:04:51 rchiao Exp $
#------------------------------------------------------------------
# registry_define -- Perl script to create registries
#
# 15-Jul-1993, Dean Hiller
#
# Copyright (c) 1993-1997 by cisco Systems, Inc.
# All rights reserved.
#
#------------------------------------------------------------------
# $Log: registry_define,v $
# Revision 3.4  1996/02/17  09:04:51  rchiao
# CSCdi49271:  makefile changes for ClearCase
#
# Revision 3.3  1996/01/25  11:22:43  smackie
# Registry code gets some much-needed hot-oil massaging, free liposuction
# and a makeover.  (CSCdi47101)
#
#    o Compress registry structures. Saves over 120K for all platforms
#    o Add registry subsystems and remove feature registry initializion
#      from registry.c to fix woeful initialization scaling problems
#    o Remove unused and seemingly unloved registry debugging code
#    o Add registry memory statistics to shame people into action
#
# Revision 3.2  1995/11/17  18:50:04  hampton
# Remove old entries from the RCS header logs.
#
# Revision 3.1  1995/11/09  13:11:05  shaker
# Bump version numbers from 2.x to 3.x.
#
# Revision 2.2  1995/07/07  22:01:53  smackie
# Remove between 50 and 85K of text segment space by compiling out the
# little-used registry service and function strings. (CSCdi36802)
#
# Revision 2.1  1995/06/07  22:43:34  hampton
# Bump version numbers from 1.x to 2.x.
#
#------------------------------------------------------------------
# $Endlog$


#
#
# Syntax for defining a registry
#
# Each item must begin a line of its own.
# Lines may be continued by ending with a \
#
# BEGIN REGISTRY <name of registry> <optional registry symbol>
#
# DEFINE <name of service point>
# /* <comment lines in standard C format describing the
#     registry. These will be reformatted unless they are
#     in the comment bar format> */
# DATA
#    <Lines of text to be copied from the input to the
#     between the comment and the function declaration>
# END DATA
#    <type of service> := LIST | LOOP | STUB | CASE | RETVAL | VALUE | PID_LIST
#    <type declaration of value returned by called function>
#              must be void for LIST and CASE, boolean
#              for LOOP, and ulong for VALUE.
#    <prototype list for called function>
#              a single - represents no arguments.
#    <number of cases for case service>
#    <type for case statement>
# END
#
# END REGISTRY
#

# move a file using 'cp' instead of rename, works for moving files
# and directories between filesystems. (we may want to consider 'ln -s')
sub move {
    local($source, $dest) = @_;
    local($rc);
    local($mode);
    # first try to use rename
    $rc = rename($source,$dest);
    if (!$rc) {
	if (-e $dest) {			# does the dest exist?
            $mode = (stat($dest))[2];
            if ($mode != ($mode | 0222)) {
	        # chmod a+w $dest
                chmod($mode | 0222, $dest);
            }
	    unlink($dest);
	}
        system("mv $source $dest"); # mv can often move across file systems
       	$rc = !$?;		# rc = 0 on error, rc = 1 on success
        if (!$rc) {
	    # try harder
            system("/bin/cp -r $source $dest");
	    $rc = !$?;	# rc = 0 on error, rc = 1 on success
	    if ($rc && !unlink($source)) {
	        # copied the file, but failed to nuke the source
	        # try to force nuking the source
	        system("/bin/rm -f $source");
	        $rc = !$?;  # rc = 0 on error, rc = 1 on success
	    }
	}
    }
    $rc;
}

# command line processing

$infile = '-';
$regc = 0;			# Create regh file
@argv = @ARGV;
@ARGV=();
while (@argv) {
    if ($argv[0] =~ /^-/) {
	if ($argv[0] eq '-c') {
	    shift(@argv);	# Remove option from list
	    $regc = 1;		# Create regc file
	}
	else {
	    &usage();
	}
    }
    else {
	if ($infile eq '-') {
	    $infile = shift(@argv);
	    if ( -r $infile) {
		open(STDIN, $infile) || die "Unable to read $infile: $!";
		if ($infile =~ /\.reg$/) {
		  ($out_prefix = $infile) =~ s/\.reg$//;
		  $out_regc_final = "$out_prefix.regc";
		  $out_regh_final = "$out_prefix.regh";
                  $out_regc = "./regc.$$";
                  $out_regh = "./regh.$$";
                  open(REGC, '>'.$out_regc) ||
		    die "Unable to write to $out_regc: $!";
                  open(REGH, '>'.$out_regh) ||
		     die "Unable to write to $out_regh: $!";
		}
		else {
		  print STDERR "inputfile of $infile does not end in .reg\n";
		  &usage();
		}
	    }
	    else {
		print STDERR "inputfile of $infile is not readable\n";
		&usage();
	    }
	}
	else {
	    &usage();
	}
    }
}

# initialization

$lineno=0;                              # So far, no lines read
$errors=0;				# So far, no errors
($s_begin, $s_define, $s_comment, $s_pc, $s_dt,
 $s_pd, $s_t, $s_rv, $s_pr, $s_cases,
 $s_ct, $s_msgid, $s_end, $s_skend) = (0..13);    # Define states

@month = ( 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
	   'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' );

#    Make an array of valid types
#    1=retval must be void
#    2=retval must be boolean
#    3=retval must be ulong
#    4=unrestricted retval 
%valid_type = (
      "LIST",   1,
      "LOOP",   2,
      "STUB",   4,
      "CASE",   1,
      "RETVAL", 4,
      "VALUE",  3,
      "PID_LIST", 1,
      "PID_CASE", 1,
      "FASTCASE", 4,
      "FASTCASE2", 4,
      "FASTSTUB", 4,	       
      "FASTSTUB2", 4,	       
      "FASTSTUB3", 4,	       
      "FASTSTUB4", 4,	       
);
%type_code = (
      "LIST",   "SERVICE_LIST",
      "LOOP",   "SERVICE_LIST",
      "STUB",   "SERVICE_STUB",
      "CASE",   "SERVICE_CASE",
      "RETVAL", "SERVICE_CASE",
      "VALUE",  "SERVICE_VALUE",
      "PID_LIST", "SERVICE_PID_LIST",
      "PID_CASE", "SERVICE_PID_CASE",
      "FASTCASE", "SERVICE_CASE",
      "FASTCASE2", "SERVICE_CASE",
      "FASTSTUB", "SERVICE_STUB",	      
      "FASTSTUB2", "SERVICE_STUB",	      
      "FASTSTUB3", "SERVICE_STUB",	      
      "FASTSTUB4", "SERVICE_STUB",	      
);
%case = (
      "LIST",   0,
      "LOOP",   0,
      "STUB",   0,
      "CASE",   1,
      "RETVAL", 1,
      "VALUE",  1,
      "PID_LIST", 0,
      "PID_CASE", 1,
      "FASTCASE", 1,
      "FASTCASE2", 1,
);
%ret_b = (
      "LIST",   "",
      "LOOP",   "return(",
      "STUB",   "return(",
      "CASE",   "",
      "RETVAL", "return(",
      "VALUE",  "return(",
      "PID_LIST", "",
      "PID_CASE", "",
      "FASTCASE", "return(REGISTRY_FAST",
      "FASTCASE2", "return(REGISTRY_FAST2",
      "FASTSTUB", "return(REGISTRY_FAST_STUB",	  
      "FASTSTUB2", "return(REGISTRY_FAST_STUB2",	  
      "FASTSTUB3", "return(REGISTRY_FAST_STUB3",	  
      "FASTSTUB4", "return(REGISTRY_FAST_STUB4",	  
);
%ret_e = (
      "LIST",   "",
      "LOOP",   ")",
      "STUB",   ")",
      "CASE",   "",
      "RETVAL", ")",
      "VALUE",  ")",
      "PID_LIST", "",
      "PID_CASE", "",
      "FASTCASE", ")",
      "FASTCASE2", ")",
      "FASTSTUB", ")",
      "FASTSTUB2", ")",
      "FASTSTUB3", ")",
      "FASTSTUB4", ")",
);
%ret_alt_b = (
      "FASTSTUB", "REGISTRY_FAST_STUB",	  
      "FASTSTUB2", "REGISTRY_FAST_STUB2",	  
      "FASTSTUB3", "REGISTRY_FAST_STUB3",	  
      "FASTSTUB4", "REGISTRY_FAST_STUB4",	  
);
%ret_alt_e = (
      "FASTSTUB", "",
      "FASTSTUB2", "",
      "FASTSTUB3", "",
      "FASTSTUB4", "",
);
%indent = (
      "LIST",   "",
      "LOOP",   "       ",
      "STUB",   "",
      "CASE",   "",
      "RETVAL", "         ",
      "VALUE",  "        ",
      "PID_LIST", "",
      "PID_CASE", "",
      "FASTCASE", "",       
      "FASTCASE2", "",       
      "FASTSTUB", "",
      "FASTSTUB2", "",
      "FASTSTUB3", "",
      "FASTSTUB4", "",
);
%a_type = (
      "LIST",   "list",
      "LOOP",   "list",
      "STUB",   "stub",
      "CASE",   "case",
      "RETVAL", "case",
      "VALUE",  "value",
      "PID_LIST", "pid_list",
      "PID_CASE", "pid_case",
      "FASTCASE", "case",
      "FASTCASE2", "case",
      "FASTSTUB", "stub",	   
      "FASTSTUB2", "stub",	   
      "FASTSTUB3", "stub",	   
      "FASTSTUB4", "stub",	   
);
%c_type = (
      "LIST",   "list",
      "LOOP",   "loop",
      "STUB",   "stub",
      "CASE",   "case",
      "RETVAL", "retval",
      "VALUE",  "value",
      "PID_LIST", "pid_list",
      "PID_CASE", "pid_case",
      "FASTCASE", "case",
      "FASTCASE2", "case",
      "FASTSTUB", "stub",
      "FASTSTUB2", "stub",
      "FASTSTUB3", "stub",
      "FASTSTUB4", "stub",
);

$state=$s_begin;			# Set to initial state
#
#  Main processing loop
#
while ($Line = <STDIN>) {	        # Read all lines from all files
					# specified on the command line
  $lineno++;				# Another line has been read
  chop($Line);				# Remove end of line character
  while ($Line  =~ /\\$/) {		# Handle continuations
    chop($Line);			# Nuke continuation character
    $Line .= <STDIN>; 			# Fetch new line
    $lineno++;				# Another line has been read
    chop($Line);			# Remove end of line character
  }

  ($t = $Line) =~ s/^\s*$//;		# Remove all white space lines 
  if ((substr($Line,0,1) ne "#") &&	# Ignore comment lines
      (length($t))) { 			# and null lines
    # Equivalent of switch($state)
    if ($state == $s_begin) {		# Nothing seen yet 
      ($begin, $registry, $name, $symbol, $rest) = split(' ',$Line,5);
      $rest = '' if (!defined($rest));
      if (($begin eq 'BEGIN') && ($registry eq 'REGISTRY')) {
        if (length($rest)) {		# Extra data on line
          &extrerr;
        }
        &begin($name, $symbol);         # Start the registry
      }
      else {
        &errmsg("Missing BEGIN REGISTRY statement.");
      }      
    }
    elsif ($state == $s_define) {	# Expecting DEFINE or END
      ($t1, $service, $rest) = split(' ',$Line,3);
      $rest = '' if (!defined($rest));
      if ($t1 eq 'END') {		# End of registry
        if ($service eq 'REGISTRY') {   # Really end of registry
           &end_registry;		# Finish building registry
        }
        else {				# Not END REGISTRY
          if (length($service)) {
            &errmsg("Expecting END REGISTRY");
          }
          else {
            &errmsg("Expecting END REGISTRY, not just END");
          }
        }
      }
      elsif ($t1 eq 'DEFINE') {		# Start of new service
        if (length($rest)) {		# Extra data on line
          &extraerr;
        }
        &define($service);              # Create the service
      }
      else {				# Unexpected statement
        &errmsg("Expecting DEFINE or END statement");
      }
    }
    elsif ($state == $s_comment) {	# Expecting /*
      if ($Line =~ /^\s*\/\*/) {	# Start of comment
        &begin_comment;			# Process comment
      }
      else {				# Must be registry type
        &errmsg("Expecting comment.");
	$state=$s_skend;		# Skip to next end
      }
    }
    elsif ($state == $s_pc) {		# Processing comment
      &more_comment;
    }
    elsif ($state == $s_dt) {		# Expecting DATA or registry type
      ($t1, $rest) = split(' ',$Line,2);
      $rest = '' if (!defined($rest));
      if ($t1 eq 'DATA') {		# Start of comment
        if (length($rest)) {		# Extra data on line
          &extraerr;
        }
        &begin_data;			# Process data
      }
      else {				# Must be registry type
        if (length($rest)) {		# Extra data on line
          &extraerr;
        }
        &check_type($t1);		# Process type
      }
    }
    elsif ($state == $s_pd) {		# Processing DATA
      ($t1, $t2, $rest) = split(' ',$Line,3);
      $rest = '' if (!defined($rest));
      if ($t1 eq 'END') {		# Either END or END DATA
        if ($t2 eq 'DATA') {		# End of data sequence
          if (length($rest)) {		# Extra data on line
            &extraerr;
          }
          &end_data;			# Finish data statement processing
        }
	else {				# Unexpected END statement
          if (length($t2)) {		# Extra data on line
            ($t1, $rest) = split(' ',$Line,2);
            $rest = '' if (!defined($rest));
            &extraerr;
          }
          &errmsg("Unexpected END statement in middle of DATA.");
          $state = $s_define;		# Look for new DEFINE
        }
      }
      else {				# Just more data
        &more_data;
      }
    }
    elsif ($state == $s_t) {		# Expecting registry type
      ($t1, $rest) = split(' ',$Line,2);
      $rest = '' if (!defined($rest));
      if (length($rest)) {		# Extra data on line
        &extraerr;
      }
      &check_type($t1);			# Process type
    }
    elsif ($state == $s_rv) {		# Expecting return value
      # First try splitting the return value into three parts to check
      # for a type modifier (like "const") on the return value.  If
      # the first token isn't a modifier then re-split the return value
      # into two parts the way the code was originally written.
      ($t1, $t2, $rest) = split(' ',$Line,3);
      if ($t1 eq 'const') {
	$t1 = $t1 . ' ' . $t2;
      } else {
	($t1, $rest) = split(' ',$Line,2);
      }
      $rest = '' if (!defined($rest));
      if (length($rest)) {		# Extra data on line
        if ($rest eq '*') {		# Allowed to be single *
	  $t1 = $t1." *";		# Add in *
        }
        else {
          &extraerr;
        }
      }
      &return_value($t1);
    }
    elsif ($state == $s_pr) {		# Expecting prototype for function
      &prototype($Line);		# Process prototype statement
    }
    elsif ($state == $s_cases) {	# Number of cases for case registry
      ($t1, $rest) = split(' ',$Line,2);
      $rest = '' if (!defined($rest));
      if (length($rest)) {		# Extra data on line
        &extraerr;
      }
      &cases($t1);			# Process case parameter
    }
    elsif ($state == $s_ct) {		# type for case statement
      ($t1, $t2, $rest) = split(' ',$Line,3);
      $rest = '' if (!defined($rest));
      if (length($rest)) {		# Extra data on line
        &extraerr;
      }
      &case_proto($Line);
    }
    elsif ($state == $s_msgid) {	# const to send to processes
      ($t1, $t2, $rest) = split(' ',$Line,3);
      $rest = '' if (!defined($rest));
      if (length($rest)) {		# Extra data on line
        &extraerr;
      }
      &msg_const($Line);
    }
    elsif ($state == $s_end) {		# Expecting END
      ($t1, $rest) = split(' ',$Line,2);
      $rest = '' if (!defined($rest));
      if (length($rest)) {		# Extra data on line
        &extraerr;
      }
      if ($t1 eq 'END') {		# End statement found
	&build_procs;			# Build the procedures
        $state = $s_define;		# Look for a define statement
      }
      else {				# Unexpected statement
        &errmsg("Expecting END statement.");
        $state = $s_skend;		# Skip until END found
      }
    }
    elsif ($state == $s_skend) {	# Skipping to END
      ($t1, $t2, $rest) = split(' ',$Line,3);
      $rest = '' if (!defined($rest));
      if ($t1 eq 'END') {		# Found the END statement
        if (length($t2)) {		# Extra data on line
	  if ($t2 ne 'DATA') {		# Ignore END DATA 
            ($t1, $rest) = split(' ',$Line,2); 
            $rest = '' if (!defined($rest));
            &extraerr;
            $state = $s_define;
          }
        }
        else {
          $state = $s_define;		# Look for DEFINE
        }
      }
    }
    else {				# State has incorrect value
      &errmsg("Incorrect value ($state) for parser state.");
    }
  }
}
#
# Cleanup at end of processing
#
if ($state != $s_begin) {		# Missing END statement
  &errmsg("Missing END statement.");
  &end_registry;			# Dump registry anyway
}
if ($errors > 0) {
  print STDERR "$errors errors.\n"
}

close (REGC);
close (REGH);
if ($regc) {
    &move($out_regc, $out_regc_final)
	|| die "Unable to mv $out_regc $out_regc_final";
    unlink($out_regh)
	|| die "Unable to rm $out_regh";
    chmod(0444,  $out_regc_final)
	|| die "Unable to chmod 444 $out_regc_final";
}
else {
    unlink($out_regc)
	|| die "Unable to rm $out_regc";
    &move($out_regh, $out_regh_final)
	|| die "Unable to mv $out_regh $out_regh_final";
    chmod(0444,  $out_regh_final)
	|| die "Unable to chmod 444 $out_regh_final";
}

exit ($errors > 0);

########################################################################
#
# subroutines follow
#
########################################################################
#
# Initialize on BEGIN REGISTRY statement processing
#
sub begin
{
  local($reg,$symbol) = @_;             # Get the parameters
  ($lwreg = $reg) =~ tr/A-Z/a-z/;	# Make lower case
  $symbol = '' if (!defined($symbol));
  if (length($symbol)) {	        # Symbol was specified
      $REG = "$symbol";		        # Set Global name
  }
  else {			        # Use default symbol name
      $REG = "REG_$reg";        	# Set Global name
  }
  ($mday,$mon,$year) = (localtime(time))[3..5];
  $year = "1900" + $year;		# in 2000, $year is 100
  $mon  = $month[$mon];
  @enum = ( );		 		# Start list of services
  @func = ( );				# Start the function array
  @create = ( );			# Start the create procedure
  $company = 'cisco Systems, Inc.';
  ($out_regc_final_base = $out_regc_final) =~ s,[^/]*/,,g;
  ($out_regh_final_base = $out_regh_final) =~ s,[^/]*/,,g;
  ($infile_base = $infile) =~ s,[^/]*/,,g; # basename
  $title = <<"EndOfHeader";
/* This file is generated from $infile_base. 
 * Do not attempt to edit it 
 *------------------------------------------------------------------
 * $out_regc_final_base -- Service Point Creation for $reg Registry
 *
 * $mday-$mon-$year, registry_define script
 *
 * Copyright (c) $year by $company
 * All rights reserved.
 *
 *------------------------------------------------------------------
 */
EndOfHeader
  push(@create,$title);			# Save the title for later
  $title = <<"EndOfHeader";
/* This file is generated from $infile_base. 
 * Do not attempt to edit it 
 *------------------------------------------------------------------
 * $out_regh_final_base -- Service Points for $reg Registry
 *
 * $mday-$mon-$year, registry_define script
 *
 * Copyright (c) $year by $company
 * All rights reserved.
 *
 *------------------------------------------------------------------
 */
EndOfHeader
  push(@enum,$title);			# Save the title for later
  push(@enum, "\nenum {" ); 		# Start list of services
  push(@create,"static inline void create_registry_$lwreg(void) {");
  push(@func, "\n");			# whitespace is nice
  $state = $s_define;			# Enter next state
}
#
# Output table when END REGISTRY is seen
#
sub end_registry
{
  if (!$errors) {			# Don't output if errors
    ($ureg = $lwreg) =~ tr/a-z/A-Z/;    # Translate to upper case
    $ureg = "SERVICE_".$ureg."_MAX";    # Make full service name
    push(@enum,"    ".$ureg.",");       # Write enum end marker
    push(@enum,"};\n");			# End list of services
    push(@create,"}\n");		# End the create procedure
    print REGC join("\n",@create);	# Output the registry create procedure
    print REGH join("\n",@enum);	# Output all the services
    print REGH join("\n",@func);	# Output all of the functions
  }
  $state = $s_begin;			# Set starting state
}
#
# Initialize at start of DEFINE command
#
sub define
{
  ($service) = @_;			# Get parameters
  if (length($service)) {		# Make sure something there
    if ($service =~ /\W/) {		# Check for illegal characters
      &errmsg("Illegal character in '$service'");
      $state = $s_skend;		# Skip to END
    }
    else {
      ($uservice = $service) =~ tr/a-z/A-Z/;# Translate to upper case
      $uservice = "SERVICE_$uservice";  # Make full service name
      push(@enum,"    ".$uservice.",");	# Add a symbol to the array
      $state = $s_comment;		# Look for comment
      $comment = '';			# No longer defined
      @data = ();			# No longer defined
      @prototype = ();			# No longer defined
      $cases=0;				# Null value
      $case_proto = '';			# No longer defined
      $msg_id = '';			# No longer defined
    }
  }
  else {
    &errmsg("No service name specified");
    $state = $s_skend;			# Skip to END
  }
}
#
# Process first comment line
#
sub begin_comment
{
  ($rest = $Line) =~ s/^\s*\/\*\s*//;	# remove /*
  $state = $s_pc;			# Process more comment lines
  if (length($rest)) {			# Data exists
    if ($rest =~ s/\s*\*\/\s*$//) {	# Remove ending sequence if there
					# Must be one line comment
      $state = $s_dt;			# Done with comment sequence
    }
    ($comment = $rest) =~ s/\s*$//;	# Start the comment string
					# with no trailing blanks
  }
  else {
    $comment = '';			# Null comment string
  }
}
#
# Process subsequent comment lines
#
sub more_comment
{
  if ($Line =~ s/\s*\*\/\s*$//) {	# Remove ending sequence if there
    $state = $s_dt;			# Done with comment sequence
  }
  if ($Line =~ s/^\s*\*\s*//) {		# Comment bar format
    if (length($comment)) {
      $comment = $comment."\n * ".$Line;# Add new line
    }
    else {
      $comment = $Line;			# First line in comment bar
    }
  }
  else {
    $Line =~ s/^\s*(.*)\s*$/$1/;	# Remove leading and trailing blanks
    if (length($Line)) {		# Some data still exists
      if (length($comment)) {
        $comment = $comment." ".$Line;	# Add to string
      }
      else {
        $comment = $Line;		# First line in comment
      }
    }
  }
}
#
# Start processing for DATA statement
#
sub begin_data
{
  $state = $s_pd;			# Process DATA statement
}
#
# Process data records
#
sub more_data
{
  push(@data,$Line);			# Save the data
}
#
# Process END DATA statement
#
sub end_data
{
  $state = $s_t;			# Process type
}
#
# Validate the type of registry requested
#
sub check_type
{
  ($type) = @_;				# Get parameters
  if ($valid_type{$type}) {		# Valid type specified
    $state = $s_rv;			# On to next state
  }
  else {				# Invalid type
    &errmsg("Invalid registry type '$type' specified."); 
    $state = $s_skend;			# Skip to end statement
  }
}
#
# Validate the specified return value
#
sub return_value
{
  ($ret_value) = @_;			# Get parameters
  $state = $s_pr;			# Process prototype statement
  if ($valid_type{$type} == 1) {	# must be void
    if ($ret_value ne 'void') {
      &errmsg("Return value must be 'void' for a $type service.");
      $ret_value = 'void';
    }
  }
  elsif ($valid_type{$type} == 2) {	# must be boolean
    if ($ret_value ne 'boolean') {
      &errmsg("Return value must be 'boolean' for a $type service.");
      $ret_value = 'boolean';
    }
  }
  elsif ($valid_type{$type} == 3) {	# must be ulong
    if ($ret_value ne 'ulong') {
      &errmsg("Return value must be 'ulong' for a $type service.");
      $ret_value = 'ulong';
    }
#    $state = $s_end;			# Now look for end
  }
  else {
    &check_proto($ret_value);
  }
}
#
# Process the prototype statement
#
sub prototype
{
  ($t) = @_;				# Get arguments
  @prototype = split(',',$t);		# Separate them
  for ($i=0; $i<=$#prototype; $i++) {
    $prototype[$i] =~ s/^\s*//;		# Remove leading blanks
    $prototype[$i] =~ s/\s*$//;		# Remove trailing blanks
  }
  if ((($type eq 'PID_LIST') || ($type eq 'PID_CASE')) && ($#prototype > 2)) {
    &errmsg("Only 2 arguments allowed on PID_LIST or PID_CASE prototype statement.");
    @prototype = splice(@prototype,2,$#prototype-1);
					# Remove extra items
  }
  elsif ($#prototype > 9) {		# Too many arguments
    &errmsg("Only 10 arguments allowed on prototype statement.");
    @prototype = splice(@prototype,10,$#prototype-9);
					# Remove extra items
  }
  if ($prototype[0] eq '-') {		# Special 0 argument case
    if ($#prototype == 0) {		# Only one argument
      @prototype = ();                  # Make zero arguments
    }
    else {
      &errmsg("- is only valid as a single argument.");
    }
  }
  foreach $p (@prototype) {		# validate the types
    &check_proto($p);
  }
  if (($type eq 'CASE') || ($type eq 'RETVAL') || ($type eq 'VALUE') || ($type eq 'FASTCASE') || ($type eq 'FASTCASE2')) {
					# Case information follows
    $state = $s_cases;			# Get number of cases
  }
  elsif (($type eq 'PID_LIST') || ($type eq 'PID_CASE')) {
    $state = $s_msgid;			# Look for message id
  } else { 
    $state = $s_end;			# Look for end statement
  }
}
#
# Validate the form of the prototype entries
#
#
# Commented out since it does not handle all prototypes.
# A sample missing one would be const char *
#
sub check_proto
{
# ($parm) = (@_);			# Get the parameter
# (@words) = split(' ',$parm);		# Separate into words
# if ($words[0] =~ /\W/) {		# Invalid charater in type
#   &errmsg("Invalid character in '$words[1]'");
# }
# if (($#words > 0) && ($words[1] ne '*')) {
#   &errmsg("Unexpected form of prototype '$parm'");
# }
# if ($#words > 1) {
#   &errmsg("Unexpected form of prototype '$parm'");
# }
}
#
# Process the number of cases
#
sub cases
{
  ($cases) = (@_);			# Get the case parameter
  $state = $s_ct;			# Look for case type
}
#
# Process the prototype for the case parameter
#
sub case_proto
{
  ($case_proto) = (@_);			# Get the case prototype
  $case_proto =~ s/^\s*//;		# Remove leading spaces
  $case_proto =~ s/\s*$//;		# Remove trailing spaces
  &check_proto($case_proto);		# Validate it
  $state = $s_end;			# Look for the end statement
}
#
# Process the message value to send to processes
#
sub msg_const
{
  ($msg_id) = (@_);			# Get the case prototype
  $msg_id =~ s/^\s*//;			# Remove leading spaces
  $msg_id =~ s/\s*$//;			# Remove trailing spaces
  $state = $s_end;			# Look for the end statement
}
#
# Build the actual inline procedures based on the previously
#       saved data
#
sub build_procs
{
  ($t = substr($type,1)) =~ tr/A-Z/a-z/;
  $ptype = substr($type,0,1).$t;	# Make type comment
  $pr = join(', ',@prototype);
  $protocnt = $#prototype + 1;		# Make a count
  $list = '';				# Make null
  while (length($pr)>60) {		# Wrap prototype
    if (($i = rindex($pr,',',60)) > -1) {
      $list .= substr($pr,0,$i+1);	# Get first part of string
      $list .= "\n *               ";
      substr($pr,0,$i+1) = '';		# Remove start of string
    }
    elsif (($i = index($pr,',')) > -1) {
      $list .= substr($pr,0,$i+1);	# Get first part of string
      $list .= "\n *               ";
      substr($pr,0,$i+1) = '';		# Remove start of string
    }
    else {				# Real long string
      $list = $pr;			# Copy string
      $pr = '';				# Nullify original string
    }  
  }
  $list .= $pr;				# Add in remaining piece
  $tservice = "service_".$service."_type"; # Make a function type
  if ((length($tservice) + length($service)) > 39) {
    $add_nl = "\n";			# Start  new line
    $add_nl .= " " x 27;		# Indent it
  }
  else {
    $add_nl = '';			# Make null string
  }
  $pr = '';				# Make null string
  $list3 = '';				# Make null string
  for ($i=0; $i<=$#prototype; $i++) {
    $pr .= $prototype[$i].", ";		# Concatentate entries
    ($t = $prototype[$i]) =~ s/^.*\b(\w+)\s*$/$1/; # Remove type
    $t =~ s/^\**//;			# Remove leading *'s
    $list3 .= $t.", ";			# Add to parm list
  }
  chop($pr);				# Remove trailing blank
  chop($pr);				# Remove trailing comma
  if (!$protocnt) {			# No arguments
    $pr = 'void';			# Specify void
  }
  $list2 = '';				# Make null string
  $data_len = 47 - length($service);	# Amount of data space available
  $data_pad = 30 + length($service);    # To align the prototype data
  while (length($pr)>($data_len)) {	# Wrap prototype
    if (($i = rindex($pr,',',$data_len)) > -1) {
      $list2 .= substr($pr,0,$i+1);	# Get first part of string
      $list2 .= "\n";			# New line
      $list2 .= " " x $data_pad;	# Create indent amount
      substr($pr,0,$i+1) = '';		# Remove start of string
    }
    elsif (($i = index($pr,',')) > -1) {
      $list2 .= substr($pr,0,$i+1);	# Get first part of string
      $list2 .= "\n";			# New line
      $list2 .= " " x $data_pad;	# Create indent amount
      substr($pr,0,$i+1) = '';		# Remove start of string
    }
    else {				# Real long string
      $list2 .= $pr;			# Append string
      $pr = '';				# Nullify original string
    }  
  }
  $list2 .= $pr;			# Add in remaining piece
  $list7 = $list2;		        # Copy for invoke parms
  if (!$protocnt) {			# No arguments
    if ($case{$type}) {  
      $list7 = ''; 			# Null on case invocations
    }
  }
  chop($list3);				# Remove trailing blank
  chop($list3);				# Remove trailing comma
  $list4 = '';				# Make null string
  $list5 = '';				# Make null string
  if ($case{$type}) {			# Add data for case stucture
    $list4 = "$case_proto";
    $listindex = "$case_proto";
    $list6 = "$list4, ";		# Copy for add statement
    if ($protocnt) {
	$list4 .= ', ';		        # Add required comma
    }
    if ((length($list4) + length($list2)) >
        (44 - length($service))) {	# Put on its own line
      $list4 .= "\n ";			# Start new line
      $list4 .= " " x $data_pad;	# Indent next line
    }
    ($p_case = $case_proto) =~ s/^\w*\b\s*//; # Remove type
    $p_case =~ s/^\*//;			# Remove leading *
    $list5 = ",\n                  $indent{$type}(long) $p_case";
  }
  if ($protocnt) {
    $comma = ',';			# Make it a comma if needed
  }
  else {
    $comma = '';			# Make comma null if not needed
  }
  $header = <<"EndOfHeader";
/*
 * $uservice
 * $ptype.  $protocnt arg:  $list
 * $comment
 */
EndOfHeader
  push(@func,$header);
  if ($#data > -1) {
    $header = join("\n",@data);
    $header .= "\n";
    push(@func,$header);
  }
  if (($type ne 'VALUE') && ($type ne 'PID_LIST') && ($type ne 'PID_CASE')) {
    $header = <<"EndOfHeader";
typedef $ret_value (*$tservice) ($list2); 
EndOfHeader
    push(@func,$header);
  }
    if ($case{$type}) {			# Case registry
 	if ($type eq 'VALUE') {
     		$header = <<"EndOfHeader";
#define reg_add_$service(index, value, name) _reg_add_$service(index, value, REGISTRY_STRING(name))

static inline void _reg_add_$service ($list6$list7,
			   char *name)
{
    registry_add_$a_type{$type}($REG, $uservice,
		       $p_case, $list3, name);
}

static inline $ret_value reg_invoke_$service ($listindex)
{
    $ret_b{$type}registry_$c_type{$type}($REG, $uservice,  
		  $p_case)$ret_e{$type};
}

#define reg_add_default_$service(value, name) _reg_add_default_$service(value, REGISTRY_STRING(name))

static inline void _reg_add_default_$service ($list7,
                         char *name)
{
    registry_add_default_value($REG, $uservice,
                        $list3, name);
}
EndOfHeader
    		push(@func,$header);
 	}
	else {
      		$header = <<"EndOfHeader";
#define reg_add_$service(value, callback, name) _reg_add_$service(value, callback, REGISTRY_STRING(name))

static inline void _reg_add_$service ($list6
			   $tservice callback,
			   char *name)
{
    registry_add_$a_type{$type}($REG, $uservice, $p_case,
		      callback, name);
}

#define reg_add_default_$service(callback, name) _reg_add_default_$service(callback, REGISTRY_STRING(name))

static inline void _reg_add_default_$service ($add_nl$tservice callback,
			   char *name)
{
    registry_add_default($REG, $uservice, 
			 callback, name); 
}

static inline void reg_delete_$service ($case_proto)
{
    registry_delete_$a_type{$type}($REG, $uservice, $p_case);
}

static inline void reg_delete_default_$service (void)
{
    registry_delete_default($REG, $uservice);
}
static inline boolean reg_used_$service ($listindex)
{
    return(registry_$a_type{$type}_used($REG, $uservice, $p_case));
}
EndOfHeader
      		push(@func,$header);
	}
    } elsif (($type eq 'PID_LIST') || ($type eq 'PID_CASE')) {
      		$header = <<"EndOfHeader";
#define reg_add_$service(pid, name) _reg_add_$service(pid, REGISTRY_STRING(name))

static inline void _reg_add_$service (pid_t pid, char *name)
{
    registry_add_$a_type{$type}($REG, $uservice, pid, name);
}

static inline void reg_delete_$service (pid_t pid)
{
    registry_delete_$a_type{$type}($REG, $uservice, pid);
}

static inline $ret_value reg_invoke_$service ($list4$list7)
{
    registry_$c_type{$type}($REG, $uservice, $msg_id, $list3);
}

EndOfHeader
      		push(@func,$header);
    } else {
	 $header = <<"EndOfHeader";
#define reg_add_$service(callback, name) _reg_add_$service(callback, REGISTRY_STRING(name))

static inline void _reg_add_$service ($add_nl$tservice callback,
			   char *name)
{
    registry_add_$a_type{$type}($REG, $uservice,
		      callback, name);
}
EndOfHeader
	if (($type eq 'LIST') || ($type eq 'LOOP')) {
		$header .= <<"EndOfHeader";

static inline void reg_delete_$service ($add_nl$tservice callback)
{
    registry_delete_$a_type{$type}($REG, $uservice, callback);
}
EndOfHeader
	}
      		push(@func,$header);
    }
    if ($type eq 'RETVAL') {		# Add a cast to the return
      $ret_b{$type} = "return(($ret_value) ";
    }
    if (($type ne 'FASTCASE') && ($type ne 'FASTCASE2') && ($type ne 'FASTSTUB') && ($type ne 'FASTSTUB2') && ($type ne 'FASTSTUB3') && ($type ne 'FASTSTUB4')) {
      $filler = "registry_";
    } else {
       $filler = "";
    }

    $start = $ret_b{$type};
    $end = $ret_e{$type};

    if ($type eq 'STUB') {	# Add a cast if required
      if ($ret_value ne 'void') {
        $start = "return(($ret_value) ";
        $end = ')';	
      } else {
        $start = '';
        $end = '';
      }
    }
    if (($type eq 'FASTSTUB') || ($type eq 'FASTSTUB2') || ($type eq 'FASTSTUB3') || ($type eq 'FASTSTUB4')) {
      if ($ret_value eq 'void') {
        $start = $ret_alt_b{$type};
        $end = $ret_alt_e{$type};
      }
    }
    if (($type eq 'FASTSTUB') || ($type eq 'FASTCASE') || ($type eq 'FASTCASE2') || ($type eq 'FASTSTUB2') || ($type eq 'FASTSTUB3') || ($type eq 'FASTSTUB4')) {
       $filler2 = '';
    } else {
       $filler2 = $c_type{$type};
    }
    if (($type ne 'VALUE') && ($type ne 'PID_LIST') && ($type ne 'PID_CASE'))
    {
        $header = <<"EndOfHeader";
static inline $ret_value reg_invoke_$service ($list4$list7)
{
    $start$filler$filler2($REG, $uservice$list5$comma
		  $indent{$type}$list3)$end;
}
EndOfHeader
        push(@func,$header);
    }
  if (($type eq 'STUB') || ($type eq 'FASTSTUB') || ($type eq 'FASTSTUB2') || ($type eq 'FASTSTUB3') || ($type eq 'FASTSTUB4')) {
    $header = <<"EndOfHeader";
static inline void reg_delete_$service (void)
{
    registry_delete_$c_type{$type}($REG, $uservice);
}
EndOfHeader
    push(@func,$header);
  }

  $t = "    service_create($REG, $uservice, $type_code{$type},";
  push(@create,$t);
  $t = "                   $cases, SERVICE_".$protocnt."ARG,";
  push(@create,$t);
  $t = "                   REGISTRY_STRING(\"$service\"));";
  push(@create,$t);
}
#
# Generate an error message
#
sub errmsg
{
  ($msg) = @_;				# Get parameters
  $errors++;				# One more error
  print STDERR "$infile:$lineno: $Line\n";
  print STDERR "          $msg\n";
}
#
# Generate the extra data error message
#
sub extraerr
{
  &errmsg("Extra data '$rest' ignored.");
}
#
# tell the user out to use this program
#
sub usage {
    print STDERR "Usage: $0 [-c] input-file \n\n";
    exit 1;
}
