# $Id: smrp_registry.reg,v 3.2.62.1 1996/05/02 08:44:53 dwong Exp $
# $Source: /release/112/cvs/Xsys/smrp/smrp_registry.reg,v $
#------------------------------------------------------------------
# SMRP Registry support file.
#
# April 1995, Steven Lin
#
# Copyright (c) 1995-1997 by cisco Systems, Inc.
# All rights reserved.
#------------------------------------------------------------------
# $Log: smrp_registry.reg,v $
# Revision 3.2.62.1  1996/05/02  08:44:53  dwong
# Branch: California_branch
# Commit SMRP-7kFastSwitch, Load Balancing, and AURP Modularity
#
# Revision 3.2  1995/11/17  18:54:12  hampton
# Remove old entries from the RCS header logs.
#
# Revision 3.1  1995/11/09  13:13:25  shaker
# Bump version numbers from 2.x to 3.x.
#
# Revision 2.3  1995/11/08  21:25:15  shaker
# Merge Arkansas_branch into 11.1 mainline.
#
# Revision 2.2  1995/08/01  00:23:00  slin
# CSCdi32910: SMRP netrange not updated when AppleTalk cable-range
#             reconfigured.
#
# Revision 2.1  1995/06/07  22:45:37  hampton
# Bump version numbers from 1.x to 2.x.
#
# *------------------------------------------------------------------
# $Endlog$
# Syntax for defining a registry
#
# Each item must begin a line of its own.
# Lines may be continued by ending with a \
#
# BEGIN REGISTRY <name of registry>
#
# DEFINE <name of service point>
# /* <comment lines in standard C format describing the
#     registry. These will be reformatted unless they are
#     in the comment bar format> */
# DATA
#    <Lines of text to be copied from the input to the
#     between the comment and the function declaration>
# END DATA
#    <type of service> := LIST | LOOP | STUB | CASE | RETVAL | VALUE
#    <type declaration of value returned by called function>
#              must be void for LIST and CASE, boolean
#              for LOOP, and ulong for VALUE.
#    <prototype list for called function>
#    <number of cases for case service>
#    <type for case statement>
# END
#
# END REGISTRY
#
#

BEGIN REGISTRY SMRP smrp_regcode

#DEFINE  smrp_EnqueuePacket
#/*
# * Enqueue a packet for SMRP that was received by a network layer.  The
# * input interface is used by the network layer to determine the port
# * identifer to associate with the packet.
# */
#	LIST
#	void
#	SMRPPortID port, paktype* pak, uchar* dataptr, int datasize
#END

DEFINE  smrp_routing_change
/*
 * Change the smrp routing state to on or off.
 */
	LIST
	void
	boolean start
END

DEFINE  smrp_nvgen_interface_protocol
/*
 * Routine used by various noncore-SMRP subsystems for NVGEN of protocols.
 */
	LIST
	void
	parseinfo *csb
END

DEFINE smrp_add_netrange
/*
 *  Add a SMRP network range.  The passed argument contains the
 *  network protocol linktype, idb and a network range, if configured.
 *  If a network range was not configured, then a default range is
 *  selected, determined by the network protocol.
 */
	CASE
	void
	SMRPNet *net, SMRPCallDowns const **handlersptr, boolean checkport
	LINK_MAXLINKTYPE
	int linktype
END

DEFINE smrp_port_route_adjust
/*
 * Perform route adjustment for all SMRP ports linked to this idb.
 */
	LIST
	void
	idbtype *idb
END

DEFINE smrp_set_addresses
/*
 * Record any addresses that the interface needs to know about.
 */
	LIST
	void
	idbtype *idb
END

DEFINE smrp_set_test_addresses
/*
 * Record any test addresses that the interface needs to know about.
 */
	LIST
	void
	SMRPPort* port, GroupToMCfn mapper
END

DEFINE smrp_intercept_data_pkt
/*
 * Handle the incoming SMRP data packets when in test mode.
 */
	LOOP
	boolean
        SMRPPort* port, paktype* pak
END

DEFINE smrp_intercept_req_pkt
/*
 * Handle the incoming SMRP request packets when in test mode.
 */
	LOOP
	boolean
        SMRPPort* port, SMRPResponse* res, uchar pt
END

DEFINE smrp_parse_netaddr
/*
 * Parse the network address and map it to an SMRP unicast address.
 */
	CASE
	void
        addrtype* netaddr, UnicastAddr* smrpaddr
	LINK_MAXLINKTYPE
	int linktype
END

DEFINE smrp_fs_register_ports
/*
 *  Register an SMRP port for fast switching.  The passed argument contains the
 *  network protocol linktype and idb.
 */
	CASE
	void
	idbtype* idb
	LINK_MAXLINKTYPE
	int linktype
END

END REGISTRY SMRP



