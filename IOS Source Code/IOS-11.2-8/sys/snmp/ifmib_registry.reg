# $Id: ifmib_registry.reg,v 3.3.54.3 1996/06/26 03:08:25 sdurham Exp $
# $Source: /release/112/cvs/Xsys/snmp/ifmib_registry.reg,v $
#------------------------------------------------------------------
# ifmib_registry.reg Service Points for the IF-MIB
#
# June 1995 , Sandra Durham
#
# Copyright (c) 1995-1997 by cisco Systems, Inc.
# All rights reserved.
#------------------------------------------------------------------
# $Log: ifmib_registry.reg,v $
# Revision 3.3.54.3  1996/06/26  03:08:25  sdurham
# CSCdi54840:  Channelized T1 needs support for ds1 physical interface in
# snmp
# Branch: California_branch
# add support in ifmib for cdbtype
#
# Revision 3.3.54.2  1996/05/21  06:38:37  mordock
# Branch: California_branch
# Improve snmp modularity via creating services to register interfaces
# and chassis cards.
# Add syslog mib.
#
# Revision 3.3.54.1  1996/04/30  23:17:30  sdurham
# CSCdi46300:  Interface missing from MIB
# Branch: California_branch
#          add atm and aal5 layers to the ifmib
#
# Revision 3.3  1995/11/20  22:27:30  sdurham
# CSCdi42520:  IF MIB breaks modularity in oddball images
#        fixed IFMIB subsystem, and moved linkUp/Down trap code to IFMIB.
#
# Revision 3.2  1995/11/17  18:58:26  hampton
# Remove old entries from the RCS header logs.
#
# Revision 3.1  1995/11/09  13:16:11  shaker
# Bump version numbers from 2.x to 3.x.
#
# Revision 2.2  1995/11/08  21:25:33  shaker
# Merge Arkansas_branch into 11.1 mainline.
#
# Revision 2.1  1995/06/07  22:48:25  hampton
# Bump version numbers from 1.x to 2.x.
#
#------------------------------------------------------------------
# $Endlog$
#
# Syntax for defining a registry
#
# Each item must begin a line of its own.
# Lines may be continued by ending with a \
#
# BEGIN REGISTRY <name of registry>
#
# DEFINE <name of service point>
# /* <comment lines in standard C format describing the
#     registry. These will be reformatted unless they are
#     in the comment bar format> */
# DATA
#    <Lines of text to be copied from the input to the
#     between the comment and the function declaration>
# END DATA
#    <type of service> := LIST | LOOP | STUB | CASE | RETVAL | VALUE
#    <type declaration of value returned by called function>
#              must be void for LIST and CASE, boolean
#              for LOOP, and ulong for VALUE.
#    <prototype list for called function>
#    <number of cases for case service>
#    <type for case statement>
# END
#
# END REGISTRY
#
#

BEGIN REGISTRY IFMIB 

DEFINE ifmib_register_subif
/*
 * Create an ifEntry, ifXEntry, and possibly ifRcvAddressEntry
 */
	STUB
	boolean
	snmpifptrtype *subif_ptr, \
	enum SNMP_IF_DATA_TYPE subif_type, \
        enum SNMP_ADMIN_STATE   initAdminStatus
END

DEFINE ifmib_deregister_subif

/*	
 * Destroy the specified ifEntry, ifXEntry, ifStack, 
 *	 and ifRcvAddressEntries
 */
	STUB
        void
	long ifIndex 
END

DEFINE ifmib_create_rcvaddr 
/* 
 * Create an ifRcvAddressEntry for the specified interface.
*/
	STUB
	ifRcvAddressEntry_t  *
	long		ifIndex, \
 	const uchar	*ifRcvAddr, \
	long		ifRcvAddrLen
END

DEFINE ifmib_destroy_rcvaddr 
/* 
 * Destroy an ifRcvAddressEntry for the specified interface.
 */
	STUB
	void
	long		ifIndex, \
	const uchar	*ifRcvAddr, \
	uint		ifRcvAddrLen

END

DEFINE ifmib_create_stacklink 
/* 
 * Create an ifStackEntry with the specified interfaces
 */
	STUB
	ifStackEntry_t  *
	long	higherIfIndex, long lowerIfIndex 
END

DEFINE ifmib_destroy_stacklink 
/* 
 * Destroy an ifStackEntry with the specified interfaces
 */
	STUB
	void
	long	higherIfIndex,long lowerIfIndex 
END

DEFINE ifmib_cntr32
/*
 * get the specified ifEntry or ifXEntry counter
 * INPUTS:
 *      ifCntr == enum of specific counter requested
 *      subiab == r/o pointer to SUBIAB for this interface
 *      serialNum == passed in from getrequest for caching
 * OUTPUTS:
 *      *retval == the returned counter value
 * RETURNS:
 *      return status
 */
	RETVAL
 	ifmib_err_t 
	ifmib_cntr_t ifCntr, const subiabtype *subiab, ulong *retval, \
	int serialNum
	MAX_IFTYPES
	ulong iftype

END

DEFINE ifmib_cntr64
/*
 * get the specified ifXEntry hispeed counter
 * INPUTS:
 *      ifCntr == enum of specific counter requested
 *      subiab == r/o pointer to SUBIAB for this interface
 *      serialNum == passed in from getrequest for caching
 * OUTPUTS:
 *      *hiBits == upper 32 bits of the returned counter value
 *      *loBits == lower 32 bits of the returned counter value
 * RETURNS:
 *      return status
 */
	RETVAL
 	ifmib_err_t 
	ifmib_cntr_t	ifCntr, \
	const subiabtype *subiab, ulong *hibits, ulong *lowbits, \
	int serialNum
	MAX_IFTYPES
	ulong iftype

END

DEFINE ifmib_admin_change
/* 
 * LOG-IF-MIB ifAdminStatus change 
 * INPUTS:
 *     newStatus == requested new value of ifAdminStatus
 *		     this must be different than the current value
 *     testPhase == TRUE if this the value is being checked
 *                   in the test phase of PDU processing
 *		     FALSE if the change should take effect now
 *     subiab == r/o pointer to SUBIAB for this interface
 * RETURNS:
 *   TRUE if the change is allowed by LOG-IF-MIB
 *       if testPhase == TRUE:
 *          upon exit, ifAdminStatus has not changed.       
 *       if testPhase == FALSE:
 *	    upon exit, the new value of ifAdminStatus is in effect
 *  FALSE if LOG-IF-MIB is rejecting the requested change
 *       upon exit, ifAdminStatus has not changed.
 */ 
	RETVAL
	boolean
	enum SNMP_ADMIN_STATE newstatus, boolean testphase, \
	const subiabtype *subiab
	MAX_IFTYPES
	ulong iftype

END

DEFINE ifmib_get_operstatus
/* 
 * LOG-IF-MIB get_ifOperStatus callback function.
 * INPUTS:
 *	subiab == r/o pointer to SUBIAB for this interface
 * RETURNS:
 *      enum for current ifOperStatus
 */ 
	RETVAL
	uint
	const subiabtype *subiab
	MAX_IFTYPES
	ulong iftype
END

DEFINE ifmib_get_adminstatus
/* 
 * LOG-IF-MIB get_ifAdminStatus callback function.
 * INPUTS:
 *	subiab == r/o pointer to SUBIAB for this interface
 * RETURNS:
 *      enum for current ifAdminStatus
 */ 
	RETVAL
	uint
	const subiabtype *subiab
	MAX_IFTYPES
	ulong iftype
END

DEFINE ifmib_rcvaddr_screen
/* 
 * LOG-IF-MIB receive address screen function
 * INPUTS:
 *	ifIndex == interface being referenced	 
 *	rcvAddr == address to add/delete to the ifRcvAddressTable
 *	rcvAddrLen == length of rcvAddr in bytes
 *	changeIsAdd == TRUE if adding, FALSE if deleting
 *      testPhase == TRUE if this the value is being checked
 *                    in the test phase of PDU processing
 *	 	      FALSE if the change should take effect now
 *	snmpidb == r/o pointer to SNMP IDB for this interface
 * RETURNS:
 *	TRUE if okay to add or delete this address
 *       if testPhase == TRUE:
 *	    upon exit, rcvrAddr not changed
 *       if testPhase == FALSE:
 *          upon exit, rcvAddr added or deleted from internal data structs
 *	FALSE if LOG-IF-MIB is rejecting the requested change
 * NOTES:
 *      LOG-IF-MIB should okay adding entries already there,
 *      or delete entries not found.
 */ 
	RETVAL
	boolean
	const uchar *rcvaddr, uint rcvaddrlen, boolean changeIsAdd, \
	boolean testPhase, const snmpidbtype *snmpidb
	MAX_IFTYPES
	ulong iftype
END

DEFINE ifmib_stack_screen
/*
 * LOG-IF-MIB ifStack screen function
 * INPUTS:
 *	higherIf_idb == interface being proposed as upper layer
 *	lowerif_idb == interface being used as the lower layer
 *      higherIfType == ifType of the higherlayer for sanity check.
 *	changeIsAdd == TRUE if NMS is adding link, FALSE if removing link
 *      testPhase == TRUE if this the value is being checked
 *                    in the test phase of PDU processing
 *	 	      FALSE if the change should take effect now
 * RETURNS:
 *	TRUE if the lower layer is allowed to link to the
 *	upper layer interface type
 *	  if testPhase == TRUE, 
 *	    upon exit the internal links are not changed
 *        if testPhase == FALSE,
 *	    upon exit the internal links are changed
 *	FALSE if lower layer not allowed to connect to upper layer
 *	    upon exit the internal links are not changed
 * NOTES:
 *      IF-MIB calls the lower-layer LOG-IF-MIB to verify
 *        that the upper-layer interface can connect to it.
 *	Both ifEntries must exist for a stack connection to be made.
 */ 

	RETVAL
	boolean
	snmpidbtype *higherif_idb, snmpidbtype *lowerif_idb, \
	uint higherIfType, boolean changIsAdd, boolean testPhase
	MAX_IFTYPES
	ulong iftype
END

DEFINE ifmib_add_subif
/*
 * Routine called by the subif code to register a subinterface. Selection
 * based on hwidb->enctype.  This service point can only be used for 
 * subinterfaces which have a unique enctype.  Otherwise, use 
 * ifmib_register_subif 	
 */
	CASE
	void
	idbtype *idb
	ET_MAX
	ulong enctype
END

DEFINE ifmib_delete_subif
/*
 * Routine called by the subif code to deregister a subinterface. Selection
 * based on enctype.
 */
	CASE
	void
	idbtype *idb
	ET_MAX
	ulong enctype
END

DEFINE	ifmib_link_trap
/*
 * SNMP link-up/link-down trap generation engine.  Since link up/down traps
 * are issued throughout the system, a special registry has been established
 * to ease their generation.  Given a generic trap number (LINK_DOWN_TRAP or
 * LINK_UP_TRAP from sys/snmp/sr_snmpd.h) and the ifNumber of the interface,
 * the appropriate variable bindings will be created and snmpv1 and snmpv2
 * trap messages will be generated and sent to all registered network
 * management stations.
 */
	STUB
	void
	long            genTrap, \
	hwidbtype      *idb
END

DEFINE ifmib_add_cdb_if
/*
 * Routine called by the bif code to register a cdb type interface. Selection
 * based on cdb->pif_type.  
 */
	CASE
	void
	cdbtype *idb
	ET_MAX
	ushort pif_type 
END

DEFINE ifmib_add_all_cdb_if
/*
 * Routine called by the init_ifmib code to register all cdb type interfaces.
 * an outer shell call to ifmib_add_cdb_if to mask use of cdbQ.	
 */
	LIST
	void
	-
END

DEFINE	ifmib_hwidb_get
/* retrieve the correct idb given an ifIndex and searchtype
 *
 * INPUTS:
 *      serialNum  == passed in from getrequest for caching
 *	searchType == EXACT or NEXT
 *      ifIndex    == index value for i/f of interest
 *      test       == address of test routine (optional)
 *	index2     == index value to pass thru to test routine
 * RETURNS:
 *      hwidb that matches your search criteria, or NULL if no
 *      matching hwidb could be found
 *
 * NOTE:  The index2 parameter is a second index to pass into your
 * test routine.  For most cases, it will be ignored by your test
 * routine and you can simply pass 0.  This is the same idea as the
 * subfunc parameter on some of the parser macros.
 */
	STUB
	hwidbtype*
	int		serialNum, \
	int		searchType, \
	long		ifIndex, \
	ProcTest	test, \
	long*		index2
END

DEFINE	ifmib_2indices_get
/* This is the same as ifmib_hwidb_get except that there are 2 indices. The
 * test routine and index2 must be present. It differs from ifmib_hwidb_get:
 * 1. It changes the second index to 0 when the given ifIndex != the
 *    ifIndex of the found hwidb (only occurs for searchType == NEXT)
 * 2. It returns NULL if the second index does not match for EXACT.
 *
 * INPUTS:
 *      serialNum  == passed in from getrequest for caching
 *	searchType == EXACT or NEXT
 *      ifIndex    == index value for i/f of interest
 *      test       == address of test routine
 *	index2     == index value to pass thru to test routine
 * RETURNS:
 *      hwidb that matches your search criteria, or NULL if no
 *      matching hwidb could be found
 *
 * Note that index2 and test routine must be present
 */
	STUB
	hwidbtype*
	int		serialNum, \
	int		searchType, \
	long		ifIndex, \
	ProcTest	test, \
	long*		index2
END

DEFINE	ifmib_snmpidb_get_by_type
/* retrieves the correct idb given serialNum, searchType, ifIndex,
 * typeFilter, test(), and index2.
 *
 * NOTE: if the typeFilter is non-null, the search will be limited
 * to the idb types included in the filter.  the filter is one or more
 * of the enum SNMP_IF_DATA_TYPE values ORed together.
 *
 * NOTE:  The test routine is called by ifmib_snmpidb_get_by_type to
 * validate that the interface being tested is one that the calling
 * function is _interested in_.  ifmib_snmpidb_get_by_type() doesn't
 * care what the _interesting_ criteria is, only whether or not the
 * interface being tested is interesting to the calling routine.  You
 * write your test routine to make that determination.
 *
 * NOTE 2:  Index2 is *NOT* a second index in the SNMP sense.  Index2
 * is simply another parameter that you pass through
 * ifmib_snmpidb_get_by_type() to your test routine to help it make up
 * its mind whether or not it is interested in any interfaces that
 * ifmib_snmpidb_get_by_type might find and ask it to test.
 *
 * INPUTS:
 *      start      == starting point for search or NULL
 *                    typically used to reenter a search.  After the
 *                    first call yielded less than useful results.
 *                    Typically the return value from last call.
 *      serialNum  == passed in from getrequest for caching
 *	searchType == EXACT or NEXT
 *      ifIndex    == index value for i/f of interest
 *      typeFilter == mask of snmpidb types which are of interest
 *      test       == address of test routine (optional)
 *	index2     == index value to pass thru to test routine
 * RETURNS:
 *      snmpidbtype that matches your search criteria, or NULL if no 
 *      interesting idb found.
 */
	STUB
	snmpidbtype*
	snmpidbtype*    start, \
	int		serialNum, \
	int		searchType, \
	long		ifIndex, \
	uint            typeFilter, \
	ProcTestSnmp	test, \
	void*		index2
END

DEFINE	ifmib_snmpidb_get
/* retrieves the correct idb given serialNum, searchType, ifIndex,
 * test(), and index2.
 *
 * NOTE:  The test routine is called by ifmib_snmpidb_get to validate that
 * the interface being tested is one that the calling function is
 * _interested in_.  ifmib_snmpidb_get() doesn't care what the
 * _interesting_ criteria is, only whether or not the interface being
 * tested is interesting to the calling routine.  You write your test
 * routine to make that determination.
 *
 * NOTE 2:  Index2 is *NOT* a second index in the SNMP sense.  Index2
 * is simply another parameter that you pass through ifmib_snmpidb_get() to
 * your test routine to help it make up its mind whether or not it is
 * interested in any interfaces that ifmib_snmpidb_get might find and ask
 * it to test.
 *
 * INPUTS:
 *      start      == starting point for search or NULL
 *                    typically used to reenter a search.  After the
 *                    first call yielded less than useful results.
 *                    Typically the return value from last call.
 *      serialNum  == passed in from getrequest for caching
 *	searchType == EXACT or NEXT
 *      ifIndex    == index value for i/f of interest
 *      test       == address of test routine (optional)
 *	index2     == index value to pass thru to test routine
 * RETURNS:
 *      snmpidbtype that matches your search criteria, or NULL if no 
 *      interesting idb found.
 */
	STUB
	snmpidbtype*
	snmpidbtype*    start, \
	int		serialNum, \
	int		searchType, \
	long		ifIndex, \
	ProcTestSnmp	test, \
	void*		index2
END

DEFINE	ifmib_register_hwidb
/* Register a hardware interface to be managed by SNMP.
 * INPUTS:
 *	hwidb      == idb to be registered
 * RETURNS:
 *	SNMP's interface index for this interface if successful.
 *      0 if not.
 */
	STUB
	long
	hwidbtype*	hwidb
END

DEFINE	ifmib_deregister_hwidb
/* Unregister a hardware interface so that it will no longer be
 * managed by SNMP.
 * INPUTS:
 *      hwidb      == idb to be deregistered
 * RETURNS:
 *	TRUE if successful, otherwise FALSE
 */
	STUB
	boolean
	hwidbtype*	hwidb
END

DEFINE	ifmib_register_iab
/* Register an interface, used for accounting, to be managed by SNMP.
 * INPUTS:
 *	iab        == idb to be registered
 * RETURNS:
 *	SNMP's interface index for this interface if successful.
 *      0 if not.
 */
	STUB
	long
	iabtype*	iab
END

DEFINE	ifmib_deregister_iab
/* Unregister an interface, used for accounting, so that it will no
 * longer be managed by SNMP.
 * INPUTS:
 *      iab        == idb to be deregistered
 * RETURNS:
 *	TRUE if successful, otherwise FALSE
 */
	STUB
	boolean
	iabtype*	iab
END

DEFINE	ifmib_get_ifNumber
/* Returns the current number of interfaces managed by SNMP.
 */
	STUB
	long
	-
END

DEFINE ifmib_add_cdb_index
/*
 * Routine called by the ifmib code to fill in cdb->snmp_if_index since
 * can't include platform dependent code in ifmib code.
 */
	LIST
	void
	cdbtype *cdb, ulong if_index
END

DEFINE ifmib_update_ifAlias
/*
 * Routine for manipulating ifAlias value on subiabs.
 * INPUTS:
 *    subiab  == pointer to SUBIAB for this interface
 *    ifalias == pointer to OctetString struct for ifAlias
 *    set     == TRUE if the value in ifalias should be assigned to
 *               this interface.
 *               FALSE if the current value of ifAlias for this
 *               interface should be returned in ifalias.
 * RETURNS:
 *    if set == TRUE, ifalias should contain the current ifAlias value.
 */
    CASE
    void
    subiabtype *subiab, OctetString *ifalias, boolean set
    MAX_SNMPIDB_TYPES
    uint  data_type
END


DEFINE ifmib_get_if_speed
/* 
 * LOG-IF-MIB ifspeed update
 * INPUTS:
 *     if_ptr == r/o pointer to IDB for this interface
 * RETURNS:
 *   ulong ifSpeed, or 0 if speed not applicable
 */ 
	RETVAL
	ulong
	const subiabtype *subiab
	MAX_IFTYPES
	ulong iftype

END
 
END REGISTRY IFMIB
