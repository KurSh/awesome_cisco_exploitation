# $Id: srt_registry.reg,v 3.5.4.7 1996/08/12 02:16:26 ppearce Exp $
#------------------------------------------------------------------
# srt_registry.reg - Service Points for Bridging Registry
#
# 3-Sepember-1993, Kirk Lougheed
#
# Copyright (c) 1993-1997 by cisco Systems, Inc.
# All rights reserved.
#
#------------------------------------------------------------------
# $Log: srt_registry.reg,v $
# Revision 3.5.4.7  1996/08/12  02:16:26  ppearce
# CSCdi64450:  CSCdi59527 broke c4500-boot-m image
# Branch: California_branch
#   Add srb_core_registry that will definitely be included w/SRB subblock
#
# Revision 3.5.4.6  1996/08/10  01:04:43  athippes
# CSCdi63699:  Adding a hidden knob - dlsw llc2 nornr
# Branch: California_branch
#
# Revision 3.5.4.5  1996/07/23  22:10:13  athippes
# CSCdi63699:  Adding a hidden knob - dlsw llc2 nornr
#              Using Registry stub.
# Branch: California_branch
#
# Revision 3.5.4.4  1996/07/09  06:06:20  ppearce
# CSCdi59527: inlines waste code space
# Branch: California_branch
#   Just say "no" to inline abuse - SRB subblock inlines removed
#
# Revision 3.5.4.3  1996/05/17  23:08:01  rbadri
# CSCdi57916:  bridge_init() add a non-existent registry
# Branch: California_branch
# For Bridged ELANs, move lec_bridge_init registry as part of
# the bridge sub_system.
#
# Revision 3.5.4.2  1996/05/09  14:46:55  rbadri
# Branch: California_branch
# LANE, UNI3.1 features
#
# Revision 3.5.4.1  1996/05/04  01:49:24  wilber
# Branch: California_branch
#
# Integrated Routing and Bridging
# - Bridge-group Virtual Interface configuration & bridging
#   (process-level) support.
# - BVI smf functions and registry.
# - BVI settable mtu support & dynamically select mtu for the BVI.
# - 'bridge irb' & 'bridge <x> route/bridge <protcocol>' support.
#
# Constrained Multicast Flooding
# - Add the CMF parser link points.
# - Add the CMF data structures to spantype.
# - Add the creation and deletion of the tbridge monitor.
# - Convert tbridge flood array to a linked list of tbifd's.
# - Manage the CMF data structures when the spanning tree changes.
#
# Revision 3.5.30.1  1996/04/27  07:26:37  cakyol
# non sync sync from V112_0_2 to ....
# Branch: LE_Cal_ATM_FR_California_Postsync_960425_branch
#
# Revision 3.5.20.1  1996/04/08  02:09:52  bbenson
# Branch: LE_Cal_V112_0_2_branch
# Sync of LE_Cal to new V112_0_2 sync point (post Port Ready).
#
# Revision 3.5.10.1  1996/03/22  09:44:06  rlowe
# Non-sync Synalc3_LE_Cal_V111_1_0_3_merge_branch to V111_1_3
# yielding LE_Syn_Cal_V111_1_3_branch.
# Branch: LE_Syn_Cal_V111_1_3_branch
#
# Revision 3.5  1996/03/11  17:24:58  ppearce
# CSCdi47301:  CLS/RSRB link activation may fail when LAK enabled
#   Cannot depend on pak->peer_ptr to represent a valid peer entry
#     use a different method to find valid peer entry
#
# Revision 3.4.36.1  1996/03/05  05:36:52  rlowe
# Apply LANE content to merge branch.
# Branch: Synalc3_LE_Cal_V111_1_0_3_merge_branch
#
# Revision 3.4.26.1  1996/02/27  21:19:44  cakyol
# non sync sync of LE_Cal_V111_0_16_branch to V111_1_0_3 yielding
# LE_Cal_V111_1_0_3_branch
# Branch: LE_Cal_V111_1_0_3_branch
#
# Revision 3.4.4.2  1996/02/13  04:00:44  cyoung
# add domain name to bridge group
# Branch: LE_Cal_V111_0_16_branch
#
# Revision 3.4.4.1  1996/01/31  00:43:13  cyoung
# Beginning code for autogeneration of bridge groups
# Branch: LE_Cal_V111_0_16_branch
#
# Revision 3.4  1995/12/15  22:43:34  rbatz
# CSCdi43378:  Explorers destined for SDLLC Virtual Ring forwarded to
#              wrong ring.  Rework of vr_virtualp required.
#
# Revision 3.3  1995/12/13  02:28:46  ppearce
# CSCdi45473:  %SYS-3-SUPNONE: Registry 6 doesnt exist output during boot
#   (1) Rename fddi_srb_in() to fddi_to_tr()
#         to parallel the tr_to_fddi() routine that already exists
#   (2) Remove srt_fddi_in() registry from srt/srt_registry.reg
#         and add media_fddi_to_tr() registry into h/media_registry.reg
#
# Revision 3.2  1995/11/17  18:57:37  hampton
# Remove old entries from the RCS header logs.
#
# Revision 3.1  1995/11/09  13:32:48  shaker
# Bump version numbers from 2.x to 3.x.
#
# Revision 2.5  1995/11/08  21:30:48  shaker
# Merge Arkansas_branch into 11.1 mainline.
#
# Revision 2.4  1995/10/03  15:07:54  fbordona
# CSCdi40884:  crashdump netbios_acfcheck(0x301faf0+0x2c9844)+0x160)
#              Add DLSw callback when NetBios access list removed
#
# Revision 2.3  1995/08/07  05:44:15  richl
# CSCdi38315:  makefile rework
#              header changes for rif_util.c and tring_inline.h
#              move dlsw_work to its own file, create libibm_util.a for
#              utility routines used by dlsw and rsrb
#
# Revision 2.2  1995/07/19  21:06:48  pmorton
# CSCdi25556:  dynamic mapping between x121 and qllc virtual mac
# addresses.
# Dynamic mapping implemented by DLSw+ over qllc.
# Add services to reducce dependency on idb.
# Install 'qllc dlsw' command.
# Build QLLC Activate/Deactivate Ring CLSI message.
# Consolidate qllc fields from swidb to a single data structure (subblock)
#
# Revision 2.1  1995/06/07  23:02:49  hampton
# Bump version numbers from 1.x to 2.x.
#
#*------------------------------------------------------------------
# $Endlog$

#
#
# Syntax for defining a registry
#
# Each item must begin a line of its own.
# Lines may be continued by ending with a \
#
# BEGIN REGISTRY <name of registry>
#
# DEFINE <name of service point>
# /* <comment lines in standard C format describing the
#     registry. These will be reformatted unless they are
#     in the comment bar format> */
# DATA
#    <Lines of text to be copied from the input to the
#     between the comment and the function declaration>
# END DATA
#    <type of service> := LIST | LOOP | STUB | CASE | RETVAL | VALUE
#    <type declaration of value returned by called function>
#              must be void for LIST and CASE, boolean
#              for LOOP, and ulong for VALUE.
#    <prototype list for called function>
#    <number of cases for case service>
#    <type for case statement>
# END
#
# END REGISTRY
#
#

BEGIN REGISTRY SRT

DEFINE	srt_set_port_state
/*
 * We've changed port state.  Pass information to smart hardware, e.g. cBus
 * Return TRUE if everything worked.
 */
	STUB
	boolean
	hwidbtype *port, int newstate
END

DEFINE srt_set_shifa
/*
 * Set flag to indicate whether or not process-level recovery
 * of AB data structures is required.
 */
	STUB
	void
	boolean newstate
END


DEFINE srt_shifa_recovery
/*
 * Process-level recovery of AB data structures lost due to
 * cBus initialization or SP download.
 */
	STUB
	void
	-
END


DEFINE srt_cbus_bridge_port_enable
/*
 * Create any shadow data structures (not in local memory) when
 * enabling a port for the spanning tree.
 */
	LIST
	void
	spantype *span, idbtype *port
END


DEFINE srt_cbus_bridge_port_disable
/*
 * Destroy any shadow data structures (not in local memory) when
 * removing a port from the spanning tree.
 */
	LIST
	void
	spantype *span, idbtype *port
END


DEFINE srt_bce_add
/*
 * Create the copy of a bridge cache entry sitting on smart hardware.
 */
	LIST
	void
	spantype *span, btetype *bte, hwidbtype *hwidb
END


DEFINE srt_bce_update
/*
 * Update the copy of a bridge cache entry sitting on smart hardware.
 */
	LIST
	void
	btetype *mac
END


DEFINE srt_bce_remove
/*
 * Remove the copy of a bridge cache entry sitting on smart hardware.
 */
	LIST
	void
	spantype *span, btetype *mac
END


DEFINE srt_bce_statistics
/*
 * Retrieve transmit and receive statistics for the given bridge cache entry
 */
	LIST
	void
	btetype *mac
END


DEFINE srt_status_general
/*
 * Support for "show bridge-group"
 * Print out a blurb describing general hardware capabilities.
 */
	LIST
	void
	-
END


DEFINE srt_status_bgroup
/*
 * Support for "show bridge-group"
 * Print out a blurb describing hardware details for this bridge group
 */
	LIST
	void
	spantype *span
END


DEFINE srt_status_bce
/*
 * Support for "show bridge-group"
 * Print out a blurb describing hardware details for this bridge group
 */
	LIST
	void
	btetype *bce, boolean verbose
END

DEFINE srt_find_virtual_port
/*
 * Return a pointer to the virtual spanning tree port described by the
 * index argument.  Used by span_fixup() to attach the RSRB port to the
 * spanning tree.
 */
	STUB
	idbtype *
	int index
END

DEFINE cls_find_virtual_port
/*
 * Return a pointer to the virtual spanning tree port described by the
 * index argument.  Used by span_fixup() to attach the RSRB port to the
 * spanning tree.
 */
	STUB
	idbtype *
	int index, idbtype *idb
END

DEFINE lack_get_dlc_handle
/*
 * Index by dlc_type
 * Return the vectored dlc handle, according to dlc type
 */
	RETVAL
	dlc_handle_t *
	-
	DLC_T_MAX
	int dlc_type
END

DEFINE srt_lackfsm
/*
 */
DATA
/*	typedef struct  lak_t_;
*/
END DATA
	STUB
	ushort
	lak_t *lackie, int major, int minor
END

DEFINE snx_output
/*
 */
	STUB
	void
	hwidbtype *idb, paktype *pak
END

DEFINE snx_add_lnxtype
/*
 */
	STUB
	boolean
	uchar *vmac
END

DEFINE snx_start
/*
 */
	STUB
	void
	-
END

DEFINE sdlc_clean_snx
/*
 */
	STUB
	void
	sdlc_data_block *sdb
END

DEFINE rsrb_add_vring_interface
/*
 * Add sdllc/qllc virtual ring for transfer from SRB
 * to serial data link
 */
	LOOP
	boolean
	hwidbtype *idb, ushort this_ring, uchar bridge_num, ushort target_ring
END

DEFINE rsrb_remove_vring
/*
 * Remove an SDLLC/QLLC virtual ring
 */
	LOOP
	boolean
	hwidbtype *idb,	int rsrb_et
END

DEFINE rsrb_is_pak_from_lak_peer
/*
 *   Returns TRUE if pak received from virtual peer with local-ack enabled
 *
 */
        STUB
	boolean
	paktype *pak
END

DEFINE srt_other_media
/*
 * Test whether a given interface allows llc2 commands
 */
	LOOP
	boolean
	hwidbtype *idb
END

DEFINE srt_srb_multicast
/*
 * Pass a multicast packet input on a source route bridge to the SRB code.
 * Called from the transparent bridging code.
 */
	STUB
	boolean
	idbtype *idb, paktype *pak, boolean makeowncopy
END

DEFINE srt_srb_forward
/*
 * Interrupt level routine to forward (or drop or whatever) an SRB packet.
 * Called from FDDI and token ring drivers.
 */
	STUB
	void
	paktype *pak, hwidbtype *idb, int riflen
END

DEFINE srt_config_check
/*
 * After each bridge-group command, check the configuration for
 * dependencies such as the suppression of autonomous bridging
 * due to the configuration of access lists, etc.
 */
	LIST
	void
	idbtype *idb, spantype *span
END

DEFINE srt_learn_source
/*
 * Determine the source LCI for this packet.  Frame Relay and X.25
 * require this because there is no easy way to extract the address
 * from the packet.
 */
	LOOP
	boolean
	idbtype *idb, paktype *pak, btetype *mac
END

DEFINE srt_setup_auto_sw_srb
/*
 * Function to be called to build and install autonomous switching SRB tables.
 * Called from SRB and CBUS drivers.
 */
	STUB
	void
	hwidbtype *idb
END

DEFINE tbridge_read_bytes
/*
 * Function called to read up to 4 bytes from the specified offset
 * via a platform specific method.
 */
	STUB
	ulong
	hwidbtype *idb, uchar *base, int offset, ushort size
END

DEFINE tbridge_bte_entry_remove
/*
 * Wrapper function to remove a bridge table entry. 
 * Input Parameters: span pointer,MAC address and pointer to last BTE.
 */
        STUB
        void
        spantype *span, btetype *bte, btetype *last
END

DEFINE tbridge_bte_entry_locate
/*
 * Wrapper function to locate a bridge table entry.
 * Input Parameters: span pointer, MAC address.
 * Output Parameter: address of last BTE pointer.
 */
        STUB
        btetype *
        spantype *span, uchar const *addr, btetype **last
END

DEFINE srt_flush_explorer
/*
 * Function called to discard explorers if explorer queue is nearly full
 * and not accept any until queue is nearly empty.
 */
	LOOP
	boolean
	hwidbtype *idb, ushort size
END

DEFINE srt_permit_vidb_span
/*
 * Function called to see if it is ok to running spanning tree on
 * a particular virtual interface, and either enable or don't take
 * any action depending on the result.
 */
	STUB
	boolean
	idbtype *port
END

DEFINE srt_add_spanidb
/*
 * Function called to add virtual interfaces associated with
 * AST group to span structure.
 */
	STUB
	void
	spantype *span, int index, int count
END

DEFINE srt_add_all_spanidb
/*
 * Function called to add all AST vidbs back to span structure.
 */
	STUB
	void
	int index, spantype *span
END

DEFINE srt_span_index
/*
 * Function called to get the IBM spanning tree index.
 */
	STUB
	boolean
	int index
END

DEFINE srt_remove_netbios_wan_filter
/*
 * Function to be called to remove netbios WAN filter
 */
        STUB
        void
        netbios_acclisttype *netbios_list
END

DEFINE srt_set_srb_params
/*
 * After each source-bridge active <local ring #> <bridge #> <target ring #>
 * change, this calls all the registered DLUs to 
 * resync their bridging functionality. DLSw is the prime user for now.
 */
	LIST
	void
	hwidbtype *idb, boolean sense
END

DEFINE xmacaccesscheck_gen
/*
 * Perform an access check on a packet.
 */
	STUB
	boolean
	int list,			\
	mac_address_type *dest,		\
	mac_address_type *source,	\
	uchar *data,			\
	int data_offset,		\
	int data_size
END

DEFINE set_802_10_sde_encap

/*
 * Generic encapsulation routine which configures a subinterface
 * for IEEE 802.10 Secure Data Exchange (SDE) encapsulation.
 */
        LIST
        void
        parseinfo *csb
END

DEFINE deencap_802_10_sde

/*
 * Deencapsulation routine for IEEE 802.10 SDE encapsulated interfaces.
 */
        LIST
        void
        idbtype *swidb, boolean sense
END

DEFINE isl_vlan_bridging_capable_subinterface

/*
 * Determines whether a subinterface that is configured for ISL Virtual LAN
 * encapsulation can be added to a Bridge Group.
 */
        LOOP
        boolean
        idbtype *swidb, int index, spantype *span

END

DEFINE generateRSRBtrap

/*
 * RSRB Peer state change trap
 */
        STUB
        void
        tr_vpeertype *vrp
END

DEFINE srb_activate_ring
/*
 * Request activation of a srb ring
 */
	STUB
	void
	hwidbtype *hwidb, ushort target_ring, \
		ushort local_ring, ushort bridge_num
END

DEFINE srb_deactivate_ring
/*
 * request deactivation of a srb ring
 */
	STUB
	void
	hwidbtype *hwidb, ushort target_ring, \
		ushort local_ring, ushort bridge_num

END

DEFINE span_port_disable
/*
 * To Disable a spanning tree port
 */
        STUB
        void
        spantype *span, idbtype *port
END

DEFINE dlsw_work
/*
 * process test and xid's for dlsw
 */
	STUB
	void
	paktype *newpak, hwidbtype *idb, int riflen

END

DEFINE dlsw_remove_netbios_wan_filter
/*
 * Function to be called to remove netbios WAN filter for DLSw
 */
        STUB
        void
        netbios_acclisttype *netbios_list
END

DEFINE dlsw_parse_srb_if
/*
 * Function to attach interface and DLSw
 */
        STUB
        void
        boolean sense
END

DEFINE bvi_smf_update
/*
 * If anyone want to insert given address into SMF of the BVI
 * (Bridge-group Virtual Interface - for Integrated Routing and Bridging),
 * insert the address into the bridged interfaces of the corresponding 
 * bridge group upon a match of flag. The BVI doesn't have SMF itself.
 */
	STUB
	boolean
	uchar *addr, idbtype *bvi, ulong result, ulong flag
END


DEFINE bvi_smf_delete
/*
 * Delete the given address from the software MAC filter of the
 * bridged interfaces in the corresponding bridge group.
 */
	STUB
	boolean
	uchar *addr, idbtype *bvi, ulong result, ulong flag
END

DEFINE bvi_smf_delete_by_result
/*
 * Delete the all addresses that match the given result from the
 * software MAC filter of the bridged interfaces in the corresponding
 * bridge group
 */
	STUB
	boolean
	idbtype *bvi, ulong result
END

DEFINE lec_bridge_init
/*
 * Called from lane  to initialize bridging specific registries.
 */
	STUB
	void
	-
END

DEFINE vtp_find_vlan_by_bridge_group
/*
 * Returns the VLAN ID associated with a bridge group (if exists, 0 otherwise)
 */
	STUB
	ulong 
	int span_index
END

DEFINE vtp_find_bridge_group_by_vlan
/*
 * Returns the index into the spanning tree array for the bridge group
 * associated with this vlan.  -1 Otherwise.
 */
	STUB
	int
	uchar* domain_name, uchar dname_length, ulong vlan_id
END

DEFINE vtp_configure_bridge_group
/* 
 * Creates a bridge group on the fly for use with VTP.
 */
	STUB
	int
	boolean create_group, uchar* domain_name, uchar dname_length, \
	ulong vlan_id
END

DEFINE vtp_config_subif_in_bridge_group
/*
 * Add a subinterface to the bridge group for VTP.
 */
	STUB
        void
        boolean is_adding, int bg, idbtype* swidb
END

DEFINE srt_report_port_state
/* 
 * Notify interested parties of port spanning tree state change
 */
	LIST
	void
	idbtype* port, int status
END

DEFINE srt_report_new_port
/* 
 * Notify interested parties when a port joins a bridge group
 */
	LIST
	void
	idbtype* port, int bg
END

DEFINE vtp_find_domain_by_bridge_group
/*
 * Returns true if a domain exists for the given bridge group, if true
 * the domain_name (which must be passed in with 33 bytes of space)
 * and dname_length are filled in with appropriate values.
 */
	STUB
	boolean
	int span_index, unsigned char* domain_name, unsigned char* dname_length
END

DEFINE srt_report_port_removal
/* 
 * Notify interested parties when a port joins a bridge group
 */
	LIST
	void
	idbtype* port, int bg
END

DEFINE vtp_port_is_pruned
/* 
 * Determine if flooding disabled on an interface due to VTP pruning 
 */
	STUB
	boolean
	void* subif_sb
END

DEFINE srb_out_check
/*
 * access list 
 */
        STUB
        boolean
        uchar *dgstart, ulong dgsize, hwidbtype *outidb, int riflen
END

DEFINE tbridge_clear_cache
/*
 * clears the bridging cache
 */
        LIST
        void
        int index
 
END

END REGISTRY
