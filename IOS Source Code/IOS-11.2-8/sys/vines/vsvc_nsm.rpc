# $Id: vsvc_nsm.rpc,v 3.2 1995/11/17 17:59:44 hampton Exp $
# $Source: /swtal/cherf.111/ios/sys/vines/vsvc_nsm.rpc,v $
#------------------------------------------------------------------
# vsvc_nsm.rpc - Definition of the `Network and Systems Management'
#                RPC calls.
#
# April 1994, David Hampton
#
# Copyright (c) 1994 by cisco Systems, Inc.
# All rights reserved.
#------------------------------------------------------------------
# $Log: vsvc_nsm.rpc,v $
# Revision 3.2  1995/11/17  17:59:44  hampton
# Remove old entries from the RCS header logs.
#
# Revision 3.1  1995/11/09  13:46:11  shaker
# Bump version numbers from 2.x to 3.x.
#
# Revision 2.1  1995/06/07  23:16:09  hampton
# Bump version numbers from 1.x to 2.x.
#
#------------------------------------------------------------------
# $Endlog$
#

SERVICE NSM
  /*
   * The "Network and System Management" Service is the network
   * administrator's window into what is happening in a VINES network or
   * on a VINES server.  It can provide detailed configuration
   * information for a server, or it can provide dynamic information
   * captured in real time.  This information may be either information
   * about the server itself, information about the network topology and
   * routing tables for any of the supported network layer protocols,
   * etc.
   */
  NAME		Network & System Management
  WKP		0x0019
  DEFAULT	REJECT	VNSM_ERR_NOTSUPPORTED
  VERSIONS	55050	32299	69999
  PERIODIC	VNSM_PERIOD	VNSM_PERIOD

  #
  # The following structures were taken from the Banyan API file
  # nmserver.h.  The constants for structure limits were pulled out of
  # a hat, but should be sufficient for future expansion.  The string
  # length constants are defined in various API header files.
  #
  STRUCT	svrfsinfo
    ulong	  totalcache
    ushort	  cachebuffersz
  END		STRUCT
    
  STRUCT	unix_info
    ushort	  iobufs
    ushort	  inodes
    ushort	  files
    ushort	  mounts
    ushort	  procs
    ushort	  maxpu
    ushort	  maxfp
    ulong	  processmemsize
    ulong	  totswapspace
  END		struct

  STRUCT	svrosinfo
    ushort	  osinfo_type
    union	  osinfo
      case	    unix_type	VNSM_SVR_OS_UNIX
        unix_info     data
    end		  union
  end		struct

  STRUCT	svrcomminfo
    ulong	  totalcommbuff
    ushort	  socketscfg
    ushort	  prot_stack_count
    struct	  prot_stack	limit VNSM_NUM_STACKS
      ushort	    type
      string	    name	VNSM_LEN_STACKNAME
      ushort	    protocol_count
      struct	    protocol	limit	VNSM_NUM_PROTOCOLS
        ushort	      type
	string	      name	VNSM_LEN_PROTOCOLNAME
      end           struct
    end           struct
  end           struct

  STRUCT	svrcpuinfo
    ushort	  cpus
  end		struct

  STRUCT	svrsummstats2
    ulong	  timestamp
    ulong	  loadavg1
    ulong	  loadavg5
    ulong	  loadavg15
    ulong	  msgavg1
    ulong	  msgavg5
    ulong	  msgavg15
    ulong	  swapavg15
    ushort	  pctcachehits
    ushort	  commbuffusage
    ulong	  msgin
    ulong	  msgout
    ulong	  drops
    ulong	  pctusercpu
    ulong	  pctsyscpu
    ulong	  pctwiocpu
    ulong	  pctidlecpu
    ulong	  runqsz
    ulong	  pctrunocc
    ulong	  swapqsz
    ulong	  pctswapocc
    ulong	  bswpinrate
    ulong	  bswpoutrate
    ulong	  pswitchrate
    ulong	  syscallrate
    ulong	  pctrdcache
    ulong	  pctwrcache
    ulong	  brdrate
    ulong	  bwrrate
    ulong	  vfltsrate
    ulong	  freemem_left		# currently free
    ulong	  freemem_xxx
    ulong	  freeswap
    ulong	  processes
    ulong	  inodes
    ulong	  files
  end		struct

  STRUCT	svrfsstats
    ushort	  openfiles
    ushort	  opensonfiles
    ushort	  reclocks
    ushort	  pctcachehits
    ulong	  unavailable
    ushort	  maxopenfiles
    ushort	  maxopensonfiles
    ushort	  maxreclocks
  end		struct

  STRUCT	dskstats2
    ulong	  timestamp
    string	  name	VNSM_LEN_DISKNAME
    ulong	  capacity
    ushort	  blksize
    ulong	  used
    ushort	  status
		  
    ulong	  tops
    ulong	  tmisc
    ulong	  tunlog
    ulong	  tblks
    ulong	  tresp
    ulong	  tactive
		  
    ulong	  pctbusy
    ulong	  avgqlen
    ulong	  avgreqrate
    ulong	  avgblkrate
    ulong	  avgwait
    ulong	  avgservice
  end		struct
  #
  # End of data structures from NMSERVER.H
  #

  ROUTINE	GetSvrInfoSumm
    /*
     * Returns some high level configuration information on the server in
     * question.  Most of the information is returned in both numeric and
     * textual format so that the recipient does not need to perform any
     * formatting.
     *
     * *** This routine returns most if not all of the information listed
     * in Banyan's svrsumminfo_2 data structure, but it is not in the
     * same order.
     *
     * See:
     *   Banyan_API:nmserver.h:svrsumminfo_2
     */
    NAME	  Get Server Summary Information
    NUMBER	  0
    RECEIVE	  ACCEPT
    CONTENT	  QUERY
      ulong	    version
      nonce	    for_whom
    END		  QUERY
    CONTENT	  REPLY
      ulong	    version
      domainname    servername
      ushort	    unknown1
      ulong	    serial
      ulong	    dupserial
      ushort	    product_type
      ushort	    unknown2
      string	    product_name	VNSM_LEN_PRODUCTNAME
      ulong	    unknown3
      ushort	    unknown4
      ulong	    os_rev
      string	    os_rev_name		VNSM_LEN_OSREVNAME
      ushort	    os_type
      string	    os_type_string	VNSM_LEN_OSTYPENAME
      ulong	    unknown5
      ushort	    unknown6
      ulong	    start_time
      ulong	    real_memory		# in Kbytes
      ulong	    current_time
    END		  REPLY
  END	        ROUTINE

  ROUTINE	GetSvrInfo
    /*
     * Returns detailed configuration information on the server in
     * question.  This routine returns all of the information listed in
     * several of Banyan's data structures.
     *
     * See:
     *   Banyan_API:nmserver.h:svrosinfo
     *   Banyan_API:nmserver.h:svrfsinfo
     *   Banyan_API:nmserver.h:svrcomminfo
     *   Banyan_API:nmserver.h:svrcpuinfo
     */
    NAME	  Get Server Information
    NUMBER	  1
    RECEIVE	  ACCEPT
    CONTENT	  QUERY
      ulong	    version
      nonce	    for_whom
      ushort	    info_type
    END		  QUERY
    CONTENT	  REPLY
      ulong	    version
      ushort	    info_type
      union	    info
        case	      os	VNSM_SVR_OSINFO
	  svrosinfo     data
	case	      fs	VNSM_SVR_FSINFO
	  svrfsinfo     data
	case	      comm	VNSM_SVR_COMMINFO
	  svrcomminfo   data
	case	      cpu	VNSM_SVR_CPUINFO
	  svrcpuinfo    data
      END 	    union
    END		  REPLY
  END	        ROUTINE

  ROUTINE	GetSvrStat
    /*
     * Returns detailed runtime information on the server in question.
     * This routine returns all of the information listed in several of
     * Banyan's data structures.
     *
     * See:
     *   Banyan_API:nmserver.h:svrsummstats2
     *   Banyan_API:nmserver.h:svrfsstats
     *   Banyan_API:nmserver.h:svrdskstats2
     */
    NAME	  Get Server Statistics
    NUMBER	  4
    RECEIVE	  ACCEPT
    CONTENT	  QUERY
      ulong	    version
      nonce	    dummy_nonce
      ushort	    info_type
      ulong	    timestamp
    END		  QUERY
    CONTENT	  REPLY
      ulong	    version
      ulong	    unknown1
      ushort	    unknown2
      ushort	    info_type
      union	    info
	case	      summ		VNSM_SVR_SUMMSTAT
          ulong	        timestamp
	  svrsummstats2 data
        case	      fs		VNSM_SVR_FSSTAT
          ulong	        timestamp
	  svrfsstats    data
	case	      disk		VNSM_SVR_DISKSTAT
	  ushort	disk_count
          ulong	        timestamp
	  dskstats2	disk		limit VNSM_MAX_DISKS
      END 	    union
    END		  REPLY
  END	        ROUTINE

  ROUTINE	GetWanInfo
    /*
     * Returns a summary list of all WAN interfaces on the server in
     * question.  This routine returns all of the information listed in
     * one of Banyan's data structures, but it is in a slightly exploded
     * format.
     *
     * See:
     *   Banyan_API:nmserial.h:lnkstat
     */
    NAME	  Get Wan Information
    NUMBER	  5
    RECEIVE	  ACCEPT
    CONTENT	  QUERY
      ulong	    version
      nonce	    dummy_nonce
      ushort	    unknown1
      ushort	    unknown2
      ushort	    unknown3
      ushort	    unknown4
    END		  QUERY
    CONTENT	  REPLY
      ulong	    version
      ulong	    pass
      ushort	    unknown
      ushort	    ifinfo_count
      struct	    ifinfo		limit VNSM_NUM_INTERFACES
        ulong	      unknown
        ushort	      slot
        ushort	      line
	ushort	      type
	ulong	      frames_rcvd
	ulong	      frames_xmit
	ulong	      frames_rexmit
	ulong	      crc_errors
	ulong	      drops
	ulong	      underruns
	ulong	      overruns
	ulong	      framing_errors
      END           struct
    END		  REPLY
  END	        ROUTINE

  ROUTINE	GetX25Info
    /*
     * Returns a summary list of all open X25 VCs on the server in
     * question.  This routine returns all of the information listed in
     * one of Banyan's data structures, but it is in a slightly exploded
     * format.
     *
     * See:
     *   Banyan_API:nmserial.h:pktstat
     */
    NAME	  Get X25 Information
    NUMBER	  6
    RECEIVE	  ACCEPT
    CONTENT	  QUERY
      ulong	    version
      nonce	    dummy_nonce
      ushort	    unknown1
      ushort	    unknown2
      ushort	    unknown3
      ushort	    unknown4
    END		  QUERY
    CONTENT	  REPLY
      ulong	    version
      ulong	    pass
      ushort	    unknown
      ushort	    ifinfo_count
      struct	    ifinfo		limit VNSM_NUM_INTERFACES
        ulong	      reset		reserved for future use
	ushort	      slot		slot number
	ushort	      line		line number
	ushort	      lsn		local session number of X25 VC
	ushort	      lcn		logical channel number of X25 VC
	uchar	      remx121addr array 16	remote X.121 address
	ushort	      remx121sig	significant bytes in X.121 addr
	ulong	      totalin		total msgs in
	ulong	      totalout		total msgs out
	ulong	      inerrors		errors in
	ulong	      outerrors		errors out
	ulong	      outpkts		pkts out
	ulong	      pktsneedack	pkts awaiting acks
	ulong	      outbytes		bytes out
	ulong	      bytesneedack	bytes awaiting ack
	ulong	      inpkts		pkts in
	ulong	      inbytes		bytes in
	ulong	      inresets		resets in
	ulong	      outresets		resets out
      END           struct
    END		  REPLY
  END	        ROUTINE

  ROUTINE	GetLanInfo
    /*
     * Returns a summary list of all LAN interfaces on the server in
     * question.  This routine returns all of the information listed in
     * one of Banyan's data structures, but it is in a slightly exploded
     * format.
     *
     * See:
     *   Banyan_API:nmlan.h:lanctrl_2
     */
    NAME	  Get Lan Information
    NUMBER	  7
    RECEIVE	  ACCEPT
    CONTENT	  QUERY
      ulong	    version
      nonce	    dummy_nonce
      ushort	    info_type
      ulong	    timestamp
    END		  QUERY
    CONTENT	  REPLY
      ulong	    version
      ulong	    timestamp
      ushort	    unknown
      ushort	    ifinfo_count
      struct	    ifinfo		limit VNSM_NUM_INTERFACES
        ushort	      line_slot		# 12 bit line, 4 bit slot
	ushort	      type
	ushort	      protocols_supported
	string	      name		VNSM_LEN_IFNAME
	ulong	      unknown1
	ulong	      unknown2
	macaddress    interface_address
	uchar	      sig_bytes
      END           struct
    END		  REPLY
  END	        ROUTINE

  ROUTINE	GetLanIfStat
    /*
     * Returns runtime information about a specific interface on the
     * server in question.  This routine can return all of the
     * information listed in one of a couple of Banyan's data structures,
     * but it is generally in a slightly exploded format.  The data
     * structures that can be returned seem unrelated to each other .  It
     * is unclear why Banyan chose to group them together here.
     *
     * See:
     *   Banyan_API:nmcommon.h:summdata
     *   Banyan_API:nmlan.h:lansumm
     */
    NAME	  Get Lan Interface Statistics
    NUMBER	  10
    RECEIVE	  ACCEPT
    CONTENT	  QUERY
      ulong	    version
      nonce	    for_whom
      ushort	    slot
      ushort	    tags_data
      string	    language		VNSM_LEN_LANGUAGE
    END		  QUERY
    CONTENT	  REPLY
      ulong	    version
      string	    help_section	VNSM_LEN_HELPSECTION
      string	    language		VNSM_LEN_LANGUAGE
      ushort	    rows
      uchar	    data		sequence VNSM_DATA_LIMIT
      string	    help_file		VNSM_LEN_HELPFILE
    END		  REPLY
  END	        ROUTINE

  ROUTINE	GetLanIfSummStat
    /*
     * Returns summary runtime information on the server in question.
     * This routine can return all of the information listed in one of a
     * couple of Banyan's data structures, but it is generally in a
     * slightly exploded format.  The data structures that can be
     * returned seem somewhat unrelated.  It is unclear why Banyan chose
     * to group them together here.
     *
     * See:
     *   Banyan_API:nmcommon.h:summdata
     *   Banyan_API:nmlan.h:lansumm
     */
    NAME	  Get Lan Interface Summary Statistics
    NUMBER	  11
    RECEIVE	  ACCEPT
    CONTENT	  QUERY
      ulong	    version
      nonce	    for_whom
      ushort	    info_type
      ulong	    timestamp
    END		  QUERY
    CONTENT	  REPLY
      ulong	    version
      ulong	    unknown1
      ushort	    unknown2
      ushort	    info_type
      union	    info
        case	      comm_stats	VNSM_LANIF_COMMSTATS
	  ulong        unused
	  ushort        sockinuse
	  ushort	maxopensock
	  ushort	commbuffusage
	  ulong		totalcommbuff
	  ushort	socketscfg
	  ulong		allocfails
	case	      ifs		VNSM_LANIF_IFSTATS
          ushort	ifinfo_count
          struct	ifinfo		limit VNSM_NUM_INTERFACES
            ushort	  line_slot	# 12 bit line, 4 bit slot
	    ushort	  type
	    string	  name		VNSM_LEN_IFNAME
	    ulong	  unknown
	    ulong	  total_in
	    boolean	  total_in_valid
	    ulong	  total_out
	    boolean	  total_out_valid
	    ulong	  errs_in
	    boolean	  errs_in_valid
	    ulong	  errs_out
	    boolean	  errs_out_valid
          END           struct
      END	    union
    END		  REPLY
  END	        ROUTINE

  ROUTINE	GetPstkTblInfo
    /*
     * Return a list of protocol specific tables that are available
     * from this server.  Once a list of available tables has been
     * obtained with this procedure, the next procedure may be used to
     * retrieve the actual table column headers and information.
     *
     * This procedure appears to have been added when Banyan got up to
     * their third protocol stack, each stack was sold/loaded
     * independantly, and there was no easy way for an administrator to
     * tell which stack was supported on which server.
     */
    NAME	  Get Protocol Stack Table Information
    NUMBER	  14
    RECEIVE	  ACCEPT
    CONTENT	  QUERY
      ulong	    version
      nonce	    for_whom
      ushort	    protocol_family
    END		  QUERY
    CONTENT	  REPLY
      ulong	    version
      ushort	    table_count
      struct	    table		LIMIT 20
        ushort	      protocol_id
	string	      protocol_name	VNSM_LEN_PROTOCOLNAME
	ushort	      table_id
	string	      table_name	VNSM_LEN_TABLENAME
      end	    struct
    END		  REPLY
  END		ROUTINE

  ROUTINE	GetPstkInfo
    /*
     * Retrieve a single protocol specific table from this server.
     * Tables are requested by protocol family, protocol, and table name.
     * For example, some available tables are the VINES:RTP:Neighbors,
     * VINES:RTP:Routes, and TCPIP:IP:Routes (but we don't support
     * this one).
     *
     * By setting the tags_data field to 'tags', you obtain the number of
     * columns in the table, their labels, and their formatting
     * information.  Setting the same field to 'data' provides the
     * contents for each row in the table.  Data retrieval may be a
     * multi-pass effort.  A non-zero pass field in the reply message
     * indicates that there is more data than could be transmitted.  The
     * client will then return this same pass value in a subsequent query
     * to obtain the remaining table information.
     *
     * The data field is a royal pain in the rear.  Fortunately it is
     * prefaced with a length so the the packing/unpacking routines can
     * work around it.  For tags retrieval, the data field consistss of
     * 'column' instances of a data structure.  This data structure
     * consists of the column title (string), the data type (ushort), an
     * unused field (ushort) and a data width (ushort).  For data
     * retrieval, the data field consists of a two dimensional array of
     * information.  There will be 'rows' copies of a data structure that
     * contains 'columns' numbers.  The size of each number is as
     * indicated during tags retrieval.
     */
    NAME	  Get Protocol Stack Information
    NUMBER	  15
    RECEIVE	  ACCEPT
    CONTENT	  QUERY
      ulong	    version
      nonce	    for_whom
      ushort	    family
      ushort	    protocol
      ushort	    table
      ushort	    tags_data
      ushort	    runtime
      ulong	    timestamp
      ulong	    pass
      string	    language		VNSM_LEN_LANGUAGE
    END		  QUERY
    CONTENT	  REPLY
      ulong	    version
      ulong	    timestamp
      ulong	    pass
      ushort	    rows
      string	    family_name		VNSM_LEN_FAMILYNAME
      string	    protocol_name	VNSM_LEN_PROTOCOLNAME
      string	    table_name		VNSM_LEN_TABLENAME
      ushort	    columns
      string	    help_section	VNSM_LEN_HELPSECTION
      string	    language		VNSM_LEN_LANGUAGE
      uchar	    data		sequence VNSM_DATA_LIMIT
      string	    help_file		VNSM_LEN_HELPFILE
    END		  REPLY
  END	        ROUTINE

  ROUTINE	GetPstkSummStat
    /*
     * Return a list of protocol specific tables that are available from
     * this server, and their summary statistics.  Once a list of
     * available tables has been obtained with this procedure, the next
     * procedure may be used to retrieve the actual table column headers
     * and information.
     *
     * This procedure appears to have been added when Banyan got up to
     * their third protocol stack, each stack was sold/loaded
     * independantly, and there was no easy way for an administrator to
     * tell which stack was supported on which server.
     */
    NAME	  Get Protocol Stack Summary Statistics
    NUMBER	  19
    RECEIVE	  ACCEPT
    CONTENT	  QUERY
      ulong	    version
      nonce	    dummy_nonce
      ushort	    family
    END		  QUERY
    CONTENT	  REPLY
      ulong	    version
      string	    family_name		VNSM_LEN_FAMILYNAME
      ushort	    protocol_count
      struct	    protocol		LIMIT 20
        ushort	      protocol_id
	string	      protocol_name	VNSM_LEN_PROTOCOLNAME
        ushort	      unknown
	ulong	      total_in
	boolean	      total_in_valid
	ulong	      total_out
	boolean	      total_out_valid
	ulong	      errors_in
	boolean	      errors_in_valid
	ulong	      errors_out
	boolean	      errors_out_valid
      end	    struct
    END		  REPLY
  END		ROUTINE

  ROUTINE	GetPstkStats
    /*
     * Retrieve protocol specific statistics from this server.
     * Statistics are requested by family and protocol ids.  For
     * example, some available statistics are for VINES:IP and
     * VINES:RTP.
     *
     * By setting the tags_data field to 'tags', you obtain the number of
     * rows in the table and their labels, and their formatting
     * information.  Setting the same field to 'data' provides the
     * contents for each row in the table.
     *
     * The data field is a royal pain in the rear.  Fortunately it is
     * prefaced with a length so the the packing/unpacking routines can
     * work around it.  For tags retrieval, the data field consistss of
     * 'row' instances of a string containing the label for each row.
     * For data retrieval, the data field consists of row instances of
     * a self defining data structure.
     */
    NAME	  Get Protocol Stack Statistics
    NUMBER	  20
    RECEIVE	  ACCEPT
    CONTENT	  QUERY
      ulong	    version
      nonce	    dummy_nonce
      ushort	    family
      ushort	    protocol
      ushort	    tags_data
      string	    language		VNSM_LEN_LANGUAGE
    END		  QUERY
    CONTENT	  REPLY
      ulong	    version
      string	    help_section	VNSM_LEN_HELPSECTION
      string	    language		VNSM_LEN_LANGUAGE
      ushort	    rows
      uchar	    data		sequence VNSM_DATA_LIMIT
      string	    help_file		VNSM_LEN_HELPFILE
    END		  REPLY
  END	        ROUTINE

  ROUTINE	Start_Send
    /*
     * This procedure is called when a user runs 'MNET' and indicates
     * that they want to monitor a specific server/router.  This
     * procedure is a request for the router to send summary statistics
     * once a minute to the specified client port.  The request/response
     * transaction must be completed before data may be sent to the
     * client port, because the port is not actually opened until a
     * success response it received.
     *
     * This procedure will also be called if MNET client discovers that
     * an actively monitored server has stopped sending data to it for
     * any reason.  This might occur if a server was rebooted, etc.
     */
    NAME	  Start Send
    NUMBER	  22
    RECEIVE	  ACCEPT
    OTHER	  SEND
    CONTENT	  QUERY
      ulong	    version
      nonce	    for_whom
      address	    data_port
    END		  QUERY
    CONTENT	  REPLY
      ulong	    version
      ulong	    garbage
    END		  REPLY
    CONTENT	  OTHER
      stringz	    servername	VST_DOMAINLEN	# no length field
      ulong	    timestamp
      ulong	    unknown
      struct	    svrsummstats
        ulong	      loadavg1
        ulong	      loadavg5
        ulong	      loadavg15
	ulong	      msgavg1
	ulong	      msgavg5
	ulong	      msgavg15
	ulong	      swapavg15
	ushort	      pctcachehits
	ushort	      commbuffusage
	ulong	      msgin
	ulong	      msgout
	ulong	      drops
      end	    struct
    END		  CONTENT
  END	        ROUTINE

  ROUTINE	Stop_Send
    /*
     * This procedure is called when a user quits 'MNET'.  It is sent to
     * each server that is being monitored to indicate that it should no
     * longer send summary statistics to the specified client port.
     */
    NAME	  Stop Send
    NUMBER	  23
    RECEIVE	  ACCEPT NOREPLY
    CONTENT	  QUERY
      ulong	    version
      nonce	    for_whom
      address	    data_port
    END		  QUERY
  END	        ROUTINE

  ROUTINE	Trace
    /*
     * This procedure is used to initiate or continue a network trace.
     * To initiate a trace, the query message is completely filled in and
     * transmitted to the server where the trace should originate.  This
     * query must be acknowledged before anything else may occur.  The
     * originating server then examines its routing tables, and sends a
     * message to the inticated port describing how to reach the
     * specified destination.  It then sends a copy of the query message
     * (with an invalid nonce field) to the first hop to reach the
     * destination.  That server repeats the above process, etc, until
     * the destination receievs the query and responds to it.
     */
    NAME	Network Trace
    NUMBER	27
    SEND	
    RECEIVE 	ACCEPT
    OTHER	SEND RECEIVE
    CONTENT	QUERY
      ulong	  version
      nonce	  for_whom		# valid only if sequence == 0
      ulong	  destination
      ulong	  timestamp
      ushort	  sequence
      address	  response_port
    END		QUERY
    CONTENT	REPLY
      ulong	  version
      ulong	  timestamp
    END		REPLY
    CONTENT	OTHER
      struct	  route
        ulong	    destination
	ushort	    metric
	ushort	    idle
	ushort	    flags
	ulong	    gateway_net
	ulong	    preferred_net
      end	  struct
      struct	  neighbor
    	ulong  	    lnetid		# local net (i.e. this router)
    	macaddress  interface_addr
    	macaddress  neighbor_addr
    	ulong  	    network
    	ushort 	    host
    	uchar  	    sig_bytes
    	ushort 	    neighbor_type
    	ushort 	    interface_type
    	ushort 	    slot
      end	  struct
      ulong	  timestamp
      ushort	  sequence
    END		OTHER
  END ROUTINE
END SERVICE

###
### Local Variables:
### mode: Indented-Text
### End:
###
