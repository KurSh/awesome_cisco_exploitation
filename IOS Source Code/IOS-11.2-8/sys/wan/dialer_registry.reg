# $Id: dialer_registry.reg,v 3.4.30.4 1996/05/19 03:10:46 hrobison Exp $
# $Source: /release/112/cvs/Xsys/wan/dialer_registry.reg,v $
#------------------------------------------------------------------
# dialer_registry.reg - Service Points for DIALER registry
#
# October 1994, Lionel Bustini
#
# Copyright (c) 1994-1997 by cisco Systems, Inc.
# All rights reserved.
#------------------------------------------------------------------
# $Log: dialer_registry.reg,v $
# Revision 3.4.30.4  1996/05/19  03:10:46  hrobison
# CSCdi56813:  CSCdi46413 breaks platform independent file modularity
# Branch: California_branch
# With the excuse of changes required by the new compiler, take the
# opportunity to remove platform dependancies, improve code
# modularity and do some general code clean-up.
#
# Revision 3.4.30.3  1996/05/10  01:44:46  wmay
# CPP and PPP half-bridge commit
# Branch: California_branch
#
# Revision 3.4.30.2  1996/05/07  04:14:55  hrobison
# CSCdi56472:  CSCdi46413 broke modularity if ISDN not included
# Branch: California_branch
# Quick fix: Change external reference to structure in ../isdn to
# a registry call.  Code is scheduled for clean-up in CSCdi56813.
#
# Revision 3.4.30.1  1996/04/27  06:36:21  syiu
# Branch: California_branch
# Commit Dial1_branch
#
# Revision 3.3.12.4  1996/04/23  00:24:27  suresh
# Branch: Dial1_branch
# Add Dialer Profiles support to Dial1_branch
#
# Revision 3.3.12.3  1996/04/17  00:00:24  syiu
# Branch: Dial1_branch
# Sync Dial1_branch to V111_1_3
#
# Revision 3.3.12.2  1996/02/23  21:31:26  lbustini
# Branch: Dial1_branch
# Move dialer fields out of the idb.
#
# Revision 3.3.12.1  1996/01/16  15:45:15  dblair
# CSCdi42375:  Move Multilink PPP into PPP subsystem
# Branch: Dial1_branch
#
# Revision 3.4  1996/01/15  19:24:21  misko
# CSCdi43044:  ip address negotiation not working with DDR
# When we assign an IP address, allow a dialer map to be dynamically
# created so that we can map the assigned IP address to an authenticated
# name.
#
# Revision 3.3  1995/12/11  14:20:21  dblair
# CSCdi45019:  Previous commit broke modularity by calling ncp_lowerup
# from mlp.c.  Added registry to fix modularity.
#
# Revision 3.2  1995/11/17  18:01:46  hampton
# Remove old entries from the RCS header logs.
#
# Revision 3.1  1995/11/09  13:48:36  shaker
# Bump version numbers from 2.x to 3.x.
#
# Revision 2.6  1995/11/08  21:35:14  shaker
# Merge Arkansas_branch into 11.1 mainline.
#
# Revision 2.5  1995/10/06  02:26:31  lbustini
# CSCdi39576:  dialer dtr does not leave DTR low permanently after idle
# timeout
# Raise DTR only when a call is placed.
#
# Revision 2.4  1995/09/30  05:06:21  dblair
# CSCdi41333:  DDR Callback initial commit
# Adding Callback feature for DDR interfaces.
#
# Revision 2.3  1995/09/20  22:38:59  dblair
# CSCdi40745:  PPP Multilink feature commit
#
# Revision 2.2  1995/08/07  20:32:31  bdas
# CSCdi38212:  Dialing reason may be incorrect in some call history mib
# entries
#
# Revision 2.1  1995/06/07  23:17:29  hampton
# Bump version numbers from 1.x to 2.x.
#
#------------------------------------------------------------------
# $Endlog$
#
# Syntax for defining a registry
#
# Each item must begin a line of its own.
# Lines may be continued by ending with a \
#
# BEGIN REGISTRY <name of registry>
#
# DEFINE <name of service point>
# /* <comment lines in standard C format describing the
#     registry. These will be reformatted unless they are
#     in the comment bar format> */
# DATA
#    <Lines of text to be copied from the input to the
#     between the comment and the function declaration>
# END DATA
#    <type of service> := LIST | LOOP | STUB | CASE | RETVAL | VALUE
#    <type declaration of value returned by called function>
#              must be void for LIST and CASE, boolean
#              for LOOP, and ulong for VALUE.
#    <prototype list for called function>
#    <number of cases for case service>
#    <type for case statement>
# END
#
# END REGISTRY
#
#

BEGIN REGISTRY DIALER 


DEFINE  dialer_spoofing_change
/*
 * Invoked whenever a dialer interface changes its spoofing state
 */
	LIST
	void
	hwidbtype *hwidb, boolean spoofing_interface_enabled, boolean spoofing_interface_changed, boolean spoofing_protocol_enabled, boolean spoofing_protocol_changed
END

DEFINE dialer_return_connected_hwidbs
/*
 * Will call media_dialer_number_called_changed for all hwidbs associated
 * with the passed-in idb, for all of those hwidbs that are connected to same
 * dial-string that the dialer map entry of the address passed in has as its
 * dialer string. In other words "Which hw interfaces are attached to the phone
 * number associated with, say, 'dialer map snapshot 10 12345?' Original
 * caller should have top == output.
 */
	STUB
	void
	hwidbtype *output, hwidbtype *top, addrtype *proto_addr, uint link
END

DEFINE  dialer_active
/*
 * Invoked whenever a dialer interface goes up/down. Passes in both the IDB
 * that changed state, and the hunt group master.
 */
	LIST
	void
	hwidbtype *idb_changed, hwidbtype *hunt_group_master, boolean up
END

DEFINE  dialer_initiate_connection
/*
 * Invoke dialer connection on this interface, using the dialer_string,
 * if dialing is supported on this interface
 */
	STUB
	void
	hwidbtype *hwidb, long addr, ulong link
END

DEFINE dialer_reset_timers
/*
 * Reset the dialer idle timers of the associated hwidb
 */
	STUB
	void
	hwidbtype *hwidb
END

DEFINE dialer_connected
/*
 * Tell if the dialer is connected to the site mentioned...
 */
	STUB
	boolean
	hwidbtype *hwidb, addrtype *proto_addr, uint link
END

DEFINE dialer_retrieve_maps
/*
 * Retrieve all maps on hwidb, linktype given... call
 * reg_invoke_media_dialer_map_change for each.
 */
	STUB
	void
	hwidbtype *hwidb, ulong link
END

DEFINE	dialer_map_change
/*
 * Indexed by linktype
 * Called by dialer to indicate a map change for the linktype specified.
 */
	CASE
	void
	hwidbtype *hwidb, addrtype *addr, boolean deleting
	LINK_MAXLINKTYPE
	int linktype
END

DEFINE	dialer_number_called_changed
/*
 * Indexed by linktype
 * Called by dialer to indicate a number called changed on the idb given
 */
	CASE
	void
	hwidbtype *real_idb, hwidbtype *master_idb, addrtype *addr, boolean set
	LINK_MAXLINKTYPE
	int linktype
END

DEFINE	dialer_is_free
/*
 * Returns TRUE if interface can place a call.
 * Index is DIALER_xxx.
 */
	RETVAL
	boolean
	dialerdbtype *ddb
	DIALER_MAX
	int dialer
END

DEFINE	get_free_dialer
/*
 * Returns idb of a free dialer.
 * Index is DIALER_xxx.
 */
	RETVAL
	dialerdbtype *
	dialerdbtype *ddb
	DIALER_MAX
	int dialer
END

DEFINE 	dialer_dial
/*
 * Invoke media specific code for dialing numbers.  ISDN does it one way,
 * sync inband dialers another, and async inband dialers yet another.
 * Index is DIALER_xxx.  Returns TRUE/FALSE.
 */
	RETVAL
	boolean
        dialerdbtype *ddb, dialerpaktype *dpak
	DIALER_MAX
	int dialer
END

DEFINE 	dialer_drop
/*
 * Invoke media specific code for disconnecting the dialer.
 * Index is DIALER_xxx.
 */
	CASE
	void
        hwidbtype *idb
	DIALER_MAX
	int dialer
END

DEFINE 	dialer_dial_failed
/*
 * Invoke dialer functions to take care of a dial attempt failure.
 * Called by the media routines to report an asynchronous failure.
 */

	STUB
	void
	hwidbtype *idb

END

DEFINE dialer_shutdown
/*
 * Shut down a dialer.
 * Index is DIALER_xxx.
 */
	CASE
	void
	dialerdbtype *ddb
	DIALER_MAX
	int dialer
END

DEFINE dialer_group_init
/*
 * List of initializiation done when a dialer group is created
 */
	LIST
	void
	hwidbtype *hwidb, dialergrouptype *dgroup
END

DEFINE dialer_group_destroy
/*
 * List of initializiation done when a dialer group is destroyed
 */
	LIST
	void
	dialergrouptype *dgroup
END

DEFINE dialer_clear_group
/*
 * Clean up after map has been deleted.
 * Index is DIALER_xxx.
 */
	CASE
	void
	dialerdbtype *ddb, dialermaptype *map
	DIALER_MAX
	int dialer
END

DEFINE dialer_pending
/*
 * Return TRUE if a call to given address is being placed.
 * Index is DIALER_xxx.
 */
	RETVAL
	dialerdbtype *
	dialerdbtype *ddb, dialerpaktype *dpak
	DIALER_MAX
	int dialer
END

DEFINE dialer_show_info
/*
 * Registry for 'show dialer' command.
 * Index is DIALER_xxx.
 */
	CASE
	void
	dialerdbtype *ddb
	DIALER_MAX
	int dialer
END

DEFINE	dialer_lookup_caller
/*
 * Invoke media (i.e., dialer) specific code to look up caller based
 * on interface address.
 */
	LIST
	void
	hwidbtype *idb, addrtype *proto_addr, int link
END

DEFINE dialer_remote_ip_addr
/*
 * Attempt to get remote side's IP address.
 * Index is DIALER_xxx.
 */
	RETVAL
	ipaddrtype
	hwidbtype *idb
	DIALER_MAX
	int dialer
END

DEFINE dialer_remote_name
/*
 * Save name of authenticated remote router.
 */
	STUB
	void
	hwidbtype *idb, char *name
END

DEFINE dialer_remote_addr
/*
 * Get address of remote router as configured in dialer map.
 */
	STUB
	addrtype *
	hwidbtype *idb, uint link, char *number
END

DEFINE	dialer_setup
/*
 * Call media specific routine when DDR is enabled
 */
	CASE
	void
	dialerdbtype *ddb, boolean setup
	ET_MAX
	int enctype
END

DEFINE	set_dialer_list
/*
 * Indexed by linktype
 * Set protocol dialer-list.
 */
	CASE
	void
	dialerplisttype *diallst, int list 
	LINK_MAXLINKTYPE
	int linktype
END

DEFINE  pri_member_adjust_encap
/*
 * Adjust the encap vectors to get dialer in there.
 */
    STUB
    void
    hwidbtype *idb, int encaps 
END

DEFINE  dialer_pri_shutdown
/*
 * This interface is going down time to cleanup.
 */
    STUB
    void
    hwidbtype *hwidb
END

DEFINE  init_pri_idb
/*
 * Need to initialize this pri idb for dialer.
 */
    STUB
    boolean
    hwidbtype *hwidb
END

DEFINE  isdn_pri_init 
/*
 * Need to initialize this pri idb for isdn specifics.
 */
    STUB
    void
    hwidbtype *hwidb
END

DEFINE  isdn_pri_setencap
/*
 * Need to setencaps on this pri interface.
 */
    STUB
    void
    parseinfo *csb
END

DEFINE  isdn_pri_init_core
/*
 * call to isdn_init_core
 */
    STUB
    void
    hwidbtype *hwidb, int dsl
END

DEFINE  isdn_verify_dsl
/*
 * call to isdn_verify_dsl
 */
    STUB
    int
    -
END

DEFINE  isdn_set_chan_state
/*
 * call to CC_CHAN_Set_Chan_State
 */
    STUB
    void
    int bitfield, int dsl, boolean dchan, int dchan_val
END

DEFINE  isdn_pri_getswitch
/*
 * call to isdn_getswitchtype
 */
    STUB
    int
    -
END

DEFINE	dialer_callback_start
/*
 * Called by ppp lcp_auth to start callback process
 */
	STUB
	boolean
	hwidbtype *idb, usernametype *info, boolean neg_result, char *dialstr
END

DEFINE	dialer_holdq_timer_start
/*
 * Called by to start a holdq timer
 */
	STUB
	void
	queuetype *holdq, ulong ticks
END

DEFINE	v120_start_interface
/*
 * call to v120 interface
 */
    STUB
    boolean
    hwidbtype *hwidb, boolean have_params, void *params
END

DEFINE  v120_show
/*
 * call to display v.120 info from dialer
 */
   STUB
   void
   hwidbtype *hwidb
END

DEFINE  v120_stop_interface
/*
 * call to v120 interface
 */
    STUB
    void
    hwidbtype *hwidb
END

DEFINE  dialer_keep_dtr_low
/*
 * called from serial device drivers to determine whether DTR should be
 * taken/kept low.
 */
    STUB
    boolean
    hwidbtype *hwidb
END

DEFINE  dialer_spoofing_int
/*
 * Returns state of interface spoofing flag.
 */
    STUB
    boolean
    hwidbtype *hwidb
END

 
DEFINE  pri_enq_prim
/*
 * Enqueue L1 event in PRI.
 */
    STUB
    void
    uint idb_unit_no, uint prim
END

DEFINE  dialer_spoofing_prot
/*
 * Returns state of line protocol spoofing flag.
 */
    STUB
    boolean
    hwidbtype *hwidb
END

DEFINE  dialer_huntgroup_member
/*
 * Returns TRUE if idb is a hunt group member.
 */
    STUB
    boolean
    hwidbtype *hwidb
END

DEFINE  dialer_huntgroup_leader
/*
 * Returns TRUE if idb is a hunt group leader.
 */
    STUB
    boolean
    hwidbtype *hwidb
END

DEFINE  dialer_is_in_use
/*
 * Returns TRUE if idb is in use.
 */
    STUB
    boolean
    hwidbtype *hwidb
END

DEFINE  for_all_dialer_members
/*
 * Runs through all rotary group members
 */
    STUB
    void
    hwidbtype *hwidb, void *rtn
END

DEFINE  dialer_change_pak_if
/*
 * Change pak->if_input from physical interface to rotary group leader
 */
    STUB
    boolean
    hwidbtype *hwidb, paktype *pak
END

DEFINE  get_dialer_string
/*
 * Return a pointer to the dialer string
 */
    STUB
    char *
    hwidbtype *hwidb
END

DEFINE	dialer_connect_name
/*
 * Called to dial a specific hostname
 */
    STUB
    boolean
    uchar *name, hwidbtype *requesting_idb, uchar *reason
END

DEFINE dialer_is_answer
/*
 * Invoke media (ISDN, sync serial, etc) specific code to decide if we placed
 * or answered this call.  Returns TRUE if answered, FALSE otherwise.
 */
    RETVAL
    boolean
    dialerdbtype *ddb
    DIALER_MAX
    int dialer
END

DEFINE dialer_create_dynamic_map
/*
 * Called by encapsulations that assign addresses to remote clients so that
 * dialer maps can be created on the fly for those clients.
 */
    STUB
    void
    uint link, hwidbtype *hwidb, addrtype *addr
END

DEFINE dialer_delete_dynamic_map
/*
 * Called by encapsulations when a remote client has disconnected and the
 * dynamically created dialer map is to be deleted.
 */
    STUB
    void
    uint link, hwidbtype *hwidb, addrtype *addr
END

DEFINE dialer_save_config
/*
 * Save encapsulation configuration of interface.
 */
    CASE
    void
    dialerdbtype *ddb
    ET_MAX
    int enctype
END

DEFINE dialer_restore_config
/*
 * Restore encapsulation configuration of interface.
 */
    CASE
    void
    dialerdbtype *ddb
    ET_MAX
    int enctype
END

DEFINE dialer_pool_acl_idb
/*
 * Return the idb of the appropriate interface for an access list to be
 * applied to, for a pool member it should the dialer otherwise it will
 * be the input interface.
 */
    STUB
    hwidbtype *
    hwidbtype *idb
END

DEFINE dialer_get_connected_group
/*
 * Return the dialergrouptype if we are connected to destination else NULL
 */
    STUB
    dialergrouptype *
    hwidbtype *hwidb, addrtype *proto_addr, uint linktype
END
			  
DEFINE dialer_get_conn_member
/*
 * Returns the hwidb of the connected channel
 */
    STUB
    hwidbtype *
    hwidbtype *hwidb
END

END REGISTRY DIALER
