# $Id: fr_svc_registry.reg,v 3.1.64.4 1996/07/04 17:05:52 chifei Exp $
# $Source: /release/112/cvs/Xsys/wan/fr_svc_registry.reg,v $
# ------------------------------------------------------------------
# fr_svc_registry.reg : Service point for Frame Relay SVC stuff
#
# May 1995, Shankar Natarajan
#
# Copyright (c) 1995-1997 by cisco Systems, Inc.
# All rights reserved.
# *------------------------------------------------------------------
# $Log: fr_svc_registry.reg,v $
# Revision 3.1.64.4  1996/07/04  17:05:52  chifei
# CSCdi58333:  Some frame relay SVC commands are available in
# non-enterprise images
# Branch: California_branch
# Moved command handling out of frame_relay_command()
#
# Revision 3.1.64.3  1996/07/03  01:57:20  chifei
# CSCdi58333:  Some frame relay SVC commands are available in
# non-enterprise images
# Branch: California_branch
# Modularized "frame svc" and "frame lapf" commands to go with FR SVC
# subsystem; fixed/clean-up LAPF command format; consolidated DL
# primitives define's.
#
# Revision 3.1.64.2  1996/05/24  21:21:36  ccpoe
# CSCdi58460:  map-class frame-relay traffic-shaping features dont work
# on FR SVC
# Branch: California_branch
#
# Revision 3.1.64.1  1996/04/25  23:23:52  ronnie
# CSCdi55766:  Hey!  This ATM and Frame Relay is no different than in 11.1
# Feature commit for ATM and Frame Relay into 11.2
# Branch: California_branch
#
# Revision 3.1.68.1  1996/04/24  04:11:35  shankar
# Branch: ATM_Cal_branch
# Patch FR_SVC_branch changes
#
# Revision 3.1.8.5  1996/04/21  02:44:58  shankar
# CSCdi55234:  Code review changes for FR SVC layer 3 system
# Branch: FR_SVC_branch
# part II of a 4 part commit
#
# Revision 3.1.8.4  1996/03/12  18:59:35  ccpoe
# LMI keepalive is now sent and status checked by the lmi_idb_timer.
# FR_MIN_PKT_SIZE is checked after the svc mgt packets. fr_svc_periodic
# is created.
# Branch: FR_SVC_branch
#
# Revision 3.1.8.3  1996/01/22  23:42:05  shankar
# Branch: FR_SVC_branch
# Assortment of simple changes.
#
# Revision 3.1.8.2  1996/01/02  04:51:41  shankar
# Branch: FR_SVC_branch
# Sync to mainline
#
# Revision 3.1.8.1  1995/12/11  22:31:47  shankar
# Branch: FR_SVC_branch
# Last chunk of major commits for FR SVCs
#
# Revision 3.1  1995/11/09  13:49:14  shaker
# Bump version numbers from 2.x to 3.x.
#
# Revision 2.1  1995/09/01  19:53:36  shankar
# Files for Arkansas feature
#
# 
# $Endlog$
#

#
# Syntax for defining a registry
#
# Each item must begin a line of its own.
# Lines may be continued by ending with a \
#
# BEGIN REGISTRY <name of registry>
#
# DEFINE <name of service point>
# /* <comment lines in standard C format describing the
#     registry. These will be reformatted unless they are
#     in the comment bar format> */
# DATA
#    <Lines of text to be copied from the input to the
#     between the comment and the function declaration>
# END DATA
#    <type of service> := LIST | LOOP | STUB | CASE | RETVAL | VALUE
#    <type declaration of value returned by called function>
#              must be void for LIST and CASE, boolean
#              for LOOP, and ulong for VALUE.
#    <prototype list for called function>
#    <number of cases for case service>
#    <type for case statement>
# END
#
# END REGISTRY
#
#
 
BEGIN REGISTRY FR_SVC

DEFINE form_setup_msg
/* 
 * Registry to setup a SETUP message to be sent 
 */
	LIST
	void
	fr_svc_info_type *svc, uchar **ptr, struct fr_svc_params *params
END

DEFINE form_call_proc_msg
/* 
 * Registry to setup a CALL PROCEEDING message to be sent 
 */
	LIST
	void
	fr_svc_info_type *svc, uchar **ptr, struct fr_svc_params *params
END

DEFINE form_connect_msg
/* 
 * Registry to setup a CONNECT message to be sent 
 */
	LIST
	void
	fr_svc_info_type *svc, uchar **ptr, struct fr_svc_params *params
END

DEFINE form_disc_msg
/* 
 * Registry to setup a DISCONNECT message to be sent 
 */
	LIST
	void
	fr_svc_info_type *svc, uchar **ptr, struct fr_svc_params *params
END

DEFINE form_release_msg
/* 
 * Registry to setup a RELEASE message to be sent 
 */
	LIST
	void
	fr_svc_info_type *svc, uchar **ptr, struct fr_svc_params *params
END

DEFINE form_release_comp_msg
/* 
 * Registry to setup a RELEASE COMPLETE message to be sent 
 */
	LIST
	void
	fr_svc_info_type *svc, uchar **ptr, struct fr_svc_params *params
END

DEFINE form_status_msg
/* 
 * Registry to setup a STATUS message to be sent 
 */
	LIST
	void
	fr_svc_info_type *svc, uchar **ptr, struct fr_svc_params *params
END

DEFINE form_status_enq_msg
/* 
 * Registry to setup a STATUS ENQUIRY message to be sent 
 */
	LIST
	void
	fr_svc_info_type *svc, uchar **ptr, struct fr_svc_params *params
END

DEFINE process_setup_msg
/*
 * Invoke FR SVC specific routines to process all IE's within
 * a SETUP message.
 */
	RETVAL
	int
	fr_svc_info_type *svc, uchar **ptr,  uint call_ref, uchar message
	128
	int ie_type
END

DEFINE process_call_proc_msg
/*
 * Process a CALL PROCEEDING message
 */
	RETVAL
	int
	fr_svc_info_type *svc, uchar **ptr, uint call_ref, uchar message
	128
	int ie_type
END

DEFINE process_connect_msg
/*
 * Process a CONNECT message
 */
	RETVAL
	int
	fr_svc_info_type *svc, uchar **ptr, uint call_ref, uchar message
	128
	int ie_type
END

DEFINE process_disconnect_msg
/*
 * Process a DISCONNECT message
 */
	RETVAL
	int
	fr_svc_info_type *svc, uchar **ptr, uint call_ref, uchar message
	128
	int ie_type
END

DEFINE process_release_msg
/*
 * Process a RELEASE message
 */
	RETVAL
	int
	fr_svc_info_type *svc, uchar **ptr, uint call_ref, uchar message
	128
	int ie_type
END

DEFINE process_release_comp_msg
/*
 * Process a RELEASE COMPLETE message
 */
	RETVAL
	int
	fr_svc_info_type *svc, uchar **ptr, uint call_ref, uchar message
	128
	int ie_type
END

DEFINE process_status_msg
/*
 * Process a STATUS message
 */
	RETVAL
	int
	fr_svc_info_type *svc, uchar **ptr, uint call_ref, uchar message
	128
	int ie_type
END

DEFINE process_status_enq_msg
/*
 * Process a STATUS ENQUIRY message
 */
	RETVAL
	int
	fr_svc_info_type *svc, uchar **ptr, uint call_ref, uchar message
	128
	int ie_type
END

DEFINE 	assign_svc_mem
/* 
 * assign memory for the SVC structure
 */
	STUB
	fr_svc_info_type *
	-
END

DEFINE  fr_svc_l2_to_l3
/*
 * Processing a SVC specific data link (DL-) event
 */
	STUB
	void
	uchar event, fr_idb_struct_type *fr_idb, paktype *pak
END

DEFINE  fr_svc_lapf_l3_to_l2
/*
 * Processing a SVC specific data link (DL-) event
 */
	STUB
	char
	uchar event, fr_idb_struct_type *fr_idb, paktype *pak
END

DEFINE  Lapf_sys_event
/*
 * Processing a non-DL event for layer 2, including MDL-, PHY- primitives
 * and system internal events
 */
	STUB
	void
	uchar event, fr_idb_struct_type *fr_idb
END

DEFINE  Lapf_input
/*
 * check on input packet and queue up for LAPF process, if applicable
 * Return TRUE if packet has been handled, else FALSE
 */
	STUB
	boolean
	fr_idb_struct_type *fr_idb, paktype *pak
END

DEFINE  Lapf_showCmd
/*
 * processing show frame lapf command
 */
	STUB
	void
	parseinfo *csb
END

DEFINE fr_svc_periodic
/*
 * SVC periodic routine
 */
        STUB
        void
	hwidbtype *hwidb
END


END REGISTRY
