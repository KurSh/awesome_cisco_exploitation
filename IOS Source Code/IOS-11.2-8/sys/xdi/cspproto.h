/* $Id: cspproto.h,v 3.2 1995/11/17 18:09:16 hampton Exp $
 * $Source: /swtal/cherf.111/ios/sys/xdi/cspproto.h,v $
 *------------------------------------------------------------------
 *
 *
 * Mar 1994, Walter Friedrich
 *
 * Copyright (c) 1994 by cisco Systems, Inc.
 * All rights reserved.
 * 
 *------------------------------------------------------------------
 * $Log: cspproto.h,v $
 * Revision 3.2  1995/11/17  18:09:16  hampton
 * Remove old entries from the RCS header logs.
 *
 * Revision 3.1  1995/11/09  13:54:59  shaker
 * Bump version numbers from 2.x to 3.x.
 *
 * Revision 2.1  1995/06/07  23:23:59  hampton
 * Bump version numbers from 1.x to 2.x.
 *
 *------------------------------------------------------------------
 * $Endlog$
 */

/*
 *   This file was automatically generated by cextract version 1.2.
 *   Manual editing not recommended.
 *
 *   Created: Thu Jan  6 16:53:34 1994
 */
#ifndef __CEXTRACT__
#ifdef __STDC__

extern uInt32    CSPMainMulti (uInt16 stnID);
extern uInt32    CSPStartup (void);
extern void      CheckScrubbing (uInt16 stnID);
extern void      CheckClaim (uInt16 stnID);
extern void      PortIsolated_Actions (uInt16 stnID, CSPPORTInfoType * portPtr);
extern void      PortPrimary_Actions (uInt16 stnID, CSPPORTInfoType * portPtr);
extern void      PortSecondary_Actions (uInt16 stnID, CSPPORTInfoType * portPtr);
extern void      PortLocal_Actions (uInt16 stnID, CSPPORTInfoType * portPtr);
extern void      CFMPortSelectionCriteria (uInt16 stnID, CSPPORTInfoType * portPtr);
extern void      CFMMACSelectionCriteria (uInt16 stnID, CSPMACInfoType * macPtr);
extern void      ReevaluateAttachment (uInt16 stnID);
extern void      SignalCFM (uInt16 stnID, uInt16 sigType, uInt16 sigEntity, uInt32 sigData);
extern void      SignalECM (uInt16 stnID, uInt16 sigType, uInt16 sigEntity, uInt32 sigData);
extern void      InitCSPMACData (CSPMACInfoType * macPtr);
extern void      InitCSPMACHWData (CSPMACInfoType * macPtr);
extern void      InitCSPPORTData (CSPPORTInfoType * portPtr);
extern void      InitCSPPORTHWData (CSPPORTInfoType * portPtr);
extern uInt32    InitCSPMIBSMTMulti (uInt16 stnID);
extern uInt32    InitCSPMIBMACMulti (uInt16 stnID, CSPMACInfoType * macPtr);
extern uInt32    InitCSPMIBMACHWMulti (uInt16 stnID, CSPMACInfoType * macPtr);
extern uInt32    InitCSPMIBPATHMulti (uInt16 stnID, CSPPATHInfoType * pathPtr);
extern uInt32    InitCSPMIBPORTMulti (uInt16 stnID, CSPPORTInfoType * portPtr);
extern uInt32    InitCSPMIBPORTHWMulti (uInt16 stnID, CSPPORTInfoType * portPtr);
extern uInt32    InitCSPData (uInt16 stnID);
extern uInt32    InitCSPMIBDataMulti (uInt16 stnID);
extern void      SignalLEM (uInt16 stnID, uInt16 sigType, uInt16 sigEntity, uInt32 sigData);
extern Flag      Allow_Connection (uInt16 stnID, CSPPORTInfoType * portPtr);
extern Flag      MACOnOutput (uInt16 stnID, CSPPORTInfoType * portPtr);
extern void      SendCSPEvent (uInt16 stnID, uInt16 eventType, uInt16 entity);
extern void      SendCSPVendorEvent (uInt16 stnID, uInt16 eventType, uInt32 eventID, uInt16 entity);
extern void      ProcessCSPMIBChange (SMTMessage * smtmsg);
extern void      ProcessCSPMACChange (SMTMessage * smtmsg);
extern void      ProcessCSPPORTChange (SMTMessage * smtmsg);
extern void      ProcessCSPMessageMulti (SMTMessage * smtmsg);
extern void      SignalPCM (uInt16 stnID, uInt16 sigType, uInt16 sigEntity, uInt32 sigData);
extern void      PC_TCode_Actions (uInt16 stnID, CSPPORTInfoType * portPtr);
extern void      PC_RCode_Actions (uInt16 stnID, CSPPORTInfoType * portPtr);
extern uInt32    InitProcessCSP (void);
extern void      ProcessCSP (ProcState * onState);
extern void      SignalRMT (uInt16 stnID, uInt16 sigType, uInt16 sigEntity, uInt32 sigData);
extern uInt32    StartupSignalQueue (void);
extern uInt32    InitSignalQueue (uInt16 stnID);
extern uInt32    EmptySignalQueue (void);
extern uInt32    ReadSignal (uInt16 * stnID, uInt16 * sigType, uInt16 * sigEntity, uInt32 * sigData);
extern void      SendSignalMulti (uInt16 stnID, uInt16 sigType, uInt16 sigEntity, uInt32 sigData);
extern uInt32    StartupCSPTimer (void);
extern uInt32    InitCSPTimer (uInt16 stnID);
extern void      SetCSPTimerMulti (uInt16 stnID, uInt32 interval, uInt16 stateMachine, uInt16 stateEntity, uInt16 * stateID);
extern void      ServiceCSPTimer (void);

#else							/* __STDC__ */

extern uInt32    CSPMainMulti ( /* uInt16 stnID */ );
extern uInt32    CSPStartup ( /* void */ );
extern void      CheckScrubbing ( /* uInt16 stnID */ );
extern void      CheckClaim ( /* uInt16 stnID */ );
extern void      PortIsolated_Actions (	/* uInt16 stnID, CSPPORTInfoType
	   portPtr */ );
extern void      PortPrimary_Actions (	/* uInt16 stnID, CSPPORTInfoType
	   portPtr */ );
extern void      PortSecondary_Actions (/* uInt16 stnID, CSPPORTInfoType
	   portPtr */ );
extern void      PortLocal_Actions (	/* uInt16 stnID, CSPPORTInfoType
	   portPtr */ );
extern void      CFMPortSelectionCriteria (	/* uInt16 stnID, CSPPORTInfoType
	   portPtr */ );
extern void      CFMMACSelectionCriteria (	/* uInt16 stnID, CSPMACInfoType
	   macPtr */ );
extern void      ReevaluateAttachment ( /* uInt16 stnID */ );
extern void      SignalCFM (			/* uInt16 stnID, uInt16 sigType,
	   uInt16 sigEntity, uInt32 sigData */ );
extern void      SignalECM (			/* uInt16 stnID, uInt16 sigType,
	   uInt16 sigEntity, uInt32 sigData */ );
extern void      InitCSPMACData ( /* CSPMACInfoType *macPtr */ );
extern void      InitCSPMACHWData ( /* CSPMACInfoType *macPtr */ );
extern void      InitCSPPORTData ( /* CSPPORTInfoType *portPtr */ );
extern void      InitCSPPORTHWData ( /* CSPPORTInfoType *portPtr */ );
extern uInt32    InitCSPMIBSMTMulti ( /* uInt16 stnID */ );
extern uInt32    InitCSPMIBMACMulti (	/* uInt16 stnID, CSPMACInfoType
	   macPtr */ );
extern uInt32    InitCSPMIBMACHWMulti (	/* uInt16 stnID, CSPMACInfoType
	   macPtr */ );
extern uInt32    InitCSPMIBPATHMulti (	/* uInt16 stnID, CSPPATHInfoType
	   pathPtr */ );
extern uInt32    InitCSPMIBPORTMulti (	/* uInt16 stnID, CSPPORTInfoType
	   portPtr */ );
extern uInt32    InitCSPMIBPORTHWMulti (/* uInt16 stnID, CSPPORTInfoType
	   portPtr */ );
extern uInt32    InitCSPData ( /* uInt16 stnID */ );
extern uInt32    InitCSPMIBDataMulti ( /* uInt16 stnID */ );
extern void      SignalLEM (			/* uInt16 stnID, uInt16 sigType,
	   uInt16 sigEntity, uInt32 sigData */ );
extern Flag      Allow_Connection (		/* uInt16 stnID, CSPPORTInfoType
	   portPtr */ );
extern Flag      MACOnOutput (			/* uInt16 stnID, CSPPORTInfoType
	   portPtr */ );
extern void      SendCSPEvent (			/* uInt16 stnID, uInt16 eventType,
	   uInt16 entity */ );
extern void      SendCSPVendorEvent (	/* uInt16 stnID, uInt16 eventType,
	   uInt32 eventID, uInt16 entity */ );
extern void      ProcessCSPMIBChange ( /* SMTMessage *smtmsg */ );
extern void      ProcessCSPMACChange ( /* SMTMessage *smtmsg */ );
extern void      ProcessCSPPORTChange ( /* SMTMessage *smtmsg */ );
extern void      ProcessCSPMessageMulti ( /* SMTMessage *smtmsg */ );
extern void      SignalPCM (			/* uInt16 stnID, uInt16 sigType,
	   uInt16 sigEntity, uInt32 sigData */ );
extern void      PC_TCode_Actions (		/* uInt16 stnID, CSPPORTInfoType
	   portPtr */ );
extern void      PC_RCode_Actions (		/* uInt16 stnID, CSPPORTInfoType
	   portPtr */ );
extern uInt32    InitProcessCSP ( /* void */ );
extern void      ProcessCSP ( /* ProcState *onState */ );
extern void      SignalRMT (			/* uInt16 stnID, uInt16 sigType,
	   uInt16 sigEntity, uInt32 sigData */ );
extern uInt32    StartupSignalQueue ( /* void */ );
extern uInt32    InitSignalQueue ( /* uInt16 stnID */ );
extern uInt32    EmptySignalQueue ( /* void */ );
extern uInt32    ReadSignal (			/* uInt16 *stnID, uInt16 *sigType,
	   uInt16 *sigEntity, uInt32 *sigData */ );
extern void      SendSignalMulti (		/* uInt16 stnID, uInt16 sigType,
	   uInt16 sigEntity, uInt32 sigData */ );
extern uInt32    StartupCSPTimer ( /* void */ );
extern uInt32    InitCSPTimer ( /* uInt16 stnID */ );
extern void      SetCSPTimerMulti (		/* uInt16 stnID, uInt32 interval,
										 * uInt16 stateMachine, uInt16
	   stateEntity, uInt16 *stateID */ );
extern void      ServiceCSPTimer ( /* void */ );

#endif							/* __STDC__ */
#endif							/* __CEXTRACT__ */

#ifndef MULTIPLE_STATION				/* single station core entry points */

#ifndef __CEXTRACT__
#ifdef __STDC__

extern uInt32    CSPMain (void);
extern uInt32    InitCSPMIBSMT (void);
extern uInt32    InitCSPMIBMAC (CSPMACInfoType * macPtr);
extern uInt32    InitCSPMIBMACHW (CSPMACInfoType * macPtr);
extern uInt32    InitCSPMIBPATH (CSPPATHInfoType * pathPtr);
extern uInt32    InitCSPMIBPORT (CSPPORTInfoType * portPtr);
extern uInt32    InitCSPMIBPORTHW (CSPPORTInfoType * portPtr);
extern uInt32    InitCSPMIBData (void);
extern void      ProcessCSPMessage (SMTMessage * smtmsg);
extern void      SendSignal (uInt16 sigType, uInt16 sigEntity, uInt32 sigData);
extern void      SetCSPTimer (uInt32 interval, uInt16 stateMachine, uInt16 stateEntity, uInt16 * stateID);

#else							/* __STDC__ */

extern uInt32    CSPMain ( /* void */ );
extern uInt32    InitCSPMIBSMT ( /* void */ );
extern uInt32    InitCSPMIBMAC ( /* CSPMACInfoType *macPtr */ );
extern uInt32    InitCSPMIBMACHW ( /* CSPMACInfoType *macPtr */ );
extern uInt32    InitCSPMIBPATH ( /* CSPPATHInfoType *pathPtr */ );
extern uInt32    InitCSPMIBPORT ( /* CSPPORTInfoType *portPtr */ );
extern uInt32    InitCSPMIBPORTHW ( /* CSPPORTInfoType *portPtr */ );
extern uInt32    InitCSPMIBData ( /* void */ );
extern void      ProcessCSPMessage ( /* SMTMessage *smtmsg */ );
extern void      SendSignal (			/* uInt16 sigType, uInt16 sigEntity,
	   uInt32 sigData */ );
extern void      SetCSPTimer (			/* uInt32 interval, uInt16
										 * stateMachine, uInt16 stateEntity,
	   uInt16 *stateID */ );

#endif							/* __STDC__ */
#endif							/* __CEXTRACT__ */

#endif	/* MULTIPLE_STATION */	/* end of single station core entry points */

#ifdef MULTIPLE_STATION					/* multistation I/F routines */

/*
 *   This file was automatically generated by cextract version 1.2.
 *   Manual editing not recommended.
 *
 *   Created: Thu Jan  6 16:53:39 1994
 */
#ifndef __CEXTRACT__
#ifdef __STDC__

extern uInt32    InitCSPInterruptsMulti (uInt16 stnID);
extern uInt32    InitCSPLocalMulti (uInt16 stnID);
extern void      LocalCSPMessages (SMTMessage * smtmsg);
extern void      LocalSignalQueueFull (struct SigQueueEntry q[], uInt16 * headIndex, uInt16 * tailIndex);
extern void      LocalTimerListFull (struct TimerListEntry list[], uInt16 ID, uInt16 count, uInt16 index);
extern void      ReceiveCSPMessage (SMTMessage * msg);
extern void      SendCSPMessage (SMTMessage * msg);
extern uInt32    InitCSPMessageMulti (uInt16 stnID);
extern uInt32    CSPGetMIBAttrMulti (uInt16 stnID, uInt16 bufSize, uChar * bufData);
extern uInt32    ReadSystemTimer (void);
extern void      SetSystemTimer (uInt32 interval);
extern Flag      StationPathTestMulti (uInt16 stnID);
extern void      BypassRequestMulti (uInt16 stnID, uInt16 bypassState);
extern void      ConfigureMasterMulti (uInt16 stnID, CSPPORTInfoType * portPtr, uInt16 cfmState);
extern void      ConfigureAttachMulti (uInt16 stnID, uInt16 CF_State);
extern void      TransmitPMDMulti (uInt16 stnID, uInt16 portID, uInt16 state);
extern void      SetPORTInterruptsMulti (uInt16 stnID, uInt16 portID, uInt16 state);
extern uInt16    ReadLineStateMulti (uInt16 stnID, uInt16 portID);
extern void      SendLineStateMulti (uInt16 stnID, uInt16 portID, uInt16 ls);
extern void      MACSetInterruptsMulti (uInt16 stnID, uInt16 macID, uInt16 state);
extern void      MACResetRequestMulti (uInt16 stnID, uInt16 macID);
extern void      MACClaimRequestMulti (uInt16 stnID, uInt16 macID);
extern void      SetBeaconMulti (uInt16 stnID, uInt16 macID, uChar beaconType, FDDILongAddressType DA, uInt16 infoLength, uChar * beaconInfo);
extern void      BeaconRequestMulti (uInt16 stnID, uInt16 macID);
extern uInt16    ChangeMACAddressMulti (uInt16 stnID, uInt16 macID, FDDILongAddressType newAddress);
extern void      SetMACInputMulti (uInt16 stnID, uInt16 macID, Flag state);
extern void      ConfigureMACMulti (uInt16 stnID, uInt16 macID, Flag state, uInt16 pathID, uInt32 TVXLB, uInt32 T_MaxLB, uInt32 MaxT_Req);
extern Flag      ReadMACR_FlagMulti (uInt16 stnID, uInt16 macID);
extern void      SetLEMCounterMulti (uInt16 stnID, uInt16 portID, uInt16 threshold);
extern uInt16    ReadLEMCounterMulti (uInt16 stnID, uInt16 portID);
extern void      SetLEMStateMulti (uInt16 stnID, uInt16 portID, Flag state);
extern void      SetupMACLCTMulti (uInt16 stnID, uInt16 portID);
extern void      FinishMACLCTMulti (uInt16 stnID, uInt16 portID);
extern void      StartScrubbingMulti (uInt16 stnID, uInt16 pathID);

#else							/* __STDC__ */

extern uInt32    InitCSPInterruptsMulti ( /* uInt16 stnID */ );
extern uInt32    InitCSPLocalMulti ( /* uInt16 stnID */ );
extern void      LocalCSPMessages ( /* SMTMessage *smtmsg */ );
extern void      LocalSignalQueueFull (	/* struct SigQueueEntry q[], uInt16
	   headIndex, uInt16 *tailIndex */ );
extern void      LocalTimerListFull (	/* struct TimerListEntry list[],
										 * uInt16 ID, uInt16 count, uInt16
	   index */ );
extern void      ReceiveCSPMessage ( /* SMTMessage *msg */ );
extern void      SendCSPMessage ( /* SMTMessage *msg */ );
extern uInt32    InitCSPMessageMulti ( /* uInt16 stnID */ );
extern uInt32    CSPGetMIBAttrMulti (	/* uInt16 stnID, uInt16 bufSize,
	   uChar *bufData */ );
extern uInt32    ReadSystemTimer ( /* void */ );
extern void      SetSystemTimer ( /* uInt32 interval */ );
extern Flag      StationPathTestMulti ( /* uInt16 stnID */ );
extern void      BypassRequestMulti ( /* uInt16 stnID, uInt16 bypassState */ );
extern void      ConfigureMasterMulti (	/* uInt16 stnID, CSPPORTInfoType
	   portPtr, uInt16 cfmState */ );
extern void      ConfigureAttachMulti ( /* uInt16 stnID, uInt16 CF_State */ );
extern void      TransmitPMDMulti (		/* uInt16 stnID, uInt16 portID,
	   uInt16 state */ );
extern void      SetPORTInterruptsMulti (	/* uInt16 stnID, uInt16 portID,
	   uInt16 state */ );
extern uInt16    ReadLineStateMulti ( /* uInt16 stnID, uInt16 portID */ );
extern void      SendLineStateMulti (	/* uInt16 stnID, uInt16 portID,
	   uInt16 ls */ );
extern void      MACSetInterruptsMulti (/* uInt16 stnID, uInt16 macID, uInt16
	   state */ );
extern void      MACResetRequestMulti ( /* uInt16 stnID, uInt16 macID */ );
extern void      MACClaimRequestMulti ( /* uInt16 stnID, uInt16 macID */ );
extern void      SetBeaconMulti (		/* uInt16 stnID, uInt16 macID, uChar
										 * beaconType, FDDILongAddressType
										 * DA, uInt16 infoLength, uChar
	   beaconInfo */ );
extern void      BeaconRequestMulti ( /* uInt16 stnID, uInt16 macID */ );
extern uInt16    ChangeMACAddressMulti (/* uInt16 stnID, uInt16 macID,
	   FDDILongAddressType newAddress */ );
extern void      SetMACInputMulti (		/* uInt16 stnID, uInt16 macID, Flag
	   state */ );
extern void      ConfigureMACMulti (	/* uInt16 stnID, uInt16 macID, Flag
										 * state, uInt16 pathID, uInt32
										 * TVXLB, uInt32 T_MaxLB, uInt32
	   MaxT_Req */ );
extern Flag      ReadMACR_FlagMulti ( /* uInt16 stnID, uInt16 macID */ );
extern void      SetLEMCounterMulti (	/* uInt16 stnID, uInt16 portID,
	   uInt16 threshold */ );
extern uInt16    ReadLEMCounterMulti ( /* uInt16 stnID, uInt16 portID */ );
extern void      SetLEMStateMulti (		/* uInt16 stnID, uInt16 portID, Flag
	   state */ );
extern void      SetupMACLCTMulti ( /* uInt16 stnID, uInt16 portID */ );
extern void      FinishMACLCTMulti ( /* uInt16 stnID, uInt16 portID */ );
extern void      StartScrubbingMulti ( /* uInt16 stnID, uInt16 pathID */ );

#endif							/* __STDC__ */
#endif							/* __CEXTRACT__ */

#else	/* MULTIPLE_STATION */	/* single station I/F routines */

/*
 *   This file was automatically generated by cextract version 1.2.
 *   Manual editing not recommended.
 *
 *   Created: Thu Jan  6 16:53:39 1994
 */
#ifndef __CEXTRACT__
#ifdef __STDC__

extern uInt32    InitCSPInterrupts (void);
extern uInt32    InitCSPLocal (void);
extern void      LocalCSPMessages (SMTMessage * smtmsg);
extern void      LocalSignalQueueFull (struct SigQueueEntry q[], uInt16 * headIndex, uInt16 * tailIndex);
extern void      LocalTimerListFull (struct TimerListEntry list[], uInt16 ID, uInt16 count, uInt16 index);
extern void      ReceiveCSPMessage (SMTMessage * msg);
extern void      SendCSPMessage (SMTMessage * msg);
extern uInt32    InitCSPMessage (void);
extern uInt32    CSPGetMIBAttr (uInt16 bufSize, uChar * bufData);
extern uInt32    ReadSystemTimer (void);
extern void      SetSystemTimer (uInt32 interval);
extern Flag      StationPathTest (void);
extern void      BypassRequest (uInt16 bypassState);
extern void      ConfigureMaster (CSPPORTInfoType * portPtr, uInt16 cfmState);
extern void      ConfigureAttach (uInt16 CF_State);
extern void      TransmitPMD (uInt16 portID, uInt16 state);
extern void      SetPORTInterrupts (uInt16 portID, uInt16 state);
extern uInt16    ReadLineState (uInt16 portID);
extern void      SendLineState (uInt16 portID, uInt16 ls);
extern void      MACSetInterrupts (uInt16 macID, uInt16 state);
extern void      MACResetRequest (uInt16 macID);
extern void      MACClaimRequest (uInt16 macID);
extern void      SetBeacon (uInt16 macID, uChar beaconType, FDDILongAddressType DA, uInt16 infoLength, uChar * beaconInfo);
extern void      BeaconRequest (uInt16 macID);
extern uInt16    ChangeMACAddress (uInt16 macID, FDDILongAddressType newAddress);
extern void      SetMACInput (uInt16 macID, Flag state);
extern void      ConfigureMAC (uInt16 macID, Flag state, uInt16 pathID, uInt32 TVXLB, uInt32 T_MaxLB, uInt32 MaxT_Req);
extern Flag      ReadMACR_Flag (uInt16 macID);
extern void      SetLEMCounter (uInt16 portID, uInt16 threshold);
extern uInt16    ReadLEMCounter (uInt16 portID);
extern void      SetLEMState (uInt16 portID, Flag state);
extern void      SetupMACLCT (uInt16 portID);
extern void      FinishMACLCT (uInt16 portID);
extern void      StartScrubbing (uInt16 pathID);

#else							/* __STDC__ */

extern uInt32    InitCSPInterrupts ( /* void */ );
extern uInt32    InitCSPLocal ( /* void */ );
extern void      LocalCSPMessages ( /* SMTMessage *smtmsg */ );
extern void      LocalSignalQueueFull (	/* struct SigQueueEntry q[], uInt16
	   headIndex, uInt16 *tailIndex */ );
extern void      LocalTimerListFull (	/* struct TimerListEntry list[],
										 * uInt16 ID, uInt16 count, uInt16
	   index */ );
extern void      ReceiveCSPMessage ( /* SMTMessage *msg */ );
extern void      SendCSPMessage ( /* SMTMessage *msg */ );
extern uInt32    InitCSPMessage ( /* void */ );
extern uInt32    CSPGetMIBAttr ( /* uInt16 bufSize, uChar *bufData */ );
extern uInt32    ReadSystemTimer ( /* void */ );
extern void      SetSystemTimer ( /* uInt32 interval */ );
extern Flag      StationPathTest ( /* void */ );
extern void      BypassRequest ( /* uInt16 bypassState */ );
extern void      ConfigureMaster (		/* CSPPORTInfoType *portPtr, uInt16
	   cfmState */ );
extern void      ConfigureAttach ( /* uInt16 CF_State */ );
extern void      TransmitPMD ( /* uInt16 portID, uInt16 state */ );
extern void      SetPORTInterrupts ( /* uInt16 portID, uInt16 state */ );
extern uInt16    ReadLineState ( /* uInt16 portID */ );
extern void      SendLineState ( /* uInt16 portID, uInt16 ls */ );
extern void      MACSetInterrupts ( /* uInt16 macID, uInt16 state */ );
extern void      MACResetRequest ( /* uInt16 macID */ );
extern void      MACClaimRequest ( /* uInt16 macID */ );
extern void      SetBeacon (			/* uInt16 macID, uChar beaconType,
										 * FDDILongAddressType DA, uInt16
	   infoLength, uChar *beaconInfo */ );
extern void      BeaconRequest ( /* uInt16 macID */ );
extern uInt16    ChangeMACAddress (		/* uInt16 macID, FDDILongAddressType
	   newAddress */ );
extern void      SetMACInput ( /* uInt16 macID, Flag state */ );
extern void      ConfigureMAC (			/* uInt16 macID, Flag state, uInt16
										 * pathID, uInt32 TVXLB, uInt32
	   T_MaxLB, uInt32 MaxT_Req */ );
extern Flag      ReadMACR_Flag ( /* uInt16 macID */ );
extern void      SetLEMCounter ( /* uInt16 portID, uInt16 threshold */ );
extern uInt16    ReadLEMCounter ( /* uInt16 portID */ );
extern void      SetLEMState ( /* uInt16 portID, Flag state */ );
extern void      SetupMACLCT ( /* uInt16 portID */ );
extern void      FinishMACLCT ( /* uInt16 portID */ );
extern void      StartScrubbing ( /* uInt16 pathID */ );

#endif							/* __STDC__ */
#endif							/* __CEXTRACT__ */

#endif	/* MULTIPLE_STATION */	/* end I/F routine */
